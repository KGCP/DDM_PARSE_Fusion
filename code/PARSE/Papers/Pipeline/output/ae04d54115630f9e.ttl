@prefix askg-data: <https://www.anu.edu.au/data/scholarly/> .
@prefix askg-onto: <https://www.anu.edu.au/onto/scholarly#> .
@prefix dc: <http://purl.org/dc/elements/1.1/> .
@prefix domo: <http://example.org/domo/> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

askg-data:Paper-ae04d54115630f9e a askg-onto:Paper ;
    rdfs:label "ae04d54115630f9e"@en ;
    dc:title "ae04d54115630f9e"^^xsd:string ;
    askg-onto:hasSection askg-data:Paper-ae04d54115630f9e-Section-1,
        askg-data:Paper-ae04d54115630f9e-Section-10,
        askg-data:Paper-ae04d54115630f9e-Section-11,
        askg-data:Paper-ae04d54115630f9e-Section-12,
        askg-data:Paper-ae04d54115630f9e-Section-13,
        askg-data:Paper-ae04d54115630f9e-Section-2,
        askg-data:Paper-ae04d54115630f9e-Section-3,
        askg-data:Paper-ae04d54115630f9e-Section-4,
        askg-data:Paper-ae04d54115630f9e-Section-5,
        askg-data:Paper-ae04d54115630f9e-Section-6,
        askg-data:Paper-ae04d54115630f9e-Section-7,
        askg-data:Paper-ae04d54115630f9e-Section-8,
        askg-data:Paper-ae04d54115630f9e-Section-9 .

askg-data:Entity-%09extdef rdfs:label "$	ext{def.}$"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-%09exthat%09extgamman rdfs:label "$	ext{hat{	extgamma}}^n$"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-%09ildeeta_n rdfs:label "	ilde{eta}_{n}"@en,
        "	ilde{eta}_{n}^{*}"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-%09ildeeta_n1 rdfs:label "	ilde{eta}_{n+1}"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-%0A rdfs:label """
"""@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-%0A%09heta rdfs:label """
	heta"""@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-%0Ahatgamma_n1 rdfs:label """$
\\hat{\\gamma}_{n+1}$"""@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-%0Ai_d rdfs:label """
I d"""@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-%0Aperpm%0A rdfs:label """
\\perp^{*}M!
"""@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-%C2%B5%CB%86 rdfs:label "µˆ"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-%C2%B5%CE%B1 rdfs:label "µα"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-%C2%B5%CE%B1g rdfs:label "µαG"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-%C2%B5%CE%B1g%CE%B1n rdfs:label "µαGαn"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-%C2%B5__%C2%B5m rdfs:label "µ ◦ µM"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-%C2%B5__%CE%B7m rdfs:label "µ ◦ ηM"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-%C2%B5__m%C2%B5 rdfs:label "µ ◦ Mµ"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-%C2%B5__m%CE%B7 rdfs:label "µ ◦ Mη"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-%C2%B5_t rdfs:label "µ T"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-%C2%B5a rdfs:label "µ(A)"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-%C2%B5m rdfs:label "µM"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-%C2%B5mf rdfs:label "µMf"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-%C2%B5mm%CE%B3 rdfs:label "µM(M!γ)"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-%C2%B5v rdfs:label "µ(v↑)"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-%C7%AB rdfs:label "ǫ"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-%C7%AB_and_1 rdfs:label "ǫ and 1"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-%C7%AB_s0 rdfs:label "{(**ǫ, s**0)}"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-%C7%AB_x rdfs:label "{(**ǫ, x**)}"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-%CB%86%CE%B3n1__%CE%B7__%CE%B3_def rdfs:label "ˆγn+1 · η ♯· γ def"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-%CB%86%CE%B7_%CF%86%CB%86 rdfs:label "[ˆη, φˆ]"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-%CB%86%CF%951 rdfs:label "ˆϕ1"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-%CB%86%CF%951__f%CB%86%CE%B2%CB%86n_1_f%CB%86%CE%B3n__%CE%B3_def rdfs:label "ˆϕ1 · Fˆβˆn 1· Fˆγ¯n · γ def"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-%CB%86%CF%951__f%CB%86f%CB%86t1__f%CB%86f%CB%86t_x__f%CB%86%CE%B3_n_ rdfs:label "ˆϕ1 · FˆFˆ∗!T1 · FˆFˆ∗T !X · Fˆ(γ (n)) ∗"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-%CB%86%CF%95__f%CB%86%CE%B7%CB%86 rdfs:label "ˆϕ · Fˆηˆ"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-%CE%B1%CE%B3 rdfs:label "αγ"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-%CE%B1%CE%B3_%CE%B3_n rdfs:label "(αγ) ∗γ (n)"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-%CE%B1-trace_semantics rdfs:label "α-trace semantics"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-%CE%B10 rdfs:label "α0"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-%CE%B10__%CE%B7 rdfs:label "α0 = η"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-%CE%B1__p1__%CF%83__ rdfs:label "α : P(1 + Σ × )"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-%CE%B1g%CE%B1n rdfs:label "αG(αn)"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-%CE%B1trace_equivalent rdfs:label "αtrace equivalent"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-%CE%B1x_s__%C7%AB_x__x__s__a_x__a_x__s rdfs:label "αX (S) = {(ǫ, X) | X ∈ S} ∪ {(a, x) | (**a, x**) ∈ S}"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-%CE%B2 rdfs:label "β"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-%CE%B2%CB%860 rdfs:label "βˆ0"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-%CE%B2%CB%86n1_1_f%CE%B3n__%CE%B3__%CE%B7_tx_ rdfs:label "βˆn+1 1· Fγ¯n · γ ♯· η TX (−)"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-%CE%B2%CB%86n1_1_f%CE%B3n__%CE%B3_def rdfs:label "βˆn+1 1· Fγ¯n · γ def"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-%CE%B20_and_%CE%B3_0 rdfs:label "β^{0} and γ_{0}"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-%CE%B2_n rdfs:label "β n"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-%CE%B3%CB%860 rdfs:label "γˆ0"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-%CE%B3%CB%86n rdfs:label "γˆn"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-%CE%B3%CB%86n1 rdfs:label "γˆn+1"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-%CE%B30__ rdfs:label "γ0 = ⊥"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-%CE%B3_0 rdfs:label "γ_{0}"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-%CE%B3_0__%CE%B7x rdfs:label "γ (0) = ηX"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-%CE%B3_0s0 rdfs:label "γ (0)(s0)"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-%CE%B3_1 rdfs:label "γ (1)"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-%CE%B3_1s0 rdfs:label "γ (1)(s0)"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-%CE%B3_2s0 rdfs:label "γ (2)(s0)"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-%CE%B3_3s0 rdfs:label "γ (3)(s0)"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-%CE%B3__x__2__px_%CF%83 rdfs:label "γ : X → 2 × P(X) Σ"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-%CE%B3_def rdfs:label "γ def"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-%CE%B3_f%CB%86-algebra_morphisms rdfs:label "γ Fˆ-algebra morphisms"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-%CE%B3_n1 rdfs:label "γ (n+1)"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-%CE%B3_nc rdfs:label "γ n(c)"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-%CE%B3n__x__gn1 rdfs:label "γn : X → Gn1"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-%CE%B3n__x__t_f_nn%CF%89 rdfs:label "(¯γn : X → T F n∅)n<ω"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-%CE%B3x rdfs:label "γ(x)"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-%CE%B7%CB%86 rdfs:label "ηˆ"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-%CE%B7%CB%86tx rdfs:label "ηˆTX"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-%CE%B7_t_x rdfs:label "η T X"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-%CE%B7_x rdfs:label "η x"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-%CE%B7f_ rdfs:label "(ηf) ∗"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-%CE%B7x rdfs:label "η(x)"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-%CE%B7x__%C7%AB_x rdfs:label "η(x) = {(**ǫ, x**)}"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-%CE%BA%CB%86 rdfs:label "κˆ"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-%CE%BB__%CF%83__d__d%CF%82__ rdfs:label "λ : Σ × D → D(Σ × )"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-%CE%BBx rdfs:label "λx"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-%CE%BC_x%09ext%CE%B5 rdfs:label "μ_{x}(	ext{ε}↑)"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-%CE%BC_xa_v rdfs:label "μ_{x}(a v↑)"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-%CE%BDf rdfs:label "νF"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-%CE%BE rdfs:label "ξ"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-%CE%BE__%CE%B7x__idx rdfs:label "ξ ◦ ηX = idX"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-%CE%BE__m_%CE%BE__%CE%BE__%C2%B5x rdfs:label "ξ ◦ M ξ = ξ ◦ µX"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-%CF%801_%CF%802 rdfs:label "π1, π2"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-%CF%83-additive rdfs:label "σ-additive"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-%CF%83-algebra rdfs:label "σ-algebra"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-%CF%83__x rdfs:label "Σ × X"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-%CF%89-behavioural_equivalence rdfs:label "ω-behavioural equivalence"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-%CF%95%CB%86 rdfs:label "ϕˆ"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-%CF%95%CB%86x rdfs:label "ϕˆX"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-0 rdfs:label "0"@en ;
    askg-onto:entityType "Score"@en .

askg-data:Entity-0_1 rdfs:label "{0, 1}"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-109129 rdfs:label "109–129"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-119135 rdfs:label "119–135"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-12 rdfs:label "12"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-1417 rdfs:label "14(1:7)"@en ;
    askg-onto:entityType "Publication"@en .

askg-data:Entity-19 rdfs:label "[19]"@en ;
    askg-onto:entityType "Article"@en .

askg-data:Entity-1970 rdfs:label "1970"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-1976 rdfs:label "1976"@en ;
    askg-onto:entityType "Publication"@en .

askg-data:Entity-1981 rdfs:label "1981"@en ;
    askg-onto:entityType "Publication"@en .

askg-data:Entity-1990 rdfs:label "1990"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-1997 rdfs:label "1997"@en ;
    askg-onto:entityType "Publication"@en .

askg-data:Entity-1999 rdfs:label "1999"@en ;
    askg-onto:entityType "Publication"@en .

askg-data:Entity-1__ rdfs:label "1 = {∗}"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-2007 rdfs:label "2007"@en ;
    askg-onto:entityType "Publication"@en .

askg-data:Entity-2010 rdfs:label "2010"@en ;
    askg-onto:entityType "Publication"@en .

askg-data:Entity-2012 rdfs:label "2012"@en ;
    askg-onto:entityType "Publication"@en .

askg-data:Entity-2013 rdfs:label "2013"@en ;
    askg-onto:entityType "Publication"@en .

askg-data:Entity-2014 rdfs:label "2014"@en ;
    askg-onto:entityType "Publication"@en .

askg-data:Entity-259274 rdfs:label "259–274"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-272283 rdfs:label "272–283"@en ;
    askg-onto:entityType "Result"@en .

askg-data:Entity-2739 rdfs:label "27–39"@en ;
    askg-onto:entityType "Score"@en .

askg-data:Entity-278297 rdfs:label "278–297"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-280291 rdfs:label "280–291"@en ;
    askg-onto:entityType "Publication"@en .

askg-data:Entity-29 rdfs:label "29"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-2x%CF%82 rdfs:label "2×XΣ"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-3 rdfs:label "3"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-3frac12 rdfs:label "(3)^{\\frac{1}{2}}"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-3rd_hungarian_comp rdfs:label "3rd Hungarian Comp."@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-4 rdfs:label "[4]"@en ;
    askg-onto:entityType "Publication"@en .

askg-data:Entity-426440 rdfs:label "426–440"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-576587 rdfs:label "576–587"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-6377 rdfs:label "63–77"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-8 rdfs:label "[8]"@en ;
    askg-onto:entityType "Publication"@en .

askg-data:Entity-919_2013 rdfs:label "9(1:9), 2013"@en ;
    askg-onto:entityType "Article"@en .

askg-data:Entity-_m1__m0 rdfs:label "⊥∗: M1 → M0"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-_t_xt_xto1 rdfs:label "!_{T X}:T X\\to1"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-_tx rdfs:label "!_{TX}"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-_x_x_%CE%B3ax%CE%BC_xv rdfs:label "∑_{x′∈ X} γ(a,x′)μ_{x′}(v↑)"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-a-successor rdfs:label "a-successor"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-a-transition rdfs:label "a-transition"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-a_larger_range_of_program_equivalences rdfs:label "a larger range of program equivalences"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-a_mathematical_structure rdfs:label "a mathematical structure"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-a_natural_transformation rdfs:label "a natural transformation"@en ;
    askg-onto:entityType "Method"@en .

askg-data:Entity-a_numerical_range rdfs:label "a numerical range"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-a_s10a_s11 rdfs:label "{(a, s10),(**a, s**11)}"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-ab_s20ac_s21 rdfs:label "{(ab, s20),(**ac, s**21)}"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-abstract_data_type_specifications rdfs:label "abstract data type specifications"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-acceptance_condition rdfs:label "acceptance condition"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-accepted rdfs:label "accepted"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-accepted_traces rdfs:label "accepted traces"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-accepting_states rdfs:label "accepting states"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-aceto_a rdfs:label "Aceto, A."@en ;
    askg-onto:entityType "Person"@en .

askg-data:Entity-acm_trans rdfs:label "ACM Trans."@en ;
    askg-onto:entityType "Publication"@en .

askg-data:Entity-alexander_kurz rdfs:label "Alexander Kurz"@en ;
    askg-onto:entityType "Person"@en .

askg-data:Entity-alg rdfs:label "Alg"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-algebra rdfs:label "algebra"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-algebraically-free_monad_on_f rdfs:label "(algebraically-)free monad on F"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-algebraically_free_monad_g rdfs:label "algebraically free monad G∗"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-algorithm_c rdfs:label "Algorithm C"@en ;
    askg-onto:entityType "Algorithm"@en .

askg-data:Entity-all_cases rdfs:label "all cases"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-all_finite_unfoldings_of_the_set_of_pretraces rdfs:label "all finite unfoldings of the set of pretraces"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-all_input_letters rdfs:label "all input letters"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-all_subsets_of_%CF%83__1 rdfs:label "all subsets of Σ∗ × 1"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-all_traces rdfs:label "all traces"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-alpha_ngamma_n rdfs:label "\\alpha_{n}\\gamma_{n}"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-alphabet rdfs:label "alphabet"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-an_additional_parameter rdfs:label "an additional parameter"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-analysis_of_concurrent_and_reactive_systems rdfs:label "analysis of concurrent and reactive systems"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-animal rdfs:label "Animal"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-applying_d_to_%CE%B3 rdfs:label "applying D to γ"@en ;
    askg-onto:entityType "Method"@en .

askg-data:Entity-approaches rdfs:label "approaches"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-appropriate_logics rdfs:label "appropriate logics"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-argamma_n%09extperp_mgamman rdfs:label "$ar{\\gamma}_n=	ext{perp}^* M!\\gamma^{(n)}$"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-argamma_n1 rdfs:label "$ar{\\gamma}_{n+1}$"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-arguments rdfs:label "arguments"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-article rdfs:label "Article"@en ;
    askg-onto:entityType "Article"@en .

askg-data:Entity-arxiv rdfs:label "arXiv"@en ;
    askg-onto:entityType "Platform"@en .

askg-data:Entity-arxiv_preprint_11033239 rdfs:label "arXiv preprint 1103.3239"@en ;
    askg-onto:entityType "Article"@en .

askg-data:Entity-as rdfs:label "{a}×S"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-aspects_of_the_system rdfs:label "aspects of the system"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-associated_sheaves rdfs:label "associated sheaves"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-associating_probabilities_to_maximal_infinite_traces rdfs:label "associating probabilities to maximal (infinite) traces"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-assumption rdfs:label "assumption"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-at_most_n rdfs:label "at most n"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-austral rdfs:label "Austral"@en ;
    askg-onto:entityType "Organization"@en .

askg-data:Entity-axiomatization rdfs:label "axiomatization"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-b_and_c rdfs:label "b and c"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-bargamma_0 rdfs:label "\\bar{\\gamma}_{0}"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-bargamma_n1 rdfs:label "\\bar{\\gamma}_{n+1}"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-barr rdfs:label "Barr"@en ;
    askg-onto:entityType "Person"@en .

askg-data:Entity-behaviour rdfs:label "behaviour"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-behaviour_of_a_composed_system rdfs:label "behaviour of a composed system"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-behavioural_preorders rdfs:label "behavioural preorders"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-behaviourally_equivalent rdfs:label "behaviourally equivalent"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-behaviours_of_the_components rdfs:label "behaviours of the components"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-bijection rdfs:label "bijection"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-binary rdfs:label "binary"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-birkhoff_theorem rdfs:label "Birkhoff Theorem"@en ;
    askg-onto:entityType "Theory"@en .

askg-data:Entity-bisimilarity_of_process_algebra rdfs:label "bisimilarity of process algebra"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-bonsangue_s rdfs:label "Bonsangue, S."@en ;
    askg-onto:entityType "Person"@en .

askg-data:Entity-branches rdfs:label "branches"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-branching rdfs:label "branching"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-bull rdfs:label "Bull"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-c%CB%86%C4%B1rstea rdfs:label "Cˆırstea"@en ;
    askg-onto:entityType "Person"@en .

askg-data:Entity-c__c rdfs:label "C → C"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-cambridge_university_press rdfs:label "Cambridge University Press"@en ;
    askg-onto:entityType "Organization"@en .

askg-data:Entity-canonical rdfs:label "canonical"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-canonical_cone rdfs:label "canonical cone"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-canonical_cone_for_d%CE%B3 rdfs:label "canonical cone for Dγ"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-canonical_distributive_law rdfs:label "canonical distributive law"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-canonical_natural_transformations rdfs:label "canonical natural transformations"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-carriers rdfs:label "carriers"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-category_of_g-algebras rdfs:label "category of G-algebras"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-category_of_sets_and_functions rdfs:label "category of sets and functions"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-category_set rdfs:label "category Set"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-cmcs_1999 rdfs:label "CMCS 1999"@en ;
    askg-onto:entityType "Publication"@en .

askg-data:Entity-coalgebra_%CE%B3__x__f_t_x rdfs:label "coalgebra γ : X → F T X"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-coalgebra_morphism rdfs:label "coalgebra morphism"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-coalgebra_morphisms rdfs:label "coalgebra morphisms"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-coalgebra_structure rdfs:label "coalgebra structure"@en ;
    askg-onto:entityType "Framework"@en .

askg-data:Entity-coalgebraic_approaches rdfs:label "coalgebraic approaches"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-coalgebraic_aspects_of_trace_equivalence rdfs:label "coalgebraic aspects of trace equivalence"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-coalgebraic_foundation rdfs:label "coalgebraic foundation"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-coalgebraic_language_equivalence rdfs:label "coalgebraic language equivalence"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-coalgebraic_methods rdfs:label "coalgebraic methods"@en ;
    askg-onto:entityType "Method"@en .

askg-data:Entity-coalgebraic_setting rdfs:label "coalgebraic setting"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-coalgebraic_theory rdfs:label "coalgebraic theory"@en ;
    askg-onto:entityType "Theory"@en .

askg-data:Entity-coalgebraic_trace_semantics rdfs:label "coalgebraic trace semantics"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-coalgebraic_type_of_system rdfs:label "coalgebraic type of system"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-coalgebraically rdfs:label "coalgebraically"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-coalgebras_%CE%B3__x__p%CF%82__x rdfs:label "coalgebras γ : X → P(Σ × X)"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-coalgebras_for_the_functor_d%CF%82__ rdfs:label "coalgebras for the functor D(Σ × )"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-coalgebras_of_the_form_%CE%B3__x__2__px_%CF%83 rdfs:label "coalgebras of the form γ : X → 2 × P(X) Σ"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-coequalizers rdfs:label "Coequalizers"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-coinduction rdfs:label "coinduction"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-coinductive_definition rdfs:label "coinductive definition"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-colimits rdfs:label "colimits"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-collapsing rdfs:label "collapsing"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-common_codomain rdfs:label "common codomain"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-common_umbrella_for_system_types rdfs:label "common umbrella for system types"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-communicating_sequential_processes rdfs:label "Communicating sequential processes"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-commutative rdfs:label "commutative"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-comonads rdfs:label "comonads"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-comp rdfs:label "Comp."@en ;
    askg-onto:entityType "Domain"@en .

askg-data:Entity-competition rdfs:label "Competition"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-component_of_%CE%B1n_at_1 rdfs:label "component of αn at 1"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-componentwise_postcomposition rdfs:label "componentwise postcomposition"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-composition rdfs:label "composition"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-computations rdfs:label "computations"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-concretely_given_systems rdfs:label "concretely given systems"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-concretely_given_transition_types rdfs:label "concretely given transition types"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-concur_1990 rdfs:label "CONCUR 1990"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-conditions_i_ii_iii rdfs:label "conditions (i), (ii), (iii)"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-cone rdfs:label "cone"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-cones rdfs:label "cones"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-cones_induced_by_the_respective_coalgebras rdfs:label "cones induced by the respective coalgebras"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-congruence rdfs:label "congruence"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-considerations rdfs:label "considerations"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-constant_functor rdfs:label "constant functor"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-content rdfs:label "content"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-conveniently rdfs:label "conveniently"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-convolutional_neural_networks rdfs:label "Convolutional Neural Networks"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-coproduct_gg1__1 rdfs:label "coproduct GG∗1 + 1"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-corpus rdfs:label "Corpus"@en ;
    askg-onto:entityType "Corpus"@en .

askg-data:Entity-corresponding_automaton rdfs:label "corresponding automaton"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-csli rdfs:label "CSLI"@en ;
    askg-onto:entityType "Organization"@en .

askg-data:Entity-csp rdfs:label "CSP"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-current_state rdfs:label "current state"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-d%CF%82 rdfs:label "D(Σ∗)"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-d%CF%82__ rdfs:label "D(Σ × )"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-d%CF%82__x rdfs:label "D(Σ × X)"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-da__x rdfs:label "D(A × X)"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-data_analysis rdfs:label "Data Analysis"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-data_science rdfs:label "Data Science"@en ;
    askg-onto:entityType "Research Area"@en .

askg-data:Entity-datasets rdfs:label "datasets"@en ;
    askg-onto:entityType "Domain"@en .

askg-data:Entity-deadlocks rdfs:label "deadlocks"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-decision_between_b_and_c rdfs:label "decision between b and c"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-deep_learning rdfs:label "Deep Learning"@en ;
    askg-onto:entityType "Concept"@en,
        "Research Area"@en .

askg-data:Entity-def rdfs:label "def."@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-definition_1 rdfs:label "Definition 1"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-definition_5 rdfs:label "Definition 5"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-deterministic_part rdfs:label "deterministic part"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-developments_in_coalgebra rdfs:label "developments in coalgebra"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-df rdfs:label "D(f)"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-difference rdfs:label "difference"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-dirac_distribution rdfs:label "Dirac distribution"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-dirac_distribution_at_%C7%AB_x rdfs:label "Dirac distribution at (ǫ, x)"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-dirac_measures rdfs:label "Dirac measures"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-dirk_pattinson rdfs:label "Dirk Pattinson"@en ;
    askg-onto:entityType "Person"@en .

askg-data:Entity-discrete_distribution_%C2%B5_on_%CF%83__x rdfs:label "discrete distribution µ on Σ × X"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-discrete_distribution_on_%CF%83__x rdfs:label "discrete distribution on Σ∗ × X"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-discrete_distributions_functor rdfs:label "discrete distributions functor"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-discrete_probability_distributions_on_x rdfs:label "discrete probability distributions on X"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-distinguished_element_e rdfs:label "distinguished element e"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-distribute_joins_over_y_and_n rdfs:label "distribute joins over y and n"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-distribution rdfs:label "distribution"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-distributions rdfs:label "distributions"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-distributive_law rdfs:label "distributive law"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-distributive_law_%CE%B4x rdfs:label "distributive law δX"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-distributive_law_%CE%BB rdfs:label "distributive law λ"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-distributive_law_%CF%81 rdfs:label "distributive law ρ"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-domain rdfs:label "domain"@en ;
    askg-onto:entityType "Domain"@en .

askg-data:Entity-dx rdfs:label "D(X)"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-each_state_x__x rdfs:label "each state x ∈ X"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-each_step rdfs:label "each step"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-eg rdfs:label "E.g."@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-eilenberg-moore_algebra rdfs:label "Eilenberg-Moore algebra"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-eilenberg-moore_algebras rdfs:label "Eilenberg-Moore algebras"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-eilenberg-moore_categories rdfs:label "Eilenberg-Moore categories"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-eilenberg-moore_category rdfs:label "Eilenberg-Moore category"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-eilenberg-moore_category_ct rdfs:label "Eilenberg-Moore category CT"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-eilenberg-moore_liftings rdfs:label "Eilenberg-Moore Liftings"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-element rdfs:label "element"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-elsevier rdfs:label "Elsevier"@en ;
    askg-onto:entityType "Organization"@en .

askg-data:Entity-embedding_functors rdfs:label "embedding functors"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-embedding_of_a_functor rdfs:label "embedding of a functor"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-empty_word_%C7%AB rdfs:label "empty word ǫ"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-endofunctor_f rdfs:label "endofunctor F"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-endofunctor_f%CB%86 rdfs:label "endofunctor Fˆ"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-entcs rdfs:label "ENTCS"@en ;
    askg-onto:entityType "Publication"@en .

askg-data:Entity-equivalence rdfs:label "equivalence"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-equivalences rdfs:label "equivalences"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-eta_1n rdfs:label "${eta}_{1}^{n}$"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-eta_x rdfs:label "\\eta_{X}"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-eta_xt rdfs:label "{\\eta_{X}^{T}"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-etan1_-2 rdfs:label "$eta^{n+1}$ $(-)^2$"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-examples rdfs:label "examples"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-existing_notions rdfs:label "existing notions"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-extended_abstract rdfs:label "extended abstract"@en ;
    askg-onto:entityType "Publication"@en .

askg-data:Entity-f%CB%86%CE%B3_n rdfs:label "Fˆ(γ (n))"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-f%CB%86%CE%B3n rdfs:label "Fˆγ¯n"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-f%CB%86-coalgebra rdfs:label "Fˆ-coalgebra"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-f%CB%86__f%CB%86 rdfs:label "Fˆ → Fˆ∗"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-f%CB%86f%CB%86t1 rdfs:label "FˆFˆ∗!T1"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-f%CB%86f%CB%86t_x rdfs:label "FˆFˆ∗T !X"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-f%CB%86f%CB%86x rdfs:label "FˆFˆ∗X"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-f%CB%86n1 rdfs:label "Fˆn1"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-f%CB%86n__f%CB%86 rdfs:label "Fˆn → Fˆ∗"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-f%CB%86t rdfs:label "Fˆ∗T"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-f%CB%86t_y rdfs:label "Fˆ∗T Y"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-f-behavioural_equivalence rdfs:label "F-behavioural equivalence"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-f-coalgebra_z rdfs:label "F-coalgebra Z"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-f-operations rdfs:label "F-operations"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-f_%C2%B5tx%CF%81txt_%CE%B3 rdfs:label "F µTXρTXT γ"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-f___%CE%B7x rdfs:label "f ∗ ◦ ηX"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-f__t_x__my rdfs:label "f ♯: T X → MY"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-f_nt_c rdfs:label "F nT C"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-f_s rdfs:label "f ∗(S)"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-f_t_-_coalgebras rdfs:label "F T - coalgebras"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-f_t_-coalgebra rdfs:label "F T -coalgebra"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-f_t_-coalgebras rdfs:label "F T -coalgebras"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-f_x rdfs:label "F X"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-fbargamma_ntgammarho_fmut rdfs:label "F\\bar{\\gamma}_{n}T\\gamma\\rho F\\mu^{T}"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-field rdfs:label "field"@en ;
    askg-onto:entityType "Research Field"@en .

askg-data:Entity-filtered_colimits rdfs:label "filtered colimits"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-final_coalgebra rdfs:label "final coalgebra"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-final_coalgebra_semantics rdfs:label "final coalgebra semantics"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-final_coalgebra_sequence rdfs:label "final coalgebra sequence"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-final_object rdfs:label "final object"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-final_sequence rdfs:label "final sequence"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-final_sequence_of_f%CB%86 rdfs:label "final sequence of Fˆ"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-final_sequence_of_f_t rdfs:label "final sequence of F T"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-final_states rdfs:label "final states"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-finitary rdfs:label "finitary"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-finitary_functor_on_c rdfs:label "finitary functor on C"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-finitary_on_sett rdfs:label "finitary on SetT"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-finite rdfs:label "finite"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-finite-depth_behaviourally_equivalent rdfs:label "finite-depth behaviourally equivalent"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-finite_iterates_of_the_given_coalgebra rdfs:label "finite iterates of the given coalgebra"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-finite_powerset rdfs:label "finite powerset"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-finitely-branching_systems rdfs:label "finitely-branching systems"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-finitely_branching_lts rdfs:label "finitely branching LTS"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-finiteness rdfs:label "finiteness"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-first_%CF%89_steps rdfs:label "first ω steps"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-fixpoint_definitions rdfs:label "Fixpoint Definitions"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-flat_term rdfs:label "flat term"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-flat_terms rdfs:label "flat terms"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-flexibility rdfs:label "flexibility"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-focs rdfs:label "FOCS"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-for_every_u__a_there_exists_a__%CF%83_such_that_ua__a rdfs:label "for every u ∈ A there exists a ∈ Σ such that ua ∈ A"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-forgetful_functor rdfs:label "forgetful functor"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-forgetting_prefixes rdfs:label "forgetting prefixes"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-fossacs_2014 rdfs:label "FoSSaCS 2014"@en ;
    askg-onto:entityType "Publication"@en .

askg-data:Entity-foundations_of_software_science_and_computation_structures rdfs:label "Foundations of Software Science and Computation Structures"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-free_algebras rdfs:label "free algebras"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-free_monad rdfs:label "free monad"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-free_monads rdfs:label "free monads"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-free_monoids rdfs:label "free monoids"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-free_triples rdfs:label "free triples"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-friedrich-alexander-universit%C3%A4t_erlangen-n%C3%BCrnberg rdfs:label "Friedrich-Alexander-Universität Erlangen-Nürnberg"@en ;
    askg-onto:entityType "Organization"@en .

askg-data:Entity-fsttcs_2010 rdfs:label "FSTTCS 2010"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-ft rdfs:label "F*T"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-function rdfs:label "Function"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-function_%CE%B7x rdfs:label "function ηX"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-functor-overmonad_distributive_law_%CE%BB__f_t__t_f rdfs:label "(functor-overmonad) distributive law λ : F T → T F"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-functor_d rdfs:label "functor D"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-functor_p1__%CF%83____2__p%CF%82 rdfs:label "functor P(1 + Σ × ) ∼= 2 × PΣ"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-g%CE%B3n%CE%B3 rdfs:label "G(γn)γ"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-g%CE%B71 rdfs:label "Gη1"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-g-realizable rdfs:label "G*-realizable"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-g2timesmathcalpsigma rdfs:label "$G=2\\times(\\mathcal{P}^*)^{\\Sigma}$"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-g3 rdfs:label "G∗[3]"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-g___f_ rdfs:label "(g ∗ ◦ f) ∗"@en,
        "g ∗ ◦ f ∗"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-g__x-algebra rdfs:label "G + X-algebra"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-game-based_systems rdfs:label "game-based systems"@en ;
    askg-onto:entityType "System"@en .

askg-data:Entity-general_setting rdfs:label "general setting"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-general_theory rdfs:label "general theory"@en ;
    askg-onto:entityType "Theory"@en .

askg-data:Entity-general_theory_of_coalgebra rdfs:label "general theory of coalgebra"@en ;
    askg-onto:entityType "Theory"@en .

askg-data:Entity-generative_probabilistic_system rdfs:label "generative probabilistic system"@en ;
    askg-onto:entityType "System"@en .

askg-data:Entity-generative_probabilistic_systems rdfs:label "generative probabilistic systems"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-generative_probabilistic_transition_systems rdfs:label "generative probabilistic (transition) systems"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-generic_trace_logics rdfs:label "Generic trace logics"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-generic_trace_semantics rdfs:label "Generic trace semantics"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-gg1 rdfs:label "GG∗1"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-giarratana rdfs:label "Giarratana"@en ;
    askg-onto:entityType "Author"@en .

askg-data:Entity-giarratana_f rdfs:label "Giarratana, F."@en ;
    askg-onto:entityType "Person"@en .

askg-data:Entity-global_monad rdfs:label "global monad"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-global_monad_mx__d%CF%82__ rdfs:label "global monad MX = D(Σ∗ × )"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-gn11__gn1 rdfs:label "Gn+11 → Gn1"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-gn1n%CF%89 rdfs:label "(Gn1)n<ω"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-goguen rdfs:label "Goguen"@en ;
    askg-onto:entityType "Person"@en .

askg-data:Entity-goguen_and_thatcher rdfs:label "Goguen and Thatcher"@en ;
    askg-onto:entityType "Author"@en .

askg-data:Entity-gp_n1_n rdfs:label "G(p n+1 n)"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-h rdfs:label "H"@en ;
    askg-onto:entityType "Person"@en .

askg-data:Entity-hahn-kolmogorov_theorem rdfs:label "Hahn-Kolmogorov theorem"@en ;
    askg-onto:entityType "Theory"@en .

askg-data:Entity-hasuo_b rdfs:label "Hasuo, B."@en ;
    askg-onto:entityType "Person"@en .

askg-data:Entity-hat%0A_beta_10 rdfs:label """{\\hat{
 beta}}_{1}^{0}"""@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-hat%0A_eta_1 rdfs:label """{\\hat{
 eta}}_{1}"""@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-hat%0A_eta_t_x rdfs:label """{\\hat{
 eta}}_{T X}"""@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-hat%0A_gamma_0 rdfs:label """{\\hat{
 gamma}}_{0}"""@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-hatf1 rdfs:label "${\\hat{F}}^{*}1$"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-hatf_t1 rdfs:label "{\\hat{F}}^{*}!_{T1}"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-hatf_t1cdot_m_xcdotgammansharp rdfs:label "${\\hat{F}}^{*}!_{T1}\\cdot M!_{X}\\cdot(\\gamma^{(n)})^{\\sharp}"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-hatft_x rdfs:label "{\\hat{F}}^{*}T!_{X}"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-hatgamma_n rdfs:label "${\\hat{\\gamma}}_{n}"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-healthcare rdfs:label "Healthcare"@en ;
    askg-onto:entityType "Domain"@en .

askg-data:Entity-hennicker rdfs:label "Hennicker"@en ;
    askg-onto:entityType "Person"@en .

askg-data:Entity-hennicker_and_wirsing rdfs:label "Hennicker and Wirsing"@en ;
    askg-onto:entityType "Author"@en .

askg-data:Entity-hoare rdfs:label "Hoare"@en ;
    askg-onto:entityType "Person"@en .

askg-data:Entity-i rdfs:label "I"@en ;
    askg-onto:entityType "Person"@en .

askg-data:Entity-iarcs_annual_conference_on_foundations_of_software_technology_and_theoretical_computer_science rdfs:label "IARCS Annual Conference on Foundations of Software Technology and Theoretical Computer Science"@en ;
    askg-onto:entityType "Organization"@en .

askg-data:Entity-id rdfs:label "id"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-id__f%CB%86f%CB%86__f%CB%86 rdfs:label "Id + FˆFˆ∗ ∼= Fˆ∗"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-idmx rdfs:label "idMX"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-ieee_computer_society rdfs:label "IEEE Computer Society"@en ;
    askg-onto:entityType "Organization"@en .

askg-data:Entity-immediate_prefix_relation rdfs:label "immediate prefix relation"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-in_%CF%89_steps rdfs:label "in ω steps"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-inclusion rdfs:label "inclusion"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-incremental_approach rdfs:label "incremental approach"@en ;
    askg-onto:entityType "Method"@en .

askg-data:Entity-inductive rdfs:label "inductive"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-inductive_hypothesis rdfs:label "Inductive hypothesis"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-infinite_traces rdfs:label "infinite traces"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-infinite_unfolding rdfs:label "infinite unfolding"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-ingolfsdottir_k rdfs:label "Ing´olfsd´ottir, K."@en ;
    askg-onto:entityType "Author"@en .

askg-data:Entity-initial_%CF%89-segment rdfs:label "initial ω-segment"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-initial_and_final_specification_methods rdfs:label "initial and final specification methods"@en ;
    askg-onto:entityType "Method"@en .

askg-data:Entity-initial_sequence_of_f rdfs:label "initial sequence of F"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-injective_t-algebra_homomorphisms rdfs:label "injective T-algebra homomorphisms"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-input_letter rdfs:label "input letter"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-iteration_step rdfs:label "iteration step"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-jacobs rdfs:label "Jacobs"@en ;
    askg-onto:entityType "Author"@en .

askg-data:Entity-jacobs_a rdfs:label "Jacobs, A."@en ;
    askg-onto:entityType "Person"@en .

askg-data:Entity-jacobs_et_al rdfs:label "Jacobs et al."@en ;
    askg-onto:entityType "Author"@en .

askg-data:Entity-join_semilattice_operations rdfs:label "join semilattice operations"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-k rdfs:label "K."@en ;
    askg-onto:entityType "Person"@en .

askg-data:Entity-kelly rdfs:label "Kelly"@en ;
    askg-onto:entityType "Person"@en .

askg-data:Entity-keras rdfs:label "Keras"@en ;
    askg-onto:entityType "Software"@en .

askg-data:Entity-kissig rdfs:label "Kissig"@en ;
    askg-onto:entityType "Author"@en .

askg-data:Entity-kissig_and_kurz rdfs:label "Kissig and Kurz"@en ;
    askg-onto:entityType "Author"@en .

askg-data:Entity-kleisli_categories rdfs:label "Kleisli categories"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-kleisli_composition rdfs:label "Kleisli composition"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-kleisli_morphism rdfs:label "Kleisli morphism"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-kleisli_morphisms rdfs:label "Kleisli morphisms"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-kleisli_star_f_ rdfs:label "Kleisli star f ∗"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-klt rdfs:label "Kl(T)"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-known_notions rdfs:label "known notions"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-kurz rdfs:label "Kurz"@en ;
    askg-onto:entityType "Person"@en .

askg-data:Entity-l rdfs:label "L."@en ;
    askg-onto:entityType "Person"@en .

askg-data:Entity-lambeks_lemma rdfs:label "Lambek's lemma"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-language rdfs:label "language"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-language_equivalent rdfs:label "language equivalent"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-language_semantics_of_the_automaton rdfs:label "language semantics of the automaton"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-larsen rdfs:label "Larsen"@en ;
    askg-onto:entityType "Person"@en .

askg-data:Entity-leibniz_international_proceedings_in_informatics_lipics rdfs:label "Leibniz International Proceedings in Informatics (LIPIcs)"@en ;
    askg-onto:entityType "Publication"@en .

askg-data:Entity-lemma_6 rdfs:label "Lemma 6"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-lics_1997 rdfs:label "LICS 1997"@en ;
    askg-onto:entityType "Publication"@en .

askg-data:Entity-lifting_f%CB%86 rdfs:label "lifting Fˆ"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-liftings_of_functors rdfs:label "liftings of functors"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-linear-time-branching_time_spectrum rdfs:label "linear-time-branching time spectrum"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-linear-time_branching-time_spectrum rdfs:label "linear-time branching-time spectrum"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-linear_time-branching_time_spectrum rdfs:label "linear time-branching time spectrum"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-linear_time_semantics rdfs:label "linear time semantics"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-lineartimebranching-time_spectrum rdfs:label "lineartime/branching-time spectrum"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-ln rdfs:label "Ln"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-ln_%CF%83nn%CF%89 rdfs:label "(Ln, Σn)n<ω"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-locally_finitely_presentable_category rdfs:label "locally finitely presentable category"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-lodaya rdfs:label "Lodaya"@en ;
    askg-onto:entityType "Person"@en .

askg-data:Entity-logic_in_computer_science rdfs:label "Logic in Computer Science"@en ;
    askg-onto:entityType "Publication"@en .

askg-data:Entity-lts_%CE%B3 rdfs:label "LTS γ"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-lts_structure rdfs:label "LTS structure"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-lutz_schr%C3%B6der rdfs:label "Lutz Schröder"@en ;
    askg-onto:entityType "Person"@en .

askg-data:Entity-m%C2%B5m_%CE%B3n%CE%B1%CE%B3 rdfs:label "M!**µM γ**(n)αγ"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-m%CE%B3 rdfs:label "M!γ"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-m%CE%B3_0 rdfs:label "M!γ (0)"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-m%CE%B3_n1 rdfs:label "M!γ (n+1)"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-m%CE%B7 rdfs:label "M!η"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-m0 rdfs:label "M0"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-m__f%CB%86t rdfs:label "M = Fˆ∗T"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-m__p%CF%82__ rdfs:label "M = P(Σ∗ × )"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-mahajan rdfs:label "Mahajan"@en ;
    askg-onto:entityType "Person"@en .

askg-data:Entity-map_tr__x__p%CF%82 rdfs:label "map tr : X → P(Σ∗)"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-maps_%CE%B3_n rdfs:label "maps γ (n)"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-maps_%CE%B3n__x__m0 rdfs:label "maps γ˜n : X → M0"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-mathbbt rdfs:label "$$\\mathbb{T}$$"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-mathbfpartialmathbfr rdfs:label "$$\\mathbf{\\partial}\\mathbf{r}$$"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-mathematical_concept rdfs:label "Mathematical concept"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-mathematical_expression rdfs:label "Mathematical expression"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-mathematical_foundations_of_computer_science_mfcs_1976 rdfs:label "Mathematical Foundations of Computer Science, MFCS 1976"@en ;
    askg-onto:entityType "Publication"@en .

askg-data:Entity-mathematical_notation rdfs:label "Mathematical notation"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-mathematical_operational_semantics rdfs:label "mathematical operational semantics"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-meaningful_entities rdfs:label "meaningful entities"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-meaningful_entity rdfs:label "meaningful entity"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-medical_imaging rdfs:label "Medical Imaging"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-mere_instances rdfs:label "mere instances"@en ;
    askg-onto:entityType "Result"@en .

askg-data:Entity-method_y rdfs:label "Method Y"@en ;
    askg-onto:entityType "Method"@en .

askg-data:Entity-methods_comput rdfs:label "Methods Comput."@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-mf rdfs:label "Mf"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-mgamman rdfs:label "M!\\gamma^{(n)}"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-milius rdfs:label "Milius"@en ;
    askg-onto:entityType "Person"@en .

askg-data:Entity-modelling rdfs:label "modelling"@en ;
    askg-onto:entityType "Method"@en .

askg-data:Entity-models rdfs:label "Models"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-molecule rdfs:label "Molecule"@en ;
    askg-onto:entityType "Molecule"@en .

askg-data:Entity-monad_induced_by_the_distributive_law rdfs:label "monad induced by the distributive law"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-monad_structure rdfs:label "monad structure"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-monads rdfs:label "monads"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-monic rdfs:label "monic"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-monic_in_sett rdfs:label "monic in SetT"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-monos rdfs:label "monos"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-morphism rdfs:label "morphism"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-multiplication rdfs:label "multiplication"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-multiplication_of_t rdfs:label "multiplication of T"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-mx%CE%B3_nc rdfs:label "M!Xγ (n)(c)"@en ;
    askg-onto:entityType "Technology"@en .

askg-data:Entity-mx__x rdfs:label "MX → X"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-n-fold_iteration_of_the_morphism_%CE%B1%CE%B3_in_the_kleisli_category_of_m rdfs:label "n-fold iteration of the morphism αγ in the Kleisli category of M"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-n_fold_application_of_g rdfs:label "n fold application of G"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-natural_and_known_notions rdfs:label "natural and known notions"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-natural_notions rdfs:label "natural notions"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-naturality_of_%CE%B1 rdfs:label "Naturality of α"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-new_examples rdfs:label "new examples"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-non-acceptance_of_words rdfs:label "non-acceptance of words"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-non-accepting_state rdfs:label "non-accepting state"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-non-blocking_non-deterministic_automata rdfs:label "non-blocking non-deterministic automata"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-non-blocking_nondeterministic_automaton rdfs:label "non-blocking nondeterministic automaton"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-non-deterministic_part rdfs:label "non-deterministic part"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-non-deterministic_systems rdfs:label "non-deterministic systems"@en ;
    askg-onto:entityType "System"@en .

askg-data:Entity-non-well-founded_sets rdfs:label "Non-Well-Founded Sets"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-nondeterministic_automata rdfs:label "nondeterministic automata"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-nondeterministic_transition_systems rdfs:label "nondeterministic transition systems"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-none rdfs:label "none"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-nonempty_powerset rdfs:label "nonempty powerset"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-nonempty_summands rdfs:label "nonempty summands"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-notation rdfs:label "notation"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-note rdfs:label "Note"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-number rdfs:label "number"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-numbers rdfs:label "numbers"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-numerous_papers rdfs:label "numerous papers"@en ;
    askg-onto:entityType "Publication"@en .

askg-data:Entity-objects rdfs:label "objects"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-observability_concepts rdfs:label "Observability concepts"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-observational_or_behavioural_equivalence rdfs:label "observational or behavioural equivalence"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-observational_specification rdfs:label "Observational Specification"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-observe rdfs:label "Observe"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-obtains_a_f%CB%86-coalgebra rdfs:label "obtains a Fˆ-coalgebra"@en ;
    askg-onto:entityType "Method"@en .

askg-data:Entity-one_general_definition rdfs:label "one general definition"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-opcit rdfs:label "op.cit."@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-operation_m rdfs:label "operation M"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-order_enrichment rdfs:label "order enrichment"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-organization_a rdfs:label "Organization A"@en ;
    askg-onto:entityType "Organization"@en .

askg-data:Entity-organizations rdfs:label "organizations"@en ;
    askg-onto:entityType "Domain"@en .

askg-data:Entity-other_states rdfs:label "other states"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-our_definition rdfs:label "our definition"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-our_framework rdfs:label "our framework"@en ;
    askg-onto:entityType "Framework"@en .

askg-data:Entity-our_treatment rdfs:label "our treatment"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-p rdfs:label "P"@en ;
    askg-onto:entityType "Person"@en .

askg-data:Entity-p%CF%82_2 rdfs:label "P(Σ∗) 2"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-p%CF%82__p%CF%82__x rdfs:label "P(Σ∗ × P(Σ∗ × X))"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-p%CF%82__x rdfs:label "P(Σ × X)"@en,
        "P(Σ∗ × X)"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-p%CF%82__x__1 rdfs:label "P(Σ∗ × (X + 1))"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-p%CF%83x rdfs:label "P(Σ×X)"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-p%CF%89%CF%82__ rdfs:label "P<ω(Σ∗ × )"@en,
        "Pω(Σ × )"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-p%CF%89x rdfs:label "P<ω(X)"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-p-algebra_homomorphisms rdfs:label "P-algebra homomorphisms"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-p1_%CF%83__ rdfs:label "P(1 +Σ × )"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-p_10 rdfs:label "p 10"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-p__%CF%83__ rdfs:label "P ∗ (Σ × )"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-p_n1_n rdfs:label "p n+1 n"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-p_n2_n1 rdfs:label "p n+2 n+1"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-page_numbers rdfs:label "page numbers"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-pages rdfs:label "pages"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-pair rdfs:label "pair"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-pair_a_s rdfs:label "pair (a, S)"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-pairs_of_actions_and_successor_states rdfs:label "pairs of actions and successor states"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-paper_b rdfs:label "Paper B"@en ;
    askg-onto:entityType "Publication"@en .

askg-data:Entity-partial_additive_semiring_structure rdfs:label "partial additive semiring structure"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-partial_additivity rdfs:label "partial additivity"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-partition-refinement_style rdfs:label "partition-refinement style"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-perp rdfs:label "\\perp"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-perpeta rdfs:label "\\perp^{*}\\eta"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-persons rdfs:label "persons"@en ;
    askg-onto:entityType "Domain"@en .

askg-data:Entity-polynomial_endofunctor rdfs:label "polynomial endofunctor"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-poststate rdfs:label "poststate"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-powerset_construction rdfs:label "powerset construction"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-pre-measure rdfs:label "pre-measure"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-prefix-closed_trace_set rdfs:label "prefix-closed trace set"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-prefixes_of_the_word rdfs:label "prefixes of the word"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-prentice_hall rdfs:label "Prentice Hall"@en ;
    askg-onto:entityType "Organization"@en .

askg-data:Entity-preprint_11033239 rdfs:label "preprint 1103.3239"@en ;
    askg-onto:entityType "Article"@en .

askg-data:Entity-pretraces_of_x rdfs:label "pretraces of x"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-previous_proposals rdfs:label "previous proposals"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-probabilistic_labelled_transition_systems rdfs:label "probabilistic labelled transition systems"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-probabilistic_system rdfs:label "probabilistic system"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-probabilistic_systems rdfs:label "probabilistic systems"@en ;
    askg-onto:entityType "System"@en .

askg-data:Entity-probabilistic_transition_systems rdfs:label "Probabilistic Transition Systems"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-probabilities_of_finite_prefixes rdfs:label "probabilities of finite prefixes"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-proc rdfs:label "Proc."@en ;
    askg-onto:entityType "Publication"@en .

askg-data:Entity-process_equivalences rdfs:label "process equivalences"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-product_measure rdfs:label "product measure"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-programs rdfs:label "programs"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-proposition_7 rdfs:label "Proposition 7"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-proposition_8 rdfs:label "Proposition 8"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-px rdfs:label "P(X)"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-python rdfs:label "Python"@en ;
    askg-onto:entityType "Software"@en .

askg-data:Entity-qualitative_research rdfs:label "Qualitative Research"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-quantitative_research rdfs:label "Quantitative Research"@en ;
    askg-onto:entityType "Concept"@en,
        "Method"@en .

askg-data:Entity-reactive_systems rdfs:label "Reactive systems"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-reinforcement_learning rdfs:label "Reinforcement Learning"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-related_work rdfs:label "related work"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-remark_4 rdfs:label "Remark 4"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-research_concept rdfs:label "research concept"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-research_field rdfs:label "Research Field"@en ;
    askg-onto:entityType "Research Field"@en .

askg-data:Entity-research_methodology rdfs:label "Research Methodology"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-research_methods rdfs:label "research methods"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-research_tools rdfs:label "research tools"@en ;
    askg-onto:entityType "Tool"@en .

askg-data:Entity-research_topic_x rdfs:label "Research Topic X"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-researcher_z rdfs:label "Researcher Z"@en ;
    askg-onto:entityType "Researcher"@en .

askg-data:Entity-rich_theory rdfs:label "rich theory"@en ;
    askg-onto:entityType "Theory"@en .

askg-data:Entity-s rdfs:label "S"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-same_extension_semantics rdfs:label "same extension semantics"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-same_language rdfs:label "same language"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-same_values rdfs:label "same values"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-satisfactory_answer rdfs:label "satisfactory answer"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-scientist rdfs:label "Scientist"@en ;
    askg-onto:entityType "Scientist"@en .

askg-data:Entity-scikit-learn rdfs:label "Scikit-learn"@en ;
    askg-onto:entityType "Software"@en .

askg-data:Entity-section rdfs:label "section"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-selected_papers rdfs:label "Selected Papers"@en ;
    askg-onto:entityType "Corpus"@en .

askg-data:Entity-semantic_type rdfs:label "semantic type"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-semiring rdfs:label "semiring"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-semiring_structure rdfs:label "semiring structure"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-semiring_t_1 rdfs:label "semiring T 1"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-sequence rdfs:label "sequence"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-sequence_of_papers rdfs:label "sequence of papers"@en ;
    askg-onto:entityType "Corpus"@en .

askg-data:Entity-set_%C7%AB_s0 rdfs:label "set {(**ǫ, s**0)}"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-set_a_s10_a_s11 rdfs:label "set {(a, s10), (a, s11)}"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-set_of_maximal_traces rdfs:label "set of maximal traces"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-set_x rdfs:label "set X"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-sets rdfs:label "sets"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-sets_of_variables rdfs:label "sets of variables"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-silva_et_al rdfs:label "Silva et al."@en ;
    askg-onto:entityType "Person"@en .

askg-data:Entity-singleton rdfs:label "singleton"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-situation rdfs:label "situation"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-soc rdfs:label "Soc.*"@en ;
    askg-onto:entityType "Publication"@en .

askg-data:Entity-social_sciences rdfs:label "Social Sciences"@en ;
    askg-onto:entityType "Research Field"@en .

askg-data:Entity-software rdfs:label "Software"@en ;
    askg-onto:entityType "Software"@en .

askg-data:Entity-some rdfs:label "some"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-specification rdfs:label "specification"@en ;
    askg-onto:entityType "Method"@en .

askg-data:Entity-square_root rdfs:label "square root"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-srba rdfs:label "Srba"@en ;
    askg-onto:entityType "Person"@en .

askg-data:Entity-standard_systems rdfs:label "standard systems"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-stanford rdfs:label "Stanford"@en ;
    askg-onto:entityType "University"@en .

askg-data:Entity-state_x rdfs:label "state x"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-state_x__x rdfs:label "state x ∈ X"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-states_in_generative_probabilistic_systems_over_a_finite_alphabet_%CF%83 rdfs:label "States in generative probabilistic systems over a finite alphabet Σ"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-states_x_and_y rdfs:label "states x and y"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-states_x_x rdfs:label "states x, x'"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-statistics rdfs:label "Statistics"@en ;
    askg-onto:entityType "Domain"@en .

askg-data:Entity-stefan_milius rdfs:label "Stefan Milius"@en ;
    askg-onto:entityType "Person"@en .

askg-data:Entity-step rdfs:label "step"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-stepwise_unfolding rdfs:label "stepwise unfolding"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-strong_bisimilarity rdfs:label "strong bisimilarity"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-structure_map rdfs:label "structure map"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-subfunctor rdfs:label "subfunctor"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-suprema_of_chains rdfs:label "suprema of chains"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-swat rdfs:label "SWAT"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-switching_and_automata_theory rdfs:label "Switching and Automata Theory"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-system rdfs:label "system"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-system_types rdfs:label "system types"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-systems rdfs:label "Systems"@en ;
    askg-onto:entityType "System"@en .

askg-data:Entity-systems_of_shape_x rdfs:label "systems of shape X"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-systems_of_type_x__t_f_x rdfs:label "systems of type X → T F X"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-t1 rdfs:label "!T1"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-t_-algebra_homomorphisms rdfs:label "T -algebra homomorphisms"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-t_-algebra_morphism rdfs:label "T -algebra morphism"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-t_-operations rdfs:label "T -operations"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-t_1 rdfs:label "T 1"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-t_eta%09exttrx rdfs:label "$T_{eta}^{	ext{tr}}(x)$"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-t_f_n rdfs:label "T F n∅"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-t_f_nx rdfs:label "T F nX"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-t_f_x rdfs:label "T F X"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-t_x__f_n1 rdfs:label "T X → F n1"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-talpha_deltay rdfs:label "$T^{\\alpha}_{\\delta}(y)$"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-talpha_gammax rdfs:label "$T^{\\alpha}_{\\gamma}(x)$"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-technical_conditions rdfs:label "technical conditions"@en ;
    askg-onto:entityType "Condition"@en .

askg-data:Entity-technique rdfs:label "Technique"@en ;
    askg-onto:entityType "Technique"@en .

askg-data:Entity-technique_d rdfs:label "Technique D"@en ;
    askg-onto:entityType "Technique"@en .

askg-data:Entity-tensorflow rdfs:label "TensorFlow"@en ;
    askg-onto:entityType "Tool"@en .

askg-data:Entity-terminal_object rdfs:label "terminal object"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-terminal_object_in_klt rdfs:label "terminal object in Kl(T)"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-terminal_sequence rdfs:label "terminal sequence"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-terminology rdfs:label "terminology"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-tf rdfs:label "TF*"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-tfn1emptyset rdfs:label "TF^{n+1}\\emptyset"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-tftfnemptyset rdfs:label "TFTF^{n}\\emptyset"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-tfx rdfs:label "TFX"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-thatcher rdfs:label "Thatcher"@en ;
    askg-onto:entityType "Person"@en .

askg-data:Entity-the_algebraic_theories rdfs:label "the algebraic theories"@en ;
    askg-onto:entityType "Theory"@en .

askg-data:Entity-the_australian_national_university rdfs:label "The Australian National University"@en ;
    askg-onto:entityType "Organization"@en .

askg-data:Entity-the_base_category_c_is_complete rdfs:label "the base category C is complete"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-the_concept_of_uncertainty rdfs:label "the concept of uncertainty"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-the_discrete_distribution_functor rdfs:label "the discrete distribution functor"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-the_disjoint_union_of_the_algebraic_theories_associated_to_t_and_f rdfs:label "the disjoint union of the algebraic theories associated to T and F"@en ;
    askg-onto:entityType "Theory"@en .

askg-data:Entity-the_distributive_law_between_the_operations_of_t_and_f rdfs:label "the distributive law between the operations of T and F"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-the_free_monad rdfs:label "the free monad"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-the_language_accepted_by_the_automaton_with_starting_state_x rdfs:label "the language accepted by the automaton with starting state x"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-the_limit_of_the_infinite_diagram rdfs:label "the limit of the infinite diagram"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-the_monad_of_the_composed_adjunction rdfs:label "the monad of the composed adjunction"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-the_precise_nature_of_traces rdfs:label "the precise nature of traces"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-the_same_distribution_on_%CF%83%CF%89 rdfs:label "the same distribution on Σω"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-the_set_of_g-realizable_traces rdfs:label "the set of G-realizable traces"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-the_tree rdfs:label "the tree"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-the_underlying_set_f%CB%86t_x rdfs:label "the underlying set Fˆ∗T X"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-the_usual_extension_of_the_transition_relation_to_words_u__%CF%83 rdfs:label "the usual extension of the transition relation to words u ∈ Σ∗"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-theories_of_concurrency rdfs:label "Theories of Concurrency"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-theory_of_concurrent_systems rdfs:label "theory of concurrent systems"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-they rdfs:label "they"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-this_approach rdfs:label "this approach"@en ;
    askg-onto:entityType "Method"@en .

askg-data:Entity-tools rdfs:label "tools"@en ;
    askg-onto:entityType "Domain"@en .

askg-data:Entity-trace_correctly rdfs:label "trace correctly"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-trace_sequence_t_%CE%B1_%CE%B3c rdfs:label "trace sequence T α γ(c)"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-traces_ab_and_ac rdfs:label "traces ab and ac"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-traces_of_length_n rdfs:label "traces of length n"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-traces_of_opcit rdfs:label "traces of *op.cit.*"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-traces_of_x_of_length_n rdfs:label "traces of x of length n"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-transfinite_constructions rdfs:label "transfinite constructions"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-transformation rdfs:label "transformation"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-transition_system rdfs:label "transition system"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-transitions rdfs:label "transitions"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-ttfn1emptyset rdfs:label "TTF^{n+1}\\emptyset"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-two_%CF%83-ary_function_symbols_y_and_n rdfs:label "two Σ-ary function symbols y and n"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-tx_def rdfs:label "TX def."@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-type_functor rdfs:label "type functor"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-types_of_traces rdfs:label "types of traces"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-u___xu__u__%CF%83n rdfs:label "{(u, ∗) | xu→ , u ∈ Σn}"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-u_a rdfs:label "U_a"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-uniform_definitions_and_results rdfs:label "uniform definitions and results"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-uniform_theory_of_strong_bisimulation rdfs:label "uniform theory of strong bisimulation"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-unit rdfs:label "unit"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-university_of_california_berkeley rdfs:label "University of California, Berkeley"@en ;
    askg-onto:entityType "University"@en .

askg-data:Entity-university_of_leicester rdfs:label "University of Leicester"@en ;
    askg-onto:entityType "Organization"@en .

askg-data:Entity-uv_b__u_x__s__%CF%83___xv_b__fx__s__%CF%83 rdfs:label "{(uv, b) | ∃(**u, x**) ∈ S ∩ (Σ ∗ × X).(v, b) ∈ f(x)} ∪ (S ∩ (Σ"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-uv_x__u_s__av_x__s rdfs:label "{(uv, x) | ∃(u, S) ∈ A.(**v, x**) ∈ S}"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-various_notions_of_process_equivalence rdfs:label "various notions of process equivalence"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-verification rdfs:label "verification"@en ;
    askg-onto:entityType "Method"@en .

askg-data:Entity-vol rdfs:label "vol."@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-vw__w__%CF%83%CF%89 rdfs:label "{vw | w ∈ Σω}"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-wadt_1985 rdfs:label "WADT 1985"@en ;
    askg-onto:entityType "Publication"@en .

askg-data:Entity-we rdfs:label "we"@en ;
    askg-onto:entityType "Person"@en .

askg-data:Entity-weighted_systems rdfs:label "weighted systems"@en ;
    askg-onto:entityType "System"@en .

askg-data:Entity-wirsing rdfs:label "Wirsing"@en ;
    askg-onto:entityType "Person"@en .

askg-data:Entity-word rdfs:label "word"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-word_1 rdfs:label "word 1"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-word_from_the_trace_set rdfs:label "word from the trace set"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-words_can_be_executed_without_deadlock rdfs:label "words can be executed without deadlock"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-x__1 rdfs:label "X → 1"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-x__m1 rdfs:label "X → M1"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-x_and_y rdfs:label "x and y"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-x_to_x rdfs:label "X to X′"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-y__gy rdfs:label "Y → GY"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-yuaa%CF%82_or_nuaa%CF%82 rdfs:label "y((Ua)a∈Σ) or n((Ua)a∈Σ)"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-zeitschr rdfs:label "Zeitschr.*"@en ;
    askg-onto:entityType "Publication"@en .

askg-data:Paper-ae04d54115630f9e-Section-1 a askg-onto:Section ;
    rdfs:label "Section 1"@en ;
    domo:Text "Simplified Coalgebraic Trace Equivalence"@en ;
    askg-onto:hasParagraph askg-data:Paper-ae04d54115630f9e-Section-1-Paragraph-11 ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:level "1"^^xsd:int .

askg-data:Paper-ae04d54115630f9e-Section-1-Paragraph-11 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 1"@en ;
    domo:Text "Alexander Kurz1, Stefan Milius3, Dirk Pattinson2, and Lutz Schr¨oder3 1 University of Leicester 2 The Australian National University 3 Friedrich-Alexander-Universit¨at Erlangen-N¨urnberg Abstract. The analysis of concurrent and reactive systems is based to a large degree on various notions of process equivalence, ranging, on the so-called lineartime/branching-time spectrum, from fine-grained equivalences such as strong bisimilarity to coarse-grained ones such as trace equivalence. The theory of concurrent systems at large has benefited from developments in coalgebra, which has enabled uniform definitions and results that provide a common umbrella for seemingly disparate system types including non-deterministic, weighted, probabilistic, and game-based systems. In particular, there has been some success in identifying a generic coalgebraic theory of bisimulation that matches known definitions in many concrete cases. The situation is currently somewhat less settled regarding trace equivalence. A number of coalgebraic approaches to trace equivalence have been proposed, none of which however cover all cases of interest; notably, all these approaches depend on explicit termination, which is not always imposed in standard systems, e.g. LTS. Here, we discuss a joint generalization of these approaches based on embedding functors modelling various aspects of the system, such as transition and braching, into a global monad; this approach appears to cover all cases considered previously and some additional ones, notably standard LTS and probabilistic labelled transition systems."@en ;
    askg-onto:hasSentence askg-data:Paper-ae04d54115630f9e-Section-1-Paragraph-11-Sentence-111,
        askg-data:Paper-ae04d54115630f9e-Section-1-Paragraph-11-Sentence-112,
        askg-data:Paper-ae04d54115630f9e-Section-1-Paragraph-11-Sentence-113,
        askg-data:Paper-ae04d54115630f9e-Section-1-Paragraph-11-Sentence-114,
        askg-data:Paper-ae04d54115630f9e-Section-1-Paragraph-11-Sentence-115,
        askg-data:Paper-ae04d54115630f9e-Section-1-Paragraph-11-Sentence-116,
        askg-data:Paper-ae04d54115630f9e-Section-1-Paragraph-11-Sentence-117,
        askg-data:Paper-ae04d54115630f9e-Section-1-Paragraph-11-Sentence-118 ;
    askg-onto:index "1"^^xsd:int .

askg-data:Paper-ae04d54115630f9e-Section-1-Paragraph-11-Sentence-111 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "Alexander Kurz1, Stefan Milius3, Dirk Pattinson2, and Lutz Schr¨oder3 1 University of Leicester 2 The Australian National University 3 Friedrich-Alexander-Universit¨at Erlangen-N¨urnberg Abstract."@en ;
    askg-onto:inSentence "Alexander Kurz1, Stefan Milius3, Dirk Pattinson2, and Lutz Schr¨oder3 1 University of Leicester 2 The Australian National University 3 Friedrich-Alexander-Universit¨at Erlangen-N¨urnberg Abstract."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-alexander_kurz,
        askg-data:Entity-author,
        askg-data:Entity-dirk_pattinson,
        askg-data:Entity-friedrich-alexander-universit%C3%A4t_erlangen-n%C3%BCrnberg,
        askg-data:Entity-lutz_schr%C3%B6der,
        askg-data:Entity-stefan_milius,
        askg-data:Entity-the_australian_national_university,
        askg-data:Entity-university,
        askg-data:Entity-university_of_leicester .

askg-data:Paper-ae04d54115630f9e-Section-1-Paragraph-11-Sentence-112 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "The analysis of concurrent and reactive systems is based to a large degree on various notions of process equivalence, ranging, on the so-called lineartime/branching-time spectrum, from fine-grained equivalences such as strong bisimilarity to coarse-grained ones such as trace equivalence."@en ;
    askg-onto:inSentence "The analysis of concurrent and reactive systems is based to a large degree on various notions of process equivalence, ranging, on the so-called lineartime/branching-time spectrum, from fine-grained equivalences such as strong bisimilarity to coarse-grained ones such as trace equivalence."^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-analysis_of_concurrent_and_reactive_systems,
        askg-data:Entity-lineartimebranching-time_spectrum,
        askg-data:Entity-strong_bisimilarity,
        askg-data:Entity-trace_equivalence,
        askg-data:Entity-various_notions_of_process_equivalence .

askg-data:Paper-ae04d54115630f9e-Section-1-Paragraph-11-Sentence-113 a askg-onto:Sentence ;
    rdfs:label "Sentence 3"@en ;
    domo:Text "The theory of concurrent systems at large has benefited from developments in coalgebra, which has enabled uniform definitions and results that provide a common umbrella for seemingly disparate system types including non-deterministic, weighted, probabilistic, and game-based systems."@en ;
    askg-onto:inSentence "The theory of concurrent systems at large has benefited from developments in coalgebra, which has enabled uniform definitions and results that provide a common umbrella for seemingly disparate system types including non-deterministic, weighted, probabilistic, and game-based systems."^^xsd:string ;
    askg-onto:index "3"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-common_umbrella_for_system_types,
        askg-data:Entity-developments_in_coalgebra,
        askg-data:Entity-game-based_systems,
        askg-data:Entity-non-deterministic_systems,
        askg-data:Entity-probabilistic_systems,
        askg-data:Entity-system_types,
        askg-data:Entity-theory_of_concurrent_systems,
        askg-data:Entity-uniform_definitions_and_results,
        askg-data:Entity-weighted_systems .

askg-data:Paper-ae04d54115630f9e-Section-1-Paragraph-11-Sentence-114 a askg-onto:Sentence ;
    rdfs:label "Sentence 4"@en ;
    domo:Text "In particular, there has been some success in identifying a generic coalgebraic theory of bisimulation that matches known definitions in many concrete cases."@en ;
    askg-onto:inSentence "In particular, there has been some success in identifying a generic coalgebraic theory of bisimulation that matches known definitions in many concrete cases."^^xsd:string ;
    askg-onto:index "4"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-coalgebraic_theory,
        askg-data:Entity-definitions .

askg-data:Paper-ae04d54115630f9e-Section-1-Paragraph-11-Sentence-115 a askg-onto:Sentence ;
    rdfs:label "Sentence 5"@en ;
    domo:Text "The situation is currently somewhat less settled regarding trace equivalence."@en ;
    askg-onto:inSentence "The situation is currently somewhat less settled regarding trace equivalence."^^xsd:string ;
    askg-onto:index "5"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-situation,
        askg-data:Entity-trace_equivalence .

askg-data:Paper-ae04d54115630f9e-Section-1-Paragraph-11-Sentence-116 a askg-onto:Sentence ;
    rdfs:label "Sentence 6"@en ;
    domo:Text "A number of coalgebraic approaches to trace equivalence have been proposed, none of which however cover all cases of interest; notably, all these approaches depend on explicit termination, which is not always imposed in standard systems, e.g."@en ;
    askg-onto:inSentence "A number of coalgebraic approaches to trace equivalence have been proposed, none of which however cover all cases of interest; notably, all these approaches depend on explicit termination, which is not always imposed in standard systems, e.g."^^xsd:string ;
    askg-onto:index "6"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-coalgebraic_approaches,
        askg-data:Entity-explicit_termination,
        askg-data:Entity-standard_systems,
        askg-data:Entity-termination,
        askg-data:Entity-trace_equivalence .

askg-data:Paper-ae04d54115630f9e-Section-1-Paragraph-11-Sentence-117 a askg-onto:Sentence ;
    rdfs:label "Sentence 7"@en ;
    domo:Text "LTS."@en ;
    askg-onto:inSentence "LTS."^^xsd:string ;
    askg-onto:index "7"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-lts,
        askg-data:Entity-technology .

askg-data:Paper-ae04d54115630f9e-Section-1-Paragraph-11-Sentence-118 a askg-onto:Sentence ;
    rdfs:label "Sentence 8"@en ;
    domo:Text "Here, we discuss a joint generalization of these approaches based on embedding functors modelling various aspects of the system, such as transition and braching, into a global monad; this approach appears to cover all cases considered previously and some additional ones, notably standard LTS and probabilistic labelled transition systems."@en ;
    askg-onto:inSentence "Here, we discuss a joint generalization of these approaches based on embedding functors modelling various aspects of the system, such as transition and braching, into a global monad; this approach appears to cover all cases considered previously and some additional ones, notably standard LTS and probabilistic labelled transition systems."^^xsd:string ;
    askg-onto:index "8"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-all_cases,
        askg-data:Entity-aspects_of_the_system,
        askg-data:Entity-embedding_functors,
        askg-data:Entity-probabilistic_labelled_transition_systems,
        askg-data:Entity-standard_lts,
        askg-data:Entity-this_approach .

askg-data:Paper-ae04d54115630f9e-Section-10 a askg-onto:Section ;
    rdfs:label "Section 10"@en ;
    domo:Text "Ρ : T F → **F T.**"@en ;
    askg-onto:hasParagraph askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-101,
        askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-1010,
        askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-1011,
        askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-1012,
        askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-1013,
        askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-1014,
        askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-1015,
        askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-1016,
        askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-1017,
        askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-1018,
        askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-1019,
        askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-102,
        askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-1020,
        askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-1021,
        askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-1022,
        askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-1023,
        askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-103,
        askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-104,
        askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-105,
        askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-106,
        askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-107,
        askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-108,
        askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-109 ;
    askg-onto:index "10"^^xsd:int ;
    askg-onto:level "3"^^xsd:int .

askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-101 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 1"@en ;
    domo:Text "Under these assumptions, F lifts to an endofunctor Fˆ on the Eilenberg-Moore category CT of T , and the free-algebra functor C → CTlifts to a functor D from F T - coalgebras to Fˆ-coalgebras, which can be seen as a generalized powerset construction."@en ;
    askg-onto:hasSentence askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-101-Sentence-1011 ;
    askg-onto:index "1"^^xsd:int .

askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-101-Sentence-1011 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "Under these assumptions, F lifts to an endofunctor Fˆ on the Eilenberg-Moore category CT of T , and the free-algebra functor C → CTlifts to a functor D from F T - coalgebras to Fˆ-coalgebras, which can be seen as a generalized powerset construction."@en ;
    askg-onto:inSentence "Under these assumptions, F lifts to an endofunctor Fˆ on the Eilenberg-Moore category CT of T , and the free-algebra functor C → CTlifts to a functor D from F T - coalgebras to Fˆ-coalgebras, which can be seen as a generalized powerset construction."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-c,
        askg-data:Entity-category,
        askg-data:Entity-eilenberg-moore_category_ct,
        askg-data:Entity-endofunctor_f%CB%86,
        askg-data:Entity-f,
        askg-data:Entity-f_t_-_coalgebras,
        askg-data:Entity-functor_d,
        askg-data:Entity-generalized_powerset_construction .

askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-1010 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 10"@en ;
    domo:Text "We can assume w.l.o.g. that F preserves monos (hence, so does Fˆ since monos in SetT are precisely injective T -algebra homomorphisms) and that coproduct injections are monic in SetT. Then an easy induction shows that the β n are monic, too. (One uses that [ˆη, φˆ] : Id + FˆFˆ∗ ∼= Fˆ∗.) This implies that for testing equivalence in the extension semantics we can replace γ¯n with"@en ;
    askg-onto:hasSentence askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-1010-Sentence-10101,
        askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-1010-Sentence-10102,
        askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-1010-Sentence-10103,
        askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-1010-Sentence-10104 ;
    askg-onto:index "10"^^xsd:int .

askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-1010-Sentence-10101 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "We can assume w.l.o.g."@en ;
    askg-onto:inSentence "We can assume w.l.o.g."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-assumption,
        askg-data:Entity-wlog .

askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-1010-Sentence-10102 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "that F preserves monos (hence, so does Fˆ since monos in SetT are precisely injective T -algebra homomorphisms) and that coproduct injections are monic in SetT."@en ;
    askg-onto:inSentence "that F preserves monos (hence, so does Fˆ since monos in SetT are precisely injective T -algebra homomorphisms) and that coproduct injections are monic in SetT."^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-coproduct_injections,
        askg-data:Entity-f,
        askg-data:Entity-f%CB%86,
        askg-data:Entity-injective_t-algebra_homomorphisms,
        askg-data:Entity-monic_in_sett,
        askg-data:Entity-monos .

askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-1010-Sentence-10103 a askg-onto:Sentence ;
    rdfs:label "Sentence 3"@en ;
    domo:Text "Then an easy induction shows that the β n are monic, too."@en ;
    askg-onto:inSentence "Then an easy induction shows that the β n are monic, too."^^xsd:string ;
    askg-onto:index "3"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-%CE%B2_n,
        askg-data:Entity-monic .

askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-1010-Sentence-10104 a askg-onto:Sentence ;
    rdfs:label "Sentence 4"@en ;
    domo:Text "(One uses that [ˆη, φˆ] : Id + FˆFˆ∗ ∼= Fˆ∗.) This implies that for testing equivalence in the extension semantics we can replace γ¯n with"@en ;
    askg-onto:inSentence "(One uses that [ˆη, φˆ] : Id + FˆFˆ∗ ∼= Fˆ∗.) This implies that for testing equivalence in the extension semantics we can replace γ¯n with"^^xsd:string ;
    askg-onto:index "4"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-%CB%86%CE%B7_%CF%86%CB%86,
        askg-data:Entity-id__f%CB%86f%CB%86__f%CB%86 .

askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-1011 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 11"@en ;
    domo:Text "$${\\hat{\\gamma}}_{n}=\\beta_{1}^{n}\\cdot{\\bar{\\gamma}}_{n}:T X\\to{\\hat{F}}^{*}1.$$"@en ;
    askg-onto:hasSentence askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-1011-Sentence-10111 ;
    askg-onto:index "11"^^xsd:int .

askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-1011-Sentence-10111 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "$${\\hat{\\gamma}}_{n}=\\beta_{1}^{n}\\cdot{\\bar{\\gamma}}_{n}:T X\\to{\\hat{F}}^{*}1.$$"@en ;
    askg-onto:inSentence "$${\\hat{\\gamma}}_{n}=\\beta_{1}^{n}\\cdot{\\bar{\\gamma}}_{n}:T X\\to{\\hat{F}}^{*}1.$$"^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-argamma_n,
        askg-data:Entity-eta_1n,
        askg-data:Entity-hatf1 .

askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-1012 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 12"@en ;
    domo:Text "We are now ready to state the semantic comparison result: Theorem 9. Let F be a finitary endofunctor, and let T *be a finitary monad, both on* Set. Further let ρ : T F → F T *be a functor-over-monad distributive law. Then two states in* F T *-coalgebras are equivalent under the extension semantics iff for* α : F T → M as given above, their α-trace sequences are identified under componentwise postcomposition with Fˆ∗!T1*. That is, in the above notation,*"@en ;
    askg-onto:hasSentence askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-1012-Sentence-10121,
        askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-1012-Sentence-10122,
        askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-1012-Sentence-10123,
        askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-1012-Sentence-10124,
        askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-1012-Sentence-10125 ;
    askg-onto:index "12"^^xsd:int .

askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-1012-Sentence-10121 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "We are now ready to state the semantic comparison result: Theorem 9."@en ;
    askg-onto:inSentence "We are now ready to state the semantic comparison result: Theorem 9."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-theorem_9 .

askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-1012-Sentence-10122 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "Let F be a finitary endofunctor, and let T *be a finitary monad, both on* Set."@en ;
    askg-onto:inSentence "Let F be a finitary endofunctor, and let T *be a finitary monad, both on* Set."^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-category,
        askg-data:Entity-f,
        askg-data:Entity-finitary_endofunctor,
        askg-data:Entity-finitary_monad,
        askg-data:Entity-set,
        askg-data:Entity-t .

askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-1012-Sentence-10123 a askg-onto:Sentence ;
    rdfs:label "Sentence 3"@en ;
    domo:Text "Further let ρ : T F → F T *be a functor-over-monad distributive law."@en ;
    askg-onto:inSentence "Further let ρ : T F → F T *be a functor-over-monad distributive law."^^xsd:string ;
    askg-onto:index "3"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-%CF%81,
        askg-data:Entity-functor-over-monad_distributive_law .

askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-1012-Sentence-10124 a askg-onto:Sentence ;
    rdfs:label "Sentence 4"@en ;
    domo:Text "Then two states in* F T *-coalgebras are equivalent under the extension semantics iff for* α : F T → M as given above, their α-trace sequences are identified under componentwise postcomposition with Fˆ∗!T1*."@en ;
    askg-onto:inSentence "Then two states in* F T *-coalgebras are equivalent under the extension semantics iff for* α : F T → M as given above, their α-trace sequences are identified under componentwise postcomposition with Fˆ∗!T1*."^^xsd:string ;
    askg-onto:index "4"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-%CE%B1,
        askg-data:Entity-%CE%B1-trace_sequences,
        askg-data:Entity-componentwise_postcomposition,
        askg-data:Entity-extension_semantics,
        askg-data:Entity-f%CB%86t1,
        askg-data:Entity-f_t_-coalgebras,
        askg-data:Entity-m .

askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-1012-Sentence-10125 a askg-onto:Sentence ;
    rdfs:label "Sentence 5"@en ;
    domo:Text "That is, in the above notation,*"@en ;
    askg-onto:inSentence "That is, in the above notation,*"^^xsd:string ;
    askg-onto:index "5"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-,
        askg-data:Entity-notation .

askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-1013 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 13"@en ;
    domo:Text "$$\\hat{\\gamma}_{n}\\cdot\\eta_{X}^{T}=\\hat{F}^{*}!_{T1}\\cdot M!_{X}\\cdot\\gamma^{(n)}.$$"@en ;
    askg-onto:hasSentence askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-1013-Sentence-10131 ;
    askg-onto:index "13"^^xsd:int .

askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-1013-Sentence-10131 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "$$\\hat{\\gamma}_{n}\\cdot\\eta_{X}^{T}=\\hat{F}^{*}!_{T1}\\cdot M!_{X}\\cdot\\gamma^{(n)}.$$"@en ;
    askg-onto:index "1"^^xsd:int .

askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-1014 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 14"@en ;
    domo:Text "Proof. We first recall how the Kleisli extension f 7→ f ∗for the monad M is obtained."@en ;
    askg-onto:hasSentence askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-1014-Sentence-10141,
        askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-1014-Sentence-10142 ;
    askg-onto:index "14"^^xsd:int .

askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-1014-Sentence-10141 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "Proof."@en ;
    askg-onto:inSentence "Proof."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-concept,
        askg-data:Entity-proof .

askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-1014-Sentence-10142 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "We first recall how the Kleisli extension f 7→ f ∗for the monad M is obtained."@en ;
    askg-onto:inSentence "We first recall how the Kleisli extension f 7→ f ∗for the monad M is obtained."^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-kleisli_extension,
        askg-data:Entity-monad_m .

askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-1015 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 15"@en ;
    domo:Text "Given f : X → MY one first extends this to the unique T -algebra morphism f ♯: T X → MY with f ♯· η TX = f (i. e. one applies the Kleisli extension of T ). Then one obtains f ∗: MX = Fˆ∗T X → Fˆ∗T Y = MY as the unique Fˆ-algebra morphism with f ∗· ηˆTX = f ♯. Notice that in this notation we have D(γ) = γ ♯and that the inductive step of the definition on γ¯n can be written as γ¯n+1 = Fˆγ¯n · γ ♯: T X → Fˆn1. Observe"@en ;
    askg-onto:hasSentence askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-1015-Sentence-10151,
        askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-1015-Sentence-10152,
        askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-1015-Sentence-10153,
        askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-1015-Sentence-10154,
        askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-1015-Sentence-10155,
        askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-1015-Sentence-10156 ;
    askg-onto:index "15"^^xsd:int .

askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-1015-Sentence-10151 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "Given f : X → MY one first extends this to the unique T -algebra morphism f ♯: T X → MY with f ♯· η TX = f (i."@en ;
    askg-onto:inSentence "Given f : X → MY one first extends this to the unique T -algebra morphism f ♯: T X → MY with f ♯· η TX = f (i."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-f,
        askg-data:Entity-f_,
        askg-data:Entity-f__t_x__my,
        askg-data:Entity-my,
        askg-data:Entity-t_-algebra_morphism .

askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-1015-Sentence-10152 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "e."@en ;
    askg-onto:inSentence "e."^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-e .

askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-1015-Sentence-10153 a askg-onto:Sentence ;
    rdfs:label "Sentence 3"@en ;
    domo:Text "one applies the Kleisli extension of T )."@en ;
    askg-onto:inSentence "one applies the Kleisli extension of T )."^^xsd:string ;
    askg-onto:index "3"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-concept,
        askg-data:Entity-kleisli_extension .

askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-1015-Sentence-10154 a askg-onto:Sentence ;
    rdfs:label "Sentence 4"@en ;
    domo:Text "Then one obtains f ∗: MX = Fˆ∗T X → Fˆ∗T Y = MY as the unique Fˆ-algebra morphism with f ∗· ηˆTX = f ♯."@en ;
    askg-onto:inSentence "Then one obtains f ∗: MX = Fˆ∗T X → Fˆ∗T Y = MY as the unique Fˆ-algebra morphism with f ∗· ηˆTX = f ♯."^^xsd:string ;
    askg-onto:index "4"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-%CE%B7%CB%86tx,
        askg-data:Entity-f,
        askg-data:Entity-f%CB%86t_x,
        askg-data:Entity-f%CB%86t_y,
        askg-data:Entity-my .

askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-1015-Sentence-10155 a askg-onto:Sentence ;
    rdfs:label "Sentence 5"@en ;
    domo:Text "Notice that in this notation we have D(γ) = γ ♯and that the inductive step of the definition on γ¯n can be written as γ¯n+1 = Fˆγ¯n · γ ♯: T X → Fˆn1."@en ;
    askg-onto:inSentence "Notice that in this notation we have D(γ) = γ ♯and that the inductive step of the definition on γ¯n can be written as γ¯n+1 = Fˆγ¯n · γ ♯: T X → Fˆn1."^^xsd:string ;
    askg-onto:index "5"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-%CE%B3_,
        askg-data:Entity-%CE%B3n,
        askg-data:Entity-%CE%B3n1,
        askg-data:Entity-d%CE%B3,
        askg-data:Entity-f%CB%86%CE%B3n,
        askg-data:Entity-f%CB%86n1,
        askg-data:Entity-t_x .

askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-1015-Sentence-10156 a askg-onto:Sentence ;
    rdfs:label "Sentence 6"@en ;
    domo:Text "Observe"@en ;
    askg-onto:inSentence "Observe"^^xsd:string ;
    askg-onto:index "6"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-concept,
        askg-data:Entity-observe .

askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-1016 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 16"@en ;
    domo:Text "$$(3)^{\\frac{1}{2}}$$"@en ;
    askg-onto:hasSentence askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-1016-Sentence-10161 ;
    askg-onto:index "16"^^xsd:int .

askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-1016-Sentence-10161 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "$$(3)^{\\frac{1}{2}}$$"@en ;
    askg-onto:inSentence "$$(3)^{\\frac{1}{2}}$$"^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-3frac12,
        askg-data:Entity-square_root .

askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-1017 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 17"@en ;
    domo:Text "further that, since γˆn, Fˆ∗!T1 and M! are T -algebra homomorphisms, (3) is equivalent to"@en ;
    askg-onto:hasSentence askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-1017-Sentence-10171,
        askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-1017-Sentence-10172 ;
    askg-onto:index "17"^^xsd:int .

askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-1017-Sentence-10171 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "further that, since γˆn, Fˆ∗!T1 and M!"@en ;
    askg-onto:inSentence "further that, since γˆn, Fˆ∗!T1 and M!"^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-%CE%B3%CB%86n,
        askg-data:Entity-concept,
        askg-data:Entity-f%CB%86t1,
        askg-data:Entity-m .

askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-1017-Sentence-10172 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "are T -algebra homomorphisms, (3) is equivalent to"@en ;
    askg-onto:inSentence "are T -algebra homomorphisms, (3) is equivalent to"^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-t_-algebra_homomorphisms .

askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-1018 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 18"@en ;
    domo:Text "$${\\hat{\\gamma}}_{n}={\\hat{F}}^{*}!_{T1}\\cdot M!_{X}\\cdot(\\gamma^{(n)})^{\\sharp}.$$ $$(4)$$ ♯. (4) We now prove (3) by induction on n. For the base case n = 0 we have:"@en ;
    askg-onto:hasSentence askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-1018-Sentence-10181,
        askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-1018-Sentence-10182,
        askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-1018-Sentence-10183 ;
    askg-onto:index "18"^^xsd:int .

askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-1018-Sentence-10181 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "$${\\hat{\\gamma}}_{n}={\\hat{F}}^{*}!_{T1}\\cdot M!_{X}\\cdot(\\gamma^{(n)})^{\\sharp}.$$ $$(4)$$ ♯."@en ;
    askg-onto:inSentence "$${\\hat{\\gamma}}_{n}={\\hat{F}}^{*}!_{T1}\\cdot M!_{X}\\cdot(\\gamma^{(n)})^{\\sharp}.$$ $$(4)$$ ♯."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-hatf_t1cdot_m_xcdotgammansharp,
        askg-data:Entity-hatgamma_n .

askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-1018-Sentence-10182 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "(4) We now prove (3) by induction on n."@en ;
    askg-onto:inSentence "(4) We now prove (3) by induction on n."^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-3,
        askg-data:Entity-n .

askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-1018-Sentence-10183 a askg-onto:Sentence ;
    rdfs:label "Sentence 3"@en ;
    domo:Text "For the base case n = 0 we have:"@en ;
    askg-onto:inSentence "For the base case n = 0 we have:"^^xsd:string ;
    askg-onto:index "3"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-0,
        askg-data:Entity-n .

askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-1019 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 19"@en ;
    domo:Text "$$\\begin{array}{r l}{{\\hat{F}}^{*}!_{T1}\\cdot M!_{X}\\cdot\\gamma^{(0)}={\\hat{F}}^{*}!_{T1}\\cdot{\\hat{F}}^{*}T!_{X}\\cdot\\eta_{X}^{M}}\\\\ {={\\hat{F}}^{*}!_{T1}\\cdot{\\hat{F}}^{*}T!_{X}\\cdot{\\hat{\\eta}}_{T X}\\cdot\\eta_{X}^{T}}\\\\ {={\\hat{\\eta}}_{1}\\cdot!_{T1}\\cdot T!_{X}\\cdot\\eta_{X}^{T}}\\\\ {={\\hat{\\eta}}_{1}\\cdot!_{T X}\\cdot\\eta_{X}^{T}}\\\\ {={\\hat{\\beta}}_{1}^{0}\\cdot{\\hat{\\gamma}}_{0}\\cdot\\eta_{X}^{T}}\\\\ {={\\hat{\\gamma}}_{0}\\cdot\\eta_{X}^{T}}\\end{array}$$ X def. of γˆ0. $$\\begin{array}{l}{{M=\\hat{F}^{*}T\\mathrm{~and~def.~of~}\\gamma^{(0)}}}\\\\ {{\\mathrm{since~}\\eta^{M}=\\hat{\\eta}T\\cdot\\eta^{T}}}\\\\ {{\\mathrm{naturality~of~}\\hat{\\eta}}}\\\\ {{\\mathrm{uniqueness~of~}!_{T X}}}\\\\ {{\\mathrm{def.~of~}\\hat{\\beta}^{0}\\mathrm{~and~}\\bar{\\gamma}_{0}}}\\\\ {{\\mathrm{def.~of~}\\hat{\\gamma}_{0}.}}\\end{array}$$ X naturality of ηˆ X uniqueness of !TX X def. of βˆ0and γ¯0 For the induction step we compute:"@en ;
    askg-onto:hasSentence askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-1019-Sentence-10191,
        askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-1019-Sentence-10192,
        askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-1019-Sentence-10193,
        askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-1019-Sentence-10194 ;
    askg-onto:index "19"^^xsd:int .

askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-1019-Sentence-10191 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "$$\\begin{array}{r l}{{\\hat{F}}^{*}!_{T1}\\cdot M!_{X}\\cdot\\gamma^{(0)}={\\hat{F}}^{*}!_{T1}\\cdot{\\hat{F}}^{*}T!_{X}\\cdot\\eta_{X}^{M}}\\\\ {={\\hat{F}}^{*}!_{T1}\\cdot{\\hat{F}}^{*}T!_{X}\\cdot{\\hat{\\eta}}_{T X}\\cdot\\eta_{X}^{T}}\\\\ {={\\hat{\\eta}}_{1}\\cdot!_{T1}\\cdot T!_{X}\\cdot\\eta_{X}^{T}}\\\\ {={\\hat{\\eta}}_{1}\\cdot!_{T X}\\cdot\\eta_{X}^{T}}\\\\ {={\\hat{\\beta}}_{1}^{0}\\cdot{\\hat{\\gamma}}_{0}\\cdot\\eta_{X}^{T}}\\\\ {={\\hat{\\gamma}}_{0}\\cdot\\eta_{X}^{T}}\\end{array}$$ X def."@en ;
    askg-onto:inSentence "$$\\begin{array}{r l}{{\\hat{F}}^{*}!_{T1}\\cdot M!_{X}\\cdot\\gamma^{(0)}={\\hat{F}}^{*}!_{T1}\\cdot{\\hat{F}}^{*}T!_{X}\\cdot\\eta_{X}^{M}}\\\\ {={\\hat{F}}^{*}!_{T1}\\cdot{\\hat{F}}^{*}T!_{X}\\cdot{\\hat{\\eta}}_{T X}\\cdot\\eta_{X}^{T}}\\\\ {={\\hat{\\eta}}_{1}\\cdot!_{T1}\\cdot T!_{X}\\cdot\\eta_{X}^{T}}\\\\ {={\\hat{\\eta}}_{1}\\cdot!_{T X}\\cdot\\eta_{X}^{T}}\\\\ {={\\hat{\\beta}}_{1}^{0}\\cdot{\\hat{\\gamma}}_{0}\\cdot\\eta_{X}^{T}}\\\\ {={\\hat{\\gamma}}_{0}\\cdot\\eta_{X}^{T}}\\end{array}$$ X def."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-eta_xt,
        askg-data:Entity-hat%0A_beta_10,
        askg-data:Entity-hat%0A_eta_1,
        askg-data:Entity-hat%0A_eta_t_x,
        askg-data:Entity-hat%0A_gamma_0,
        askg-data:Entity-hatf_t1,
        askg-data:Entity-hatft_x,
        askg-data:Entity-t_x .

askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-1019-Sentence-10192 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "of γˆ0."@en ;
    askg-onto:inSentence "of γˆ0."^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-%CE%B3%CB%860,
        askg-data:Entity-concept .

askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-1019-Sentence-10193 a askg-onto:Sentence ;
    rdfs:label "Sentence 3"@en ;
    domo:Text "$$\\begin{array}{l}{{M=\\hat{F}^{*}T\\mathrm{~and~def.~of~}\\gamma^{(0)}}}\\\\ {{\\mathrm{since~}\\eta^{M}=\\hat{\\eta}T\\cdot\\eta^{T}}}\\\\ {{\\mathrm{naturality~of~}\\hat{\\eta}}}\\\\ {{\\mathrm{uniqueness~of~}!_{T X}}}\\\\ {{\\mathrm{def.~of~}\\hat{\\beta}^{0}\\mathrm{~and~}\\bar{\\gamma}_{0}}}\\\\ {{\\mathrm{def.~of~}\\hat{\\gamma}_{0}.}}\\end{array}$$ X naturality of ηˆ X uniqueness of !TX X def."@en ;
    askg-onto:inSentence "$$\\begin{array}{l}{{M=\\hat{F}^{*}T\\mathrm{~and~def.~of~}\\gamma^{(0)}}}\\\\ {{\\mathrm{since~}\\eta^{M}=\\hat{\\eta}T\\cdot\\eta^{T}}}\\\\ {{\\mathrm{naturality~of~}\\hat{\\eta}}}\\\\ {{\\mathrm{uniqueness~of~}!_{T X}}}\\\\ {{\\mathrm{def.~of~}\\hat{\\beta}^{0}\\mathrm{~and~}\\bar{\\gamma}_{0}}}\\\\ {{\\mathrm{def.~of~}\\hat{\\gamma}_{0}.}}\\end{array}$$ X naturality of ηˆ X uniqueness of !TX X def."^^xsd:string ;
    askg-onto:index "3"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-%CE%B20_and_%CE%B3_0,
        askg-data:Entity-%CE%B3_0,
        askg-data:Entity-%CE%B7,
        askg-data:Entity-_tx,
        askg-data:Entity-def,
        askg-data:Entity-x .

askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-1019-Sentence-10194 a askg-onto:Sentence ;
    rdfs:label "Sentence 4"@en ;
    domo:Text "of βˆ0and γ¯0 For the induction step we compute:"@en ;
    askg-onto:inSentence "of βˆ0and γ¯0 For the induction step we compute:"^^xsd:string ;
    askg-onto:index "4"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-%CE%B2%CB%860,
        askg-data:Entity-%CE%B30,
        askg-data:Entity-concept .

askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-102 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 2"@en ;
    domo:Text "Explicitly, D(γ) = F µTXρTXT γ for γ : X → **F T X**, where µ T denotes the multiplication of T . In other words, D(γ) : T X → **F T X** is the unique T -algebra morphism with D(γ) · η TX = γ. Moreover, Fˆ has a final coalgebra with carrier Z. The extension semantics (i.e. trace semantics obtained via the powerset extension) of an F T -coalgebra γ : X → **F T X** is then obtained by first applying D to γ, obtaining a Fˆ-coalgebra with carrier T X and hence a Fˆ-coalgebra map T X → Z, and finally precomposing with η T X : X → T X where η T denotes the unit of T ."@en ;
    askg-onto:hasSentence askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-102-Sentence-1021,
        askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-102-Sentence-1022,
        askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-102-Sentence-1023,
        askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-102-Sentence-1024,
        askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-102-Sentence-1025 ;
    askg-onto:index "2"^^xsd:int .

askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-102-Sentence-1021 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "Explicitly, D(γ) = F µTXρTXT γ for γ : X → **F T X**, where µ T denotes the multiplication of T ."@en ;
    askg-onto:inSentence "Explicitly, D(γ) = F µTXρTXT γ for γ : X → **F T X**, where µ T denotes the multiplication of T ."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-%C2%B5_t,
        askg-data:Entity-d%CE%B3,
        askg-data:Entity-f_%C2%B5tx%CF%81txt_%CE%B3,
        askg-data:Entity-multiplication_of_t .

askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-102-Sentence-1022 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "In other words, D(γ) : T X → **F T X** is the unique T -algebra morphism with D(γ) · η TX = γ."@en ;
    askg-onto:inSentence "In other words, D(γ) : T X → **F T X** is the unique T -algebra morphism with D(γ) · η TX = γ."^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-%CE%B3,
        askg-data:Entity-d%CE%B3,
        askg-data:Entity-f_t_x .

askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-102-Sentence-1023 a askg-onto:Sentence ;
    rdfs:label "Sentence 3"@en ;
    domo:Text "Moreover, Fˆ has a final coalgebra with carrier Z."@en ;
    askg-onto:inSentence "Moreover, Fˆ has a final coalgebra with carrier Z."^^xsd:string ;
    askg-onto:index "3"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-f%CB%86,
        askg-data:Entity-final_coalgebra,
        askg-data:Entity-z .

askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-102-Sentence-1024 a askg-onto:Sentence ;
    rdfs:label "Sentence 4"@en ;
    domo:Text "The extension semantics (i.e."@en ;
    askg-onto:inSentence "The extension semantics (i.e."^^xsd:string ;
    askg-onto:index "4"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-concept,
        askg-data:Entity-extension_semantics .

askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-102-Sentence-1025 a askg-onto:Sentence ;
    rdfs:label "Sentence 5"@en ;
    domo:Text "trace semantics obtained via the powerset extension) of an F T -coalgebra γ : X → **F T X** is then obtained by first applying D to γ, obtaining a Fˆ-coalgebra with carrier T X and hence a Fˆ-coalgebra map T X → Z, and finally precomposing with η T X : X → T X where η T denotes the unit of T ."@en ;
    askg-onto:inSentence "trace semantics obtained via the powerset extension) of an F T -coalgebra γ : X → **F T X** is then obtained by first applying D to γ, obtaining a Fˆ-coalgebra with carrier T X and hence a Fˆ-coalgebra map T X → Z, and finally precomposing with η T X : X → T X where η T denotes the unit of T ."^^xsd:string ;
    askg-onto:index "5"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-%CE%B7_t_x,
        askg-data:Entity-applying_d_to_%CE%B3,
        askg-data:Entity-coalgebra,
        askg-data:Entity-d,
        askg-data:Entity-f%CB%86-coalgebra,
        askg-data:Entity-f_t_-coalgebra,
        askg-data:Entity-obtains_a_f%CB%86-coalgebra,
        askg-data:Entity-t,
        askg-data:Entity-t_x,
        askg-data:Entity-x,
        askg-data:Entity-z .

askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-1020 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 20"@en ;
    domo:Text "Fˆ∗!T1 · M!X · γ (n+1) = Fˆ∗!T1 · Fˆ∗T !X · (γ (n)) ∗ = Fˆ∗!T1 · Fˆ∗T !X · (γ (n)) ∗· ϕˆX · FˆηˆTX · γ def. of α = ˆϕ1 · FˆFˆ∗!T1 · FˆFˆ∗T !X · Fˆ(γ (n)) ∗ = ˆϕ1 · FˆFˆ∗!T1 · FˆFˆ∗T !X · Fˆ(γ (n)) = ˆϕ1 · Fˆβˆn 1· Fˆγ¯n · γ def. of γˆ = βˆn+1 1· Fγ¯n · γ def. of β = βˆn+1 1· Fγ¯n · γ ♯· η TX (−) = βˆn+1 1· γ¯n+1 · η TX def. of γ¯n+1 = ˆγn+1 · η ♯· γ def. of (−) = ˆϕ1 · Fˆγˆn · γ induction hypothesis (4) TX def. of γˆn+1. ⊓⊔ · αX · γ M = Fˆ∗T and def. of γ $M=\\hat{F}^*T$ and def, of $\\gamma^{(n+1)}$. · FˆηˆTX · γ Fˆ-algebra morphisms"@en ;
    askg-onto:hasSentence askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-1020-Sentence-10201,
        askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-1020-Sentence-102010,
        askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-1020-Sentence-10202,
        askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-1020-Sentence-10203,
        askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-1020-Sentence-10204,
        askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-1020-Sentence-10205,
        askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-1020-Sentence-10206,
        askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-1020-Sentence-10207,
        askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-1020-Sentence-10208,
        askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-1020-Sentence-10209 ;
    askg-onto:index "20"^^xsd:int .

askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-1020-Sentence-10201 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "Fˆ∗!T1 · M!X · γ (n+1) = Fˆ∗!T1 · Fˆ∗T !X · (γ (n)) ∗ = Fˆ∗!T1 · Fˆ∗T !X · (γ (n)) ∗· ϕˆX · FˆηˆTX · γ def."@en ;
    askg-onto:inSentence "Fˆ∗!T1 · M!X · γ (n+1) = Fˆ∗!T1 · Fˆ∗T !X · (γ (n)) ∗ = Fˆ∗!T1 · Fˆ∗T !X · (γ (n)) ∗· ϕˆX · FˆηˆTX · γ def."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-%CE%B3_def,
        askg-data:Entity-%CE%B3_n,
        askg-data:Entity-%CE%B3_n1,
        askg-data:Entity-%CF%95%CB%86x,
        askg-data:Entity-f%CB%86%CE%B7%CB%86tx,
        askg-data:Entity-f%CB%86t1,
        askg-data:Entity-f%CB%86t_x .

askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-1020-Sentence-102010 a askg-onto:Sentence ;
    rdfs:label "Sentence 10"@en ;
    domo:Text "· FˆηˆTX · γ Fˆ-algebra morphisms"@en ;
    askg-onto:inSentence "· FˆηˆTX · γ Fˆ-algebra morphisms"^^xsd:string ;
    askg-onto:index "10"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-%CE%B3_f%CB%86-algebra_morphisms,
        askg-data:Entity-f%CB%86%CE%B7%CB%86tx .

askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-1020-Sentence-10202 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "of α = ˆϕ1 · FˆFˆ∗!T1 · FˆFˆ∗T !X · Fˆ(γ (n)) ∗ = ˆϕ1 · FˆFˆ∗!T1 · FˆFˆ∗T !X · Fˆ(γ (n)) = ˆϕ1 · Fˆβˆn 1· Fˆγ¯n · γ def."@en ;
    askg-onto:inSentence "of α = ˆϕ1 · FˆFˆ∗!T1 · FˆFˆ∗T !X · Fˆ(γ (n)) ∗ = ˆϕ1 · FˆFˆ∗!T1 · FˆFˆ∗T !X · Fˆ(γ (n)) = ˆϕ1 · Fˆβˆn 1· Fˆγ¯n · γ def."^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-%CB%86%CF%951,
        askg-data:Entity-%CB%86%CF%951__f%CB%86%CE%B2%CB%86n_1_f%CB%86%CE%B3n__%CE%B3_def,
        askg-data:Entity-%CB%86%CF%951__f%CB%86f%CB%86t1__f%CB%86f%CB%86t_x__f%CB%86%CE%B3_n_,
        askg-data:Entity-%CE%B1,
        askg-data:Entity-f%CB%86%CE%B3_n,
        askg-data:Entity-f%CB%86f%CB%86t1,
        askg-data:Entity-f%CB%86f%CB%86t_x .

askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-1020-Sentence-10203 a askg-onto:Sentence ;
    rdfs:label "Sentence 3"@en ;
    domo:Text "of γˆ = βˆn+1 1· Fγ¯n · γ def."@en ;
    askg-onto:inSentence "of γˆ = βˆn+1 1· Fγ¯n · γ def."^^xsd:string ;
    askg-onto:index "3"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-%CE%B2%CB%86n1_1_f%CE%B3n__%CE%B3_def,
        askg-data:Entity-%CE%B3 .

askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-1020-Sentence-10204 a askg-onto:Sentence ;
    rdfs:label "Sentence 4"@en ;
    domo:Text "of β = βˆn+1 1· Fγ¯n · γ ♯· η TX (−) = βˆn+1 1· γ¯n+1 · η TX def."@en ;
    askg-onto:inSentence "of β = βˆn+1 1· Fγ¯n · γ ♯· η TX (−) = βˆn+1 1· γ¯n+1 · η TX def."^^xsd:string ;
    askg-onto:index "4"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-%CE%B2,
        askg-data:Entity-%CE%B2%CB%86n1_1_f%CE%B3n__%CE%B3__%CE%B7_tx_ .

askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-1020-Sentence-10205 a askg-onto:Sentence ;
    rdfs:label "Sentence 5"@en ;
    domo:Text "of γ¯n+1 = ˆγn+1 · η ♯· γ def."@en ;
    askg-onto:inSentence "of γ¯n+1 = ˆγn+1 · η ♯· γ def."^^xsd:string ;
    askg-onto:index "5"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-%CB%86%CE%B3n1__%CE%B7__%CE%B3_def,
        askg-data:Entity-%CE%B3n1 .

askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-1020-Sentence-10206 a askg-onto:Sentence ;
    rdfs:label "Sentence 6"@en ;
    domo:Text "of (−) = ˆϕ1 · Fˆγˆn · γ induction hypothesis (4) TX def."@en ;
    askg-onto:inSentence "of (−) = ˆϕ1 · Fˆγˆn · γ induction hypothesis (4) TX def."^^xsd:string ;
    askg-onto:index "6"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-induction_hypothesis,
        askg-data:Entity-tx_def .

askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-1020-Sentence-10207 a askg-onto:Sentence ;
    rdfs:label "Sentence 7"@en ;
    domo:Text "of γˆn+1."@en ;
    askg-onto:inSentence "of γˆn+1."^^xsd:string ;
    askg-onto:index "7"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-%CE%B3%CB%86n1,
        askg-data:Entity-concept .

askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-1020-Sentence-10208 a askg-onto:Sentence ;
    rdfs:label "Sentence 8"@en ;
    domo:Text "⊓⊔ · αX · γ M = Fˆ∗T and def."@en ;
    askg-onto:inSentence "⊓⊔ · αX · γ M = Fˆ∗T and def."^^xsd:string ;
    askg-onto:index "8"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-%CE%B1x,
        askg-data:Entity-f%CB%86t .

askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-1020-Sentence-10209 a askg-onto:Sentence ;
    rdfs:label "Sentence 9"@en ;
    domo:Text "of γ $M=\\hat{F}^*T$ and def, of $\\gamma^{(n+1)}$."@en ;
    askg-onto:inSentence "of γ $M=\\hat{F}^*T$ and def, of $\\gamma^{(n+1)}$."^^xsd:string ;
    askg-onto:index "9"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-%CE%B3,
        askg-data:Entity-%CE%B3n1,
        askg-data:Entity-ft,
        askg-data:Entity-m .

askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-1021 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 21"@en ;
    domo:Text "$$\\mathbf{\\partial}\\mathbf{r}$$ P -algebra homomorphisms def. of $(-)^*$ induction hypothesis (4) def. of $\\hat{\\gamma}^n$ def. of $\\beta^{n+1}$ $(-)^2$ Kleisli extension def. of $\\bar{\\gamma}_{n+1}$ def. of $\\hat{\\gamma}_{n+1}$ . $$\\mathbb{T}$$"@en ;
    askg-onto:hasSentence askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-1021-Sentence-10211,
        askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-1021-Sentence-10212,
        askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-1021-Sentence-10213,
        askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-1021-Sentence-10214,
        askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-1021-Sentence-10215,
        askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-1021-Sentence-10216,
        askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-1021-Sentence-10217 ;
    askg-onto:index "21"^^xsd:int .

askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-1021-Sentence-10211 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "$$\\mathbf{\\partial}\\mathbf{r}$$ P -algebra homomorphisms def."@en ;
    askg-onto:inSentence "$$\\mathbf{\\partial}\\mathbf{r}$$ P -algebra homomorphisms def."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-mathbfpartialmathbfr,
        askg-data:Entity-p-algebra_homomorphisms .

askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-1021-Sentence-10212 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "of $(-)^*$ induction hypothesis (4) def."@en ;
    askg-onto:inSentence "of $(-)^*$ induction hypothesis (4) def."^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-concept,
        askg-data:Entity-induction_hypothesis .

askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-1021-Sentence-10213 a askg-onto:Sentence ;
    rdfs:label "Sentence 3"@en ;
    domo:Text "of $\\hat{\\gamma}^n$ def."@en ;
    askg-onto:inSentence "of $\\hat{\\gamma}^n$ def."^^xsd:string ;
    askg-onto:index "3"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-%09extdef,
        askg-data:Entity-%09exthat%09extgamman .

askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-1021-Sentence-10214 a askg-onto:Sentence ;
    rdfs:label "Sentence 4"@en ;
    domo:Text "of $\\beta^{n+1}$ $(-)^2$ Kleisli extension def."@en ;
    askg-onto:inSentence "of $\\beta^{n+1}$ $(-)^2$ Kleisli extension def."^^xsd:string ;
    askg-onto:index "4"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-etan1_-2,
        askg-data:Entity-kleisli_extension .

askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-1021-Sentence-10215 a askg-onto:Sentence ;
    rdfs:label "Sentence 5"@en ;
    domo:Text "of $\\bar{\\gamma}_{n+1}$ def."@en ;
    askg-onto:inSentence "of $\\bar{\\gamma}_{n+1}$ def."^^xsd:string ;
    askg-onto:index "5"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-argamma_n1 .

askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-1021-Sentence-10216 a askg-onto:Sentence ;
    rdfs:label "Sentence 6"@en ;
    domo:Text "of $\\hat{\\gamma}_{n+1}$ ."@en ;
    askg-onto:inSentence "of $\\hat{\\gamma}_{n+1}$ ."^^xsd:string ;
    askg-onto:index "6"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-%0Ahatgamma_n1,
        askg-data:Entity-the_concept_of_uncertainty .

askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-1021-Sentence-10217 a askg-onto:Sentence ;
    rdfs:label "Sentence 7"@en ;
    domo:Text "$$\\mathbb{T}$$"@en ;
    askg-onto:inSentence "$$\\mathbb{T}$$"^^xsd:string ;
    askg-onto:index "7"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-mathbbt,
        askg-data:Entity-mathematical_concept .

askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-1022 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 22"@en ;
    domo:Text "In the base example in work on extension semantics [11,4], the case of nondeterministic automata understood as coalgebras of the form γ : X → 2 × P(X) Σ, the situation is as follows. The extension semantics of γ [11, Section 5.1] yields a map tr : X → P(Σ∗) that maps each state x ∈ X to the language accepted by the automaton with starting state x."@en ;
    askg-onto:hasSentence askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-1022-Sentence-10221,
        askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-1022-Sentence-10222 ;
    askg-onto:index "22"^^xsd:int .

askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-1022-Sentence-10221 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "In the base example in work on extension semantics [11,4], the case of nondeterministic automata understood as coalgebras of the form γ : X → 2 × P(X) Σ, the situation is as follows."@en ;
    askg-onto:inSentence "In the base example in work on extension semantics [11,4], the case of nondeterministic automata understood as coalgebras of the form γ : X → 2 × P(X) Σ, the situation is as follows."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-%CE%B3__x__2__px_%CF%83,
        askg-data:Entity-coalgebras,
        askg-data:Entity-coalgebras_of_the_form_%CE%B3__x__2__px_%CF%83,
        askg-data:Entity-extension_semantics,
        askg-data:Entity-nondeterministic_automata .

askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-1022-Sentence-10222 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "The extension semantics of γ [11, Section 5.1] yields a map tr : X → P(Σ∗) that maps each state x ∈ X to the language accepted by the automaton with starting state x."@en ;
    askg-onto:inSentence "The extension semantics of γ [11, Section 5.1] yields a map tr : X → P(Σ∗) that maps each state x ∈ X to the language accepted by the automaton with starting state x."^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-%CE%B3,
        askg-data:Entity-each_state_x__x,
        askg-data:Entity-map_tr__x__p%CF%82,
        askg-data:Entity-the_language_accepted_by_the_automaton_with_starting_state_x .

askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-1023 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 23"@en ;
    domo:Text "To understand the above theorem in terms of this concrete example, we fix F X = 2×XΣ and T X = P<ω(X) (to ensure finitarity). Understood as an algebraic signature, F can be represented by two Σ-ary function symbols y and n. The monad M = Fˆ∗T has these operations and those of P<ω, i.e. the join semilattice operations, which we write using set notation; the distributive law ρ allows us to distribute joins over y and n, favouring y over n to reflect the acceptance condition of (existential) non-deterministic automata. The trace semantics αX : **F T X** → MX embeds flat terms, i.e. terms of the form y((Ua)a∈Σ) or n((Ua)a∈Σ) ∈ **F T X** (with Ua ∈ P(X)), into general (nonflat) terms. Every step in the construction of γ n(c) puts a flat term on top of terms constructed in the previous step, and then distributes T -operations (joins) over their arguments as indicated. Therefore, the terms γ (n)(c) are terms of uniform depth in the F-operations over sets of variables, i.e. they are elements of F nT C. For the alphabet Σ = {0, 1}, a typical component of the trace sequence T α γ(c), i.e. M!Xγ (n)(c) for"@en ;
    askg-onto:hasSentence askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-1023-Sentence-10231,
        askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-1023-Sentence-102310,
        askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-1023-Sentence-102311,
        askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-1023-Sentence-10232,
        askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-1023-Sentence-10233,
        askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-1023-Sentence-10234,
        askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-1023-Sentence-10235,
        askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-1023-Sentence-10236,
        askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-1023-Sentence-10237,
        askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-1023-Sentence-10238,
        askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-1023-Sentence-10239 ;
    askg-onto:index "23"^^xsd:int .

askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-1023-Sentence-10231 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "To understand the above theorem in terms of this concrete example, we fix F X = 2×XΣ and T X = P<ω(X) (to ensure finitarity)."@en ;
    askg-onto:inSentence "To understand the above theorem in terms of this concrete example, we fix F X = 2×XΣ and T X = P<ω(X) (to ensure finitarity)."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-2x%CF%82,
        askg-data:Entity-f_x,
        askg-data:Entity-p%CF%89x,
        askg-data:Entity-t_x .

askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-1023-Sentence-102310 a askg-onto:Sentence ;
    rdfs:label "Sentence 10"@en ;
    domo:Text "For the alphabet Σ = {0, 1}, a typical component of the trace sequence T α γ(c), i.e."@en ;
    askg-onto:inSentence "For the alphabet Σ = {0, 1}, a typical component of the trace sequence T α γ(c), i.e."^^xsd:string ;
    askg-onto:index "10"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-%CF%83,
        askg-data:Entity-0_1,
        askg-data:Entity-trace_sequence_t_%CE%B1_%CE%B3c .

askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-1023-Sentence-102311 a askg-onto:Sentence ;
    rdfs:label "Sentence 11"@en ;
    domo:Text "M!Xγ (n)(c) for"@en ;
    askg-onto:inSentence "M!Xγ (n)(c) for"^^xsd:string ;
    askg-onto:index "11"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-mx%CE%B3_nc,
        askg-data:Entity-technology .

askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-1023-Sentence-10232 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "Understood as an algebraic signature, F can be represented by two Σ-ary function symbols y and n."@en ;
    askg-onto:inSentence "Understood as an algebraic signature, F can be represented by two Σ-ary function symbols y and n."^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-f,
        askg-data:Entity-two_%CF%83-ary_function_symbols_y_and_n .

askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-1023-Sentence-10233 a askg-onto:Sentence ;
    rdfs:label "Sentence 3"@en ;
    domo:Text "The monad M = Fˆ∗T has these operations and those of P<ω, i.e."@en ;
    askg-onto:inSentence "The monad M = Fˆ∗T has these operations and those of P<ω, i.e."^^xsd:string ;
    askg-onto:index "3"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-m__f%CB%86t,
        askg-data:Entity-p%CF%89 .

askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-1023-Sentence-10234 a askg-onto:Sentence ;
    rdfs:label "Sentence 4"@en ;
    domo:Text "the join semilattice operations, which we write using set notation; the distributive law ρ allows us to distribute joins over y and n, favouring y over n to reflect the acceptance condition of (existential) non-deterministic automata."@en ;
    askg-onto:inSentence "the join semilattice operations, which we write using set notation; the distributive law ρ allows us to distribute joins over y and n, favouring y over n to reflect the acceptance condition of (existential) non-deterministic automata."^^xsd:string ;
    askg-onto:index "4"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-acceptance_condition,
        askg-data:Entity-distribute_joins_over_y_and_n,
        askg-data:Entity-distributive_law_%CF%81,
        askg-data:Entity-join_semilattice_operations,
        askg-data:Entity-non-deterministic_automata .

askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-1023-Sentence-10235 a askg-onto:Sentence ;
    rdfs:label "Sentence 5"@en ;
    domo:Text "The trace semantics αX : **F T X** → MX embeds flat terms, i.e."@en ;
    askg-onto:inSentence "The trace semantics αX : **F T X** → MX embeds flat terms, i.e."^^xsd:string ;
    askg-onto:index "5"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-%CE%B1x,
        askg-data:Entity-f_t_x,
        askg-data:Entity-flat_terms,
        askg-data:Entity-mx .

askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-1023-Sentence-10236 a askg-onto:Sentence ;
    rdfs:label "Sentence 6"@en ;
    domo:Text "terms of the form y((Ua)a∈Σ) or n((Ua)a∈Σ) ∈ **F T X** (with Ua ∈ P(X)), into general (nonflat) terms."@en ;
    askg-onto:inSentence "terms of the form y((Ua)a∈Σ) or n((Ua)a∈Σ) ∈ **F T X** (with Ua ∈ P(X)), into general (nonflat) terms."^^xsd:string ;
    askg-onto:index "6"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-f_t_x,
        askg-data:Entity-px,
        askg-data:Entity-u_a,
        askg-data:Entity-yuaa%CF%82_or_nuaa%CF%82 .

askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-1023-Sentence-10237 a askg-onto:Sentence ;
    rdfs:label "Sentence 7"@en ;
    domo:Text "Every step in the construction of γ n(c) puts a flat term on top of terms constructed in the previous step, and then distributes T -operations (joins) over their arguments as indicated."@en ;
    askg-onto:inSentence "Every step in the construction of γ n(c) puts a flat term on top of terms constructed in the previous step, and then distributes T -operations (joins) over their arguments as indicated."^^xsd:string ;
    askg-onto:index "7"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-%CE%B3_nc,
        askg-data:Entity-arguments,
        askg-data:Entity-flat_term,
        askg-data:Entity-t_-operations .

askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-1023-Sentence-10238 a askg-onto:Sentence ;
    rdfs:label "Sentence 8"@en ;
    domo:Text "Therefore, the terms γ (n)(c) are terms of uniform depth in the F-operations over sets of variables, i.e."@en ;
    askg-onto:inSentence "Therefore, the terms γ (n)(c) are terms of uniform depth in the F-operations over sets of variables, i.e."^^xsd:string ;
    askg-onto:index "8"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-f-operations,
        askg-data:Entity-sets_of_variables .

askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-1023-Sentence-10239 a askg-onto:Sentence ;
    rdfs:label "Sentence 9"@en ;
    domo:Text "they are elements of F nT C."@en ;
    askg-onto:inSentence "they are elements of F nT C."^^xsd:string ;
    askg-onto:index "9"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-element,
        askg-data:Entity-f_nt_c .

askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-103 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 3"@en ;
    domo:Text "In order to compare this with our framework, in which we currently consider only finite iterates of the given coalgebra, we need to assume that F-behavioural equivalence coincides with finite-depth behavioural equivalence; this is ensured e.g. by assuming that F is a finitary endofunctor on Set. In this case, two states have the same extension semantics iff they induce the same values in the first ω steps of the final sequence of Fˆ, whose carriers coincide with the final sequence of F. Combining the definition of Dγ for a coalgebra γ : X → **F T X** with the usual construction of the canonical cone for Dγ, which we denote by γ¯n : T X → F n1 for distinction from the canonical cone of γ in the final sequence of F T , we obtain that γ¯n is recursively defined by"@en ;
    askg-onto:hasSentence askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-103-Sentence-1031,
        askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-103-Sentence-1032,
        askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-103-Sentence-1033,
        askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-103-Sentence-1034 ;
    askg-onto:index "3"^^xsd:int .

askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-103-Sentence-1031 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "In order to compare this with our framework, in which we currently consider only finite iterates of the given coalgebra, we need to assume that F-behavioural equivalence coincides with finite-depth behavioural equivalence; this is ensured e.g."@en ;
    askg-onto:inSentence "In order to compare this with our framework, in which we currently consider only finite iterates of the given coalgebra, we need to assume that F-behavioural equivalence coincides with finite-depth behavioural equivalence; this is ensured e.g."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-f-behavioural_equivalence,
        askg-data:Entity-finite-depth_behavioural_equivalence,
        askg-data:Entity-finite_iterates_of_the_given_coalgebra,
        askg-data:Entity-framework .

askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-103-Sentence-1032 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "by assuming that F is a finitary endofunctor on Set."@en ;
    askg-onto:inSentence "by assuming that F is a finitary endofunctor on Set."^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-category,
        askg-data:Entity-endofunctor,
        askg-data:Entity-f,
        askg-data:Entity-finitary,
        askg-data:Entity-finitary_endofunctor,
        askg-data:Entity-set .

askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-103-Sentence-1033 a askg-onto:Sentence ;
    rdfs:label "Sentence 3"@en ;
    domo:Text "In this case, two states have the same extension semantics iff they induce the same values in the first ω steps of the final sequence of Fˆ, whose carriers coincide with the final sequence of F."@en ;
    askg-onto:inSentence "In this case, two states have the same extension semantics iff they induce the same values in the first ω steps of the final sequence of Fˆ, whose carriers coincide with the final sequence of F."^^xsd:string ;
    askg-onto:index "3"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-carriers,
        askg-data:Entity-final_sequence_of_f,
        askg-data:Entity-final_sequence_of_f%CB%86,
        askg-data:Entity-first_%CF%89_steps,
        askg-data:Entity-same_extension_semantics,
        askg-data:Entity-same_values,
        askg-data:Entity-they,
        askg-data:Entity-two_states .

askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-103-Sentence-1034 a askg-onto:Sentence ;
    rdfs:label "Sentence 4"@en ;
    domo:Text "Combining the definition of Dγ for a coalgebra γ : X → **F T X** with the usual construction of the canonical cone for Dγ, which we denote by γ¯n : T X → F n1 for distinction from the canonical cone of γ in the final sequence of F T , we obtain that γ¯n is recursively defined by"@en ;
    askg-onto:inSentence "Combining the definition of Dγ for a coalgebra γ : X → **F T X** with the usual construction of the canonical cone for Dγ, which we denote by γ¯n : T X → F n1 for distinction from the canonical cone of γ in the final sequence of F T , we obtain that γ¯n is recursively defined by"^^xsd:string ;
    askg-onto:index "4"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-%CE%B3,
        askg-data:Entity-%CE%B3n,
        askg-data:Entity-canonical_cone_for_d%CE%B3,
        askg-data:Entity-coalgebra_%CE%B3__x__f_t_x,
        askg-data:Entity-d%CE%B3,
        askg-data:Entity-final_sequence_of_f_t,
        askg-data:Entity-t_x__f_n1 .

askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-104 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 4"@en ;
    domo:Text "$$\\begin{array}{c}{{\\bar{\\gamma}_{0}=!_{T X}:T X\\to1,}}\\\\ {{\\bar{\\gamma}_{n+1}=F\\bar{\\gamma}_{n}T\\gamma\\rho F\\mu^{T}.}}\\end{array}$$"@en ;
    askg-onto:hasSentence askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-104-Sentence-1041 ;
    askg-onto:index "4"^^xsd:int .

askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-104-Sentence-1041 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "$$\\begin{array}{c}{{\\bar{\\gamma}_{0}=!_{T X}:T X\\to1,}}\\\\ {{\\bar{\\gamma}_{n+1}=F\\bar{\\gamma}_{n}T\\gamma\\rho F\\mu^{T}.}}\\end{array}$$"@en ;
    askg-onto:inSentence "$$\\begin{array}{c}{{\\bar{\\gamma}_{0}=!_{T X}:T X\\to1,}}\\\\ {{\\bar{\\gamma}_{n+1}=F\\bar{\\gamma}_{n}T\\gamma\\rho F\\mu^{T}.}}\\end{array}$$"^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-_t_xt_xto1,
        askg-data:Entity-bargamma_0,
        askg-data:Entity-bargamma_n1,
        askg-data:Entity-fbargamma_ntgammarho_fmut .

askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-105 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 5"@en ;
    domo:Text "Now let us also assume that T is a finitary monad on Set. Then SetTis a locally finitely presentable category, and since the forgetful functor to Set creates filtered colimits, we see that the lifting Fˆ is finitary on SetT. Hence free Fˆ-algebras exists, which implies that we have the adjunction on the right below"@en ;
    askg-onto:hasSentence askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-105-Sentence-1051,
        askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-105-Sentence-1052,
        askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-105-Sentence-1053 ;
    askg-onto:index "5"^^xsd:int .

askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-105-Sentence-1051 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "Now let us also assume that T is a finitary monad on Set."@en ;
    askg-onto:inSentence "Now let us also assume that T is a finitary monad on Set."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-finitary_monad,
        askg-data:Entity-set,
        askg-data:Entity-t .

askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-105-Sentence-1052 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "Then SetTis a locally finitely presentable category, and since the forgetful functor to Set creates filtered colimits, we see that the lifting Fˆ is finitary on SetT."@en ;
    askg-onto:inSentence "Then SetTis a locally finitely presentable category, and since the forgetful functor to Set creates filtered colimits, we see that the lifting Fˆ is finitary on SetT."^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-filtered_colimits,
        askg-data:Entity-finitary_on_sett,
        askg-data:Entity-forgetful_functor,
        askg-data:Entity-lifting_f%CB%86,
        askg-data:Entity-locally_finitely_presentable_category,
        askg-data:Entity-sett .

askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-105-Sentence-1053 a askg-onto:Sentence ;
    rdfs:label "Sentence 3"@en ;
    domo:Text "Hence free Fˆ-algebras exists, which implies that we have the adjunction on the right below"@en ;
    askg-onto:inSentence "Hence free Fˆ-algebras exists, which implies that we have the adjunction on the right below"^^xsd:string ;
    askg-onto:index "3"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-adjunction,
        askg-data:Entity-free_f%CB%86-algebras .

askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-106 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 6"@en ;
    domo:Text "$$\\mathrm{Set}_{\\{\\,\\perp\\,\\,\\perp\\,\\,\\rightarrow\\,\\,\\}}\\mathrm{Set}^{T}{\\xrightarrow[\\;\\;\\perp\\,\\,\\rightarrow\\,\\,]{}}\\mathrm{Alg}\\;\\hat{F}\\,,$$"@en ;
    askg-onto:hasSentence askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-106-Sentence-1061 ;
    askg-onto:index "6"^^xsd:int .

askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-106-Sentence-1061 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "$$\\mathrm{Set}_{\\{\\,\\perp\\,\\,\\perp\\,\\,\\rightarrow\\,\\,\\}}\\mathrm{Set}^{T}{\\xrightarrow[\\;\\;\\perp\\,\\,\\rightarrow\\,\\,]{}}\\mathrm{Alg}\\;\\hat{F}\\,,$$"@en ;
    askg-onto:inSentence "$$\\mathrm{Set}_{\\{\\,\\perp\\,\\,\\perp\\,\\,\\rightarrow\\,\\,\\}}\\mathrm{Set}^{T}{\\xrightarrow[\\;\\;\\perp\\,\\,\\rightarrow\\,\\,]{}}\\mathrm{Alg}\\;\\hat{F}\\,,$$"^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-alg,
        askg-data:Entity-set .

askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-107 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 7"@en ;
    domo:Text "and the adjunction on the left is the canonical one. We define M to be the monad of the composed adjunction; it assigns to a set X the underlying set Fˆ∗T X of a free Fˆ-algebra on the free T -algebra T X; here Fˆ∗ denotes the free monad on Fˆ (notice that this is not in general a lifing of the free monad on F to SetT). Intuitively, M is defined by forming the disjoint union of the algebraic theories associated to T and F, respectively, and then imposing the distributive law between the operations of T and F embodied by ρ. In the following we shall denote the unit and multiplication of Fˆ∗ by ηˆ and µˆ, respectively. We also write ϕˆX : FˆFˆ∗X → Fˆ∗X for the structures of the free Fˆ-algebras and note that these yield a natural transformation ϕˆ."@en ;
    askg-onto:hasSentence askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-107-Sentence-1071,
        askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-107-Sentence-1072,
        askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-107-Sentence-1073,
        askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-107-Sentence-1074,
        askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-107-Sentence-1075 ;
    askg-onto:index "7"^^xsd:int .

askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-107-Sentence-1071 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "and the adjunction on the left is the canonical one."@en ;
    askg-onto:inSentence "and the adjunction on the left is the canonical one."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-adjunction,
        askg-data:Entity-canonical .

askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-107-Sentence-1072 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "We define M to be the monad of the composed adjunction; it assigns to a set X the underlying set Fˆ∗T X of a free Fˆ-algebra on the free T -algebra T X; here Fˆ∗ denotes the free monad on Fˆ (notice that this is not in general a lifing of the free monad on F to SetT)."@en ;
    askg-onto:inSentence "We define M to be the monad of the composed adjunction; it assigns to a set X the underlying set Fˆ∗T X of a free Fˆ-algebra on the free T -algebra T X; here Fˆ∗ denotes the free monad on Fˆ (notice that this is not in general a lifing of the free monad on F to SetT)."^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-f,
        askg-data:Entity-f%CB%86,
        askg-data:Entity-m,
        askg-data:Entity-sett,
        askg-data:Entity-the_free_monad,
        askg-data:Entity-the_monad_of_the_composed_adjunction,
        askg-data:Entity-the_underlying_set_f%CB%86t_x,
        askg-data:Entity-x .

askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-107-Sentence-1073 a askg-onto:Sentence ;
    rdfs:label "Sentence 3"@en ;
    domo:Text "Intuitively, M is defined by forming the disjoint union of the algebraic theories associated to T and F, respectively, and then imposing the distributive law between the operations of T and F embodied by ρ."@en ;
    askg-onto:inSentence "Intuitively, M is defined by forming the disjoint union of the algebraic theories associated to T and F, respectively, and then imposing the distributive law between the operations of T and F embodied by ρ."^^xsd:string ;
    askg-onto:index "3"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-%CF%81,
        askg-data:Entity-f,
        askg-data:Entity-m,
        askg-data:Entity-t,
        askg-data:Entity-the_algebraic_theories,
        askg-data:Entity-the_disjoint_union_of_the_algebraic_theories_associated_to_t_and_f,
        askg-data:Entity-the_distributive_law_between_the_operations_of_t_and_f .

askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-107-Sentence-1074 a askg-onto:Sentence ;
    rdfs:label "Sentence 4"@en ;
    domo:Text "In the following we shall denote the unit and multiplication of Fˆ∗ by ηˆ and µˆ, respectively."@en ;
    askg-onto:inSentence "In the following we shall denote the unit and multiplication of Fˆ∗ by ηˆ and µˆ, respectively."^^xsd:string ;
    askg-onto:index "4"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-%C2%B5%CB%86,
        askg-data:Entity-%CE%B7%CB%86,
        askg-data:Entity-f%CB%86 .

askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-107-Sentence-1075 a askg-onto:Sentence ;
    rdfs:label "Sentence 5"@en ;
    domo:Text "We also write ϕˆX : FˆFˆ∗X → Fˆ∗X for the structures of the free Fˆ-algebras and note that these yield a natural transformation ϕˆ."@en ;
    askg-onto:inSentence "We also write ϕˆX : FˆFˆ∗X → Fˆ∗X for the structures of the free Fˆ-algebras and note that these yield a natural transformation ϕˆ."^^xsd:string ;
    askg-onto:index "5"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-%CF%95%CB%86,
        askg-data:Entity-f%CB%86f%CB%86x,
        askg-data:Entity-free_f%CB%86-algebras,
        askg-data:Entity-natural_transformation .

askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-108 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 8"@en ;
    domo:Text "Now denote by κˆ : Fˆ → Fˆ∗the universal natural transformation into the free monad; it is easy to see that κˆ = ˆϕ · Fˆηˆ. Then it follows that α = ˆκT yields a natural transformation from F T to M (on Set). Let us further recall that there exist canonical natural transformations βˆn : Fˆn → Fˆ∗ defined inductively by"@en ;
    askg-onto:hasSentence askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-108-Sentence-1081,
        askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-108-Sentence-1082,
        askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-108-Sentence-1083 ;
    askg-onto:index "8"^^xsd:int .

askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-108-Sentence-1081 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "Now denote by κˆ : Fˆ → Fˆ∗the universal natural transformation into the free monad; it is easy to see that κˆ = ˆϕ · Fˆηˆ."@en ;
    askg-onto:inSentence "Now denote by κˆ : Fˆ → Fˆ∗the universal natural transformation into the free monad; it is easy to see that κˆ = ˆϕ · Fˆηˆ."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-%CB%86%CF%95__f%CB%86%CE%B7%CB%86,
        askg-data:Entity-%CE%BA%CB%86,
        askg-data:Entity-f%CB%86__f%CB%86,
        askg-data:Entity-free_monad .

askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-108-Sentence-1082 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "Then it follows that α = ˆκT yields a natural transformation from F T to M (on Set)."@en ;
    askg-onto:inSentence "Then it follows that α = ˆκT yields a natural transformation from F T to M (on Set)."^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-%CE%B1,
        askg-data:Entity-f_t,
        askg-data:Entity-m,
        askg-data:Entity-natural_transformation .

askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-108-Sentence-1083 a askg-onto:Sentence ;
    rdfs:label "Sentence 3"@en ;
    domo:Text "Let us further recall that there exist canonical natural transformations βˆn : Fˆn → Fˆ∗ defined inductively by"@en ;
    askg-onto:inSentence "Let us further recall that there exist canonical natural transformations βˆn : Fˆn → Fˆ∗ defined inductively by"^^xsd:string ;
    askg-onto:index "3"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-canonical_natural_transformations,
        askg-data:Entity-f%CB%86n__f%CB%86 .

askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-109 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 9"@en ;
    domo:Text "$$\\hat{\\beta}^{0}=(\\,I d\\,\\underline{{{\\hat{\\eta}}}}\\,\\underline{{{\\hat{F}}}}^{*}\\,)\\qquad\\mathrm{and}\\qquad\\hat{\\beta}^{n+1}=(\\,\\hat{F}^{n+1}=\\hat{F}\\hat{F}^{n}\\,\\underline{{{\\hat{F}}}}^{\\hat{\\beta}^{n}}\\,\\underline{{{\\hat{F}}}}\\,\\hat{F}^{*}\\,\\underline{{{\\hat{F}}}}^{*}\\,).$$"@en ;
    askg-onto:hasSentence askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-109-Sentence-1091 ;
    askg-onto:index "9"^^xsd:int .

askg-data:Paper-ae04d54115630f9e-Section-10-Paragraph-109-Sentence-1091 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "$$\\hat{\\beta}^{0}=(\\,I d\\,\\underline{{{\\hat{\\eta}}}}\\,\\underline{{{\\hat{F}}}}^{*}\\,)\\qquad\\mathrm{and}\\qquad\\hat{\\beta}^{n+1}=(\\,\\hat{F}^{n+1}=\\hat{F}\\hat{F}^{n}\\,\\underline{{{\\hat{F}}}}^{\\hat{\\beta}^{n}}\\,\\underline{{{\\hat{F}}}}\\,\\hat{F}^{*}\\,\\underline{{{\\hat{F}}}}^{*}\\,).$$"@en ;
    askg-onto:inSentence "$$\\hat{\\beta}^{0}=(\\,I d\\,\\underline{{{\\hat{\\eta}}}}\\,\\underline{{{\\hat{F}}}}^{*}\\,)\\qquad\\mathrm{and}\\qquad\\hat{\\beta}^{n+1}=(\\,\\hat{F}^{n+1}=\\hat{F}\\hat{F}^{n}\\,\\underline{{{\\hat{F}}}}^{\\hat{\\beta}^{n}}\\,\\underline{{{\\hat{F}}}}\\,\\hat{F}^{*}\\,\\underline{{{\\hat{F}}}}^{*}\\,).$$"^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-%0A%09heta,
        askg-data:Entity-%0Ai_d .

askg-data:Paper-ae04d54115630f9e-Section-11 a askg-onto:Section ;
    rdfs:label "Section 11"@en ;
    domo:Text "12 Some N Can Be Visualised As A Tree Like The One On The Left:"@en ;
    askg-onto:hasParagraph askg-data:Paper-ae04d54115630f9e-Section-11-Paragraph-111,
        askg-data:Paper-ae04d54115630f9e-Section-11-Paragraph-112,
        askg-data:Paper-ae04d54115630f9e-Section-11-Paragraph-113,
        askg-data:Paper-ae04d54115630f9e-Section-11-Paragraph-114,
        askg-data:Paper-ae04d54115630f9e-Section-11-Paragraph-115,
        askg-data:Paper-ae04d54115630f9e-Section-11-Paragraph-116,
        askg-data:Paper-ae04d54115630f9e-Section-11-Paragraph-117 ;
    askg-onto:index "11"^^xsd:int ;
    askg-onto:level "3"^^xsd:int .

askg-data:Paper-ae04d54115630f9e-Section-11-Paragraph-111 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 1"@en ;
    domo:Text "![12_image_0.png](12_image_0.png)"@en ;
    askg-onto:hasSentence askg-data:Paper-ae04d54115630f9e-Section-11-Paragraph-111-Sentence-1111 ;
    askg-onto:index "1"^^xsd:int .

askg-data:Paper-ae04d54115630f9e-Section-11-Paragraph-111-Sentence-1111 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "![12_image_0.png](12_image_0.png)"@en ;
    askg-onto:inSentence "![12_image_0.png](12_image_0.png)"^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-algorithm_c,
        askg-data:Entity-method_y,
        askg-data:Entity-organization_a,
        askg-data:Entity-paper_b,
        askg-data:Entity-research_topic_x,
        askg-data:Entity-researcher_z,
        askg-data:Entity-technique_d .

askg-data:Paper-ae04d54115630f9e-Section-11-Paragraph-112 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 2"@en ;
    domo:Text "This tree conveys the information that the empty word ǫ and the word 1 lead to final states (i.e. are accepted in the sense of language semantics), and additionally that 00 and 11 are not blocked; generally, the α-trace sequence records at each stage which words are accepted and additionally which words can be executed without deadlock."@en ;
    askg-onto:hasSentence askg-data:Paper-ae04d54115630f9e-Section-11-Paragraph-112-Sentence-1121,
        askg-data:Paper-ae04d54115630f9e-Section-11-Paragraph-112-Sentence-1122 ;
    askg-onto:index "2"^^xsd:int .

askg-data:Paper-ae04d54115630f9e-Section-11-Paragraph-112-Sentence-1121 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "This tree conveys the information that the empty word ǫ and the word 1 lead to final states (i.e."@en ;
    askg-onto:inSentence "This tree conveys the information that the empty word ǫ and the word 1 lead to final states (i.e."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-empty_word_%C7%AB,
        askg-data:Entity-final_states,
        askg-data:Entity-word_1 .

askg-data:Paper-ae04d54115630f9e-Section-11-Paragraph-112-Sentence-1122 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "are accepted in the sense of language semantics), and additionally that 00 and 11 are not blocked; generally, the α-trace sequence records at each stage which words are accepted and additionally which words can be executed without deadlock."@en ;
    askg-onto:inSentence "are accepted in the sense of language semantics), and additionally that 00 and 11 are not blocked; generally, the α-trace sequence records at each stage which words are accepted and additionally which words can be executed without deadlock."^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-%CE%B1-trace_sequence,
        askg-data:Entity-accepted_words,
        askg-data:Entity-words_can_be_executed_without_deadlock .

askg-data:Paper-ae04d54115630f9e-Section-11-Paragraph-113 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 3"@en ;
    domo:Text "The tree on the right is then obtained by applying Fˆ∗!T1. This erases the information on non-blocked words, so that only the information that ǫ and 1 are accepted remains; this yields the extension semantics [11,4], i.e. language semantics of the automaton, as formally stated in Theorem 9. As noted already in Section 4, if we move to nonblocking non-deterministic automata, then α-trace equivalence coincides directly with language equivalence - note that in this case, T is non-empty powerset, so that !T1 is a bijection, i.e. postcomposing the α-trace sequence with Fˆ∗!T1 does not lose information. Informally, this is clear as non-acceptance of words due to deadlock never happens in a non-blocking nondeterministic automaton."@en ;
    askg-onto:hasSentence askg-data:Paper-ae04d54115630f9e-Section-11-Paragraph-113-Sentence-1131,
        askg-data:Paper-ae04d54115630f9e-Section-11-Paragraph-113-Sentence-1132,
        askg-data:Paper-ae04d54115630f9e-Section-11-Paragraph-113-Sentence-1133,
        askg-data:Paper-ae04d54115630f9e-Section-11-Paragraph-113-Sentence-1134,
        askg-data:Paper-ae04d54115630f9e-Section-11-Paragraph-113-Sentence-1135,
        askg-data:Paper-ae04d54115630f9e-Section-11-Paragraph-113-Sentence-1136 ;
    askg-onto:index "3"^^xsd:int .

askg-data:Paper-ae04d54115630f9e-Section-11-Paragraph-113-Sentence-1131 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "The tree on the right is then obtained by applying Fˆ∗!T1."@en ;
    askg-onto:inSentence "The tree on the right is then obtained by applying Fˆ∗!T1."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-f%CB%86t1,
        askg-data:Entity-the_tree .

askg-data:Paper-ae04d54115630f9e-Section-11-Paragraph-113-Sentence-1132 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "This erases the information on non-blocked words, so that only the information that ǫ and 1 are accepted remains; this yields the extension semantics [11,4], i.e."@en ;
    askg-onto:inSentence "This erases the information on non-blocked words, so that only the information that ǫ and 1 are accepted remains; this yields the extension semantics [11,4], i.e."^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-%C7%AB_and_1,
        askg-data:Entity-extension_semantics,
        askg-data:Entity-information,
        askg-data:Entity-non-blocked_words .

askg-data:Paper-ae04d54115630f9e-Section-11-Paragraph-113-Sentence-1133 a askg-onto:Sentence ;
    rdfs:label "Sentence 3"@en ;
    domo:Text "language semantics of the automaton, as formally stated in Theorem 9."@en ;
    askg-onto:inSentence "language semantics of the automaton, as formally stated in Theorem 9."^^xsd:string ;
    askg-onto:index "3"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-automaton,
        askg-data:Entity-language_semantics,
        askg-data:Entity-language_semantics_of_the_automaton,
        askg-data:Entity-theorem_9 .

askg-data:Paper-ae04d54115630f9e-Section-11-Paragraph-113-Sentence-1134 a askg-onto:Sentence ;
    rdfs:label "Sentence 4"@en ;
    domo:Text "As noted already in Section 4, if we move to nonblocking non-deterministic automata, then α-trace equivalence coincides directly with language equivalence - note that in this case, T is non-empty powerset, so that !T1 is a bijection, i.e."@en ;
    askg-onto:inSentence "As noted already in Section 4, if we move to nonblocking non-deterministic automata, then α-trace equivalence coincides directly with language equivalence - note that in this case, T is non-empty powerset, so that !T1 is a bijection, i.e."^^xsd:string ;
    askg-onto:index "4"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-%CE%B1-trace_equivalence,
        askg-data:Entity-bijection,
        askg-data:Entity-language_equivalence,
        askg-data:Entity-non-empty_powerset,
        askg-data:Entity-t,
        askg-data:Entity-t1 .

askg-data:Paper-ae04d54115630f9e-Section-11-Paragraph-113-Sentence-1135 a askg-onto:Sentence ;
    rdfs:label "Sentence 5"@en ;
    domo:Text "postcomposing the α-trace sequence with Fˆ∗!T1 does not lose information."@en ;
    askg-onto:inSentence "postcomposing the α-trace sequence with Fˆ∗!T1 does not lose information."^^xsd:string ;
    askg-onto:index "5"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-%CE%B1-trace_sequence,
        askg-data:Entity-f%CB%86t1 .

askg-data:Paper-ae04d54115630f9e-Section-11-Paragraph-113-Sentence-1136 a askg-onto:Sentence ;
    rdfs:label "Sentence 6"@en ;
    domo:Text "Informally, this is clear as non-acceptance of words due to deadlock never happens in a non-blocking nondeterministic automaton."@en ;
    askg-onto:inSentence "Informally, this is clear as non-acceptance of words due to deadlock never happens in a non-blocking nondeterministic automaton."^^xsd:string ;
    askg-onto:index "6"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-automaton,
        askg-data:Entity-deadlock,
        askg-data:Entity-non-acceptance_of_words,
        askg-data:Entity-non-blocking_nondeterministic_automaton .

askg-data:Paper-ae04d54115630f9e-Section-11-Paragraph-114 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 4"@en ;
    domo:Text "Fixpoint Definitions Trace semantics, and associated linear-time logics, are also considered in [5]. The framework considered in *op.cit.* is similar to that of [8] in that it applies to systems of type X → **T F X** where T is a monad (that describes the branching) and F a polynomial endofunctor (modelling the traces). The monad T is required to be commutative and partially additive, thus inducing a partial additive semiring structure on T 1. In the examples of interest, one recovers the monad T as induced by this semiring structure."@en ;
    askg-onto:hasSentence askg-data:Paper-ae04d54115630f9e-Section-11-Paragraph-114-Sentence-1141,
        askg-data:Paper-ae04d54115630f9e-Section-11-Paragraph-114-Sentence-1142,
        askg-data:Paper-ae04d54115630f9e-Section-11-Paragraph-114-Sentence-1143,
        askg-data:Paper-ae04d54115630f9e-Section-11-Paragraph-114-Sentence-1144 ;
    askg-onto:index "4"^^xsd:int .

askg-data:Paper-ae04d54115630f9e-Section-11-Paragraph-114-Sentence-1141 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "Fixpoint Definitions Trace semantics, and associated linear-time logics, are also considered in [5]."@en ;
    askg-onto:inSentence "Fixpoint Definitions Trace semantics, and associated linear-time logics, are also considered in [5]."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-fixpoint_definitions,
        askg-data:Entity-linear-time_logics .

askg-data:Paper-ae04d54115630f9e-Section-11-Paragraph-114-Sentence-1142 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "The framework considered in *op.cit.* is similar to that of [8] in that it applies to systems of type X → **T F X** where T is a monad (that describes the branching) and F a polynomial endofunctor (modelling the traces)."@en ;
    askg-onto:inSentence "The framework considered in *op.cit.* is similar to that of [8] in that it applies to systems of type X → **T F X** where T is a monad (that describes the branching) and F a polynomial endofunctor (modelling the traces)."^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-f,
        askg-data:Entity-framework,
        askg-data:Entity-monad,
        askg-data:Entity-polynomial_endofunctor,
        askg-data:Entity-systems_of_type_x__t_f_x,
        askg-data:Entity-t .

askg-data:Paper-ae04d54115630f9e-Section-11-Paragraph-114-Sentence-1143 a askg-onto:Sentence ;
    rdfs:label "Sentence 3"@en ;
    domo:Text "The monad T is required to be commutative and partially additive, thus inducing a partial additive semiring structure on T 1."@en ;
    askg-onto:inSentence "The monad T is required to be commutative and partially additive, thus inducing a partial additive semiring structure on T 1."^^xsd:string ;
    askg-onto:index "3"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-commutative,
        askg-data:Entity-monad_t,
        askg-data:Entity-partial_additive_semiring_structure,
        askg-data:Entity-semiring .

askg-data:Paper-ae04d54115630f9e-Section-11-Paragraph-114-Sentence-1144 a askg-onto:Sentence ;
    rdfs:label "Sentence 4"@en ;
    domo:Text "In the examples of interest, one recovers the monad T as induced by this semiring structure."@en ;
    askg-onto:inSentence "In the examples of interest, one recovers the monad T as induced by this semiring structure."^^xsd:string ;
    askg-onto:index "4"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-monad_t,
        askg-data:Entity-semiring_structure .

askg-data:Paper-ae04d54115630f9e-Section-11-Paragraph-115 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 5"@en ;
    domo:Text "Given a system (X, f : X → **T F X**), trace semantics then arises as a T 1-valued relation R : X × Z → T 1 where Z = νF is the final coalgebra of the functor F defining traces. For this to be well-defined, one additionally requires that the semiring T 1 has suprema of chains, with order defined in the standard way."@en ;
    askg-onto:hasSentence askg-data:Paper-ae04d54115630f9e-Section-11-Paragraph-115-Sentence-1151,
        askg-data:Paper-ae04d54115630f9e-Section-11-Paragraph-115-Sentence-1152 ;
    askg-onto:index "5"^^xsd:int .

askg-data:Paper-ae04d54115630f9e-Section-11-Paragraph-115-Sentence-1151 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "Given a system (X, f : X → **T F X**), trace semantics then arises as a T 1-valued relation R : X × Z → T 1 where Z = νF is the final coalgebra of the functor F defining traces."@en ;
    askg-onto:inSentence "Given a system (X, f : X → **T F X**), trace semantics then arises as a T 1-valued relation R : X × Z → T 1 where Z = νF is the final coalgebra of the functor F defining traces."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-%CE%BDf,
        askg-data:Entity-f,
        askg-data:Entity-r,
        askg-data:Entity-t_1,
        askg-data:Entity-t_f_x,
        askg-data:Entity-traces,
        askg-data:Entity-x,
        askg-data:Entity-z .

askg-data:Paper-ae04d54115630f9e-Section-11-Paragraph-115-Sentence-1152 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "For this to be well-defined, one additionally requires that the semiring T 1 has suprema of chains, with order defined in the standard way."@en ;
    askg-onto:inSentence "For this to be well-defined, one additionally requires that the semiring T 1 has suprema of chains, with order defined in the standard way."^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-semiring_t_1,
        askg-data:Entity-suprema_of_chains .

askg-data:Paper-ae04d54115630f9e-Section-11-Paragraph-116 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 6"@en ;
    domo:Text "The crucial difference to our approach is that trace semantics is defined coinductively on the *infinite unfolding* of the functor F defining the shape of traces, whereas our definition is *inductive* and based on *finite unfoldings*."@en ;
    askg-onto:hasSentence askg-data:Paper-ae04d54115630f9e-Section-11-Paragraph-116-Sentence-1161 ;
    askg-onto:index "6"^^xsd:int .

askg-data:Paper-ae04d54115630f9e-Section-11-Paragraph-116-Sentence-1161 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "The crucial difference to our approach is that trace semantics is defined coinductively on the *infinite unfolding* of the functor F defining the shape of traces, whereas our definition is *inductive* and based on *finite unfoldings*."@en ;
    askg-onto:inSentence "The crucial difference to our approach is that trace semantics is defined coinductively on the *infinite unfolding* of the functor F defining the shape of traces, whereas our definition is *inductive* and based on *finite unfoldings*."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-finite_unfoldings,
        askg-data:Entity-functor_f,
        askg-data:Entity-inductive,
        askg-data:Entity-infinite_unfolding,
        askg-data:Entity-our_definition,
        askg-data:Entity-trace_semantics,
        askg-data:Entity-traces .

askg-data:Paper-ae04d54115630f9e-Section-11-Paragraph-117 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 7"@en ;
    domo:Text "The difference becomes apparent when looking at examples. For labelled transition systems X → P(A × X), the trace semantics of *op.cit.* is a function X → P(Aw) that maps x to the set of maximal traces, and two states are trace equivalent if they have the same set of *infinite* traces. This contrasts with our treatment where equivalent states have the same *finite* traces. Similarly, for generative probabilistic systems, i.e. systems of shape X → D(A × X) where D is the discrete distributions functor, *op.cit.* the trace semantics obtained in *op.cit.* associates probabilities to maximal (infinite) traces whereas our treatment is centered around probabilities of finite prefixes. In summary, the main conceptual difference between [5] and our approach is that between infinite and finite traces. Technically, this difference is manifest in the coinductive definition of op.cit. whereas our approach defines traces inductively."@en ;
    askg-onto:hasSentence askg-data:Paper-ae04d54115630f9e-Section-11-Paragraph-117-Sentence-1171,
        askg-data:Paper-ae04d54115630f9e-Section-11-Paragraph-117-Sentence-1172,
        askg-data:Paper-ae04d54115630f9e-Section-11-Paragraph-117-Sentence-1173,
        askg-data:Paper-ae04d54115630f9e-Section-11-Paragraph-117-Sentence-1174,
        askg-data:Paper-ae04d54115630f9e-Section-11-Paragraph-117-Sentence-1175,
        askg-data:Paper-ae04d54115630f9e-Section-11-Paragraph-117-Sentence-1176,
        askg-data:Paper-ae04d54115630f9e-Section-11-Paragraph-117-Sentence-1177,
        askg-data:Paper-ae04d54115630f9e-Section-11-Paragraph-117-Sentence-1178 ;
    askg-onto:index "7"^^xsd:int .

askg-data:Paper-ae04d54115630f9e-Section-11-Paragraph-117-Sentence-1171 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "The difference becomes apparent when looking at examples."@en ;
    askg-onto:inSentence "The difference becomes apparent when looking at examples."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-difference,
        askg-data:Entity-examples .

askg-data:Paper-ae04d54115630f9e-Section-11-Paragraph-117-Sentence-1172 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "For labelled transition systems X → P(A × X), the trace semantics of *op.cit.* is a function X → P(Aw) that maps x to the set of maximal traces, and two states are trace equivalent if they have the same set of *infinite* traces."@en ;
    askg-onto:inSentence "For labelled transition systems X → P(A × X), the trace semantics of *op.cit.* is a function X → P(Aw) that maps x to the set of maximal traces, and two states are trace equivalent if they have the same set of *infinite* traces."^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-set_of_maximal_traces,
        askg-data:Entity-trace_equivalent,
        askg-data:Entity-two_states,
        askg-data:Entity-x .

askg-data:Paper-ae04d54115630f9e-Section-11-Paragraph-117-Sentence-1173 a askg-onto:Sentence ;
    rdfs:label "Sentence 3"@en ;
    domo:Text "This contrasts with our treatment where equivalent states have the same *finite* traces."@en ;
    askg-onto:inSentence "This contrasts with our treatment where equivalent states have the same *finite* traces."^^xsd:string ;
    askg-onto:index "3"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-finite_traces,
        askg-data:Entity-states .

askg-data:Paper-ae04d54115630f9e-Section-11-Paragraph-117-Sentence-1174 a askg-onto:Sentence ;
    rdfs:label "Sentence 4"@en ;
    domo:Text "Similarly, for generative probabilistic systems, i.e."@en ;
    askg-onto:inSentence "Similarly, for generative probabilistic systems, i.e."^^xsd:string ;
    askg-onto:index "4"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-generative_probabilistic_systems,
        askg-data:Entity-probabilistic_system .

askg-data:Paper-ae04d54115630f9e-Section-11-Paragraph-117-Sentence-1175 a askg-onto:Sentence ;
    rdfs:label "Sentence 5"@en ;
    domo:Text "systems of shape X → D(A × X) where D is the discrete distributions functor, *op.cit.* the trace semantics obtained in *op.cit.* associates probabilities to maximal (infinite) traces whereas our treatment is centered around probabilities of finite prefixes."@en ;
    askg-onto:inSentence "systems of shape X → D(A × X) where D is the discrete distributions functor, *op.cit.* the trace semantics obtained in *op.cit.* associates probabilities to maximal (infinite) traces whereas our treatment is centered around probabilities of finite prefixes."^^xsd:string ;
    askg-onto:index "5"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-associating_probabilities_to_maximal_infinite_traces,
        askg-data:Entity-d,
        askg-data:Entity-da__x,
        askg-data:Entity-discrete_distributions_functor,
        askg-data:Entity-our_treatment,
        askg-data:Entity-probabilities_of_finite_prefixes,
        askg-data:Entity-systems_of_shape_x,
        askg-data:Entity-trace_semantics .

askg-data:Paper-ae04d54115630f9e-Section-11-Paragraph-117-Sentence-1176 a askg-onto:Sentence ;
    rdfs:label "Sentence 6"@en ;
    domo:Text "In summary, the main conceptual difference between [5] and our approach is that between infinite and finite traces."@en ;
    askg-onto:inSentence "In summary, the main conceptual difference between [5] and our approach is that between infinite and finite traces."^^xsd:string ;
    askg-onto:index "6"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-finite_traces,
        askg-data:Entity-infinite_traces,
        askg-data:Entity-our_approach .

askg-data:Paper-ae04d54115630f9e-Section-11-Paragraph-117-Sentence-1177 a askg-onto:Sentence ;
    rdfs:label "Sentence 7"@en ;
    domo:Text "Technically, this difference is manifest in the coinductive definition of op.cit."@en ;
    askg-onto:inSentence "Technically, this difference is manifest in the coinductive definition of op.cit."^^xsd:string ;
    askg-onto:index "7"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-coinductive_definition,
        askg-data:Entity-opcit .

askg-data:Paper-ae04d54115630f9e-Section-11-Paragraph-117-Sentence-1178 a askg-onto:Sentence ;
    rdfs:label "Sentence 8"@en ;
    domo:Text "whereas our approach defines traces inductively."@en ;
    askg-onto:inSentence "whereas our approach defines traces inductively."^^xsd:string ;
    askg-onto:index "8"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-our_approach,
        askg-data:Entity-traces .

askg-data:Paper-ae04d54115630f9e-Section-12 a askg-onto:Section ;
    rdfs:label "Section 12"@en ;
    domo:Text "6 Conclusions"@en ;
    askg-onto:hasParagraph askg-data:Paper-ae04d54115630f9e-Section-12-Paragraph-121,
        askg-data:Paper-ae04d54115630f9e-Section-12-Paragraph-122,
        askg-data:Paper-ae04d54115630f9e-Section-12-Paragraph-123,
        askg-data:Paper-ae04d54115630f9e-Section-12-Paragraph-124,
        askg-data:Paper-ae04d54115630f9e-Section-12-Paragraph-125 ;
    askg-onto:index "12"^^xsd:int ;
    askg-onto:level "2"^^xsd:int .

askg-data:Paper-ae04d54115630f9e-Section-12-Paragraph-121 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 1"@en ;
    domo:Text "One of the main important aspects of the general theory of coalgebra is a uniform theory of strong bisimulation. In coalgebraic terms, strong bisimulation is a simple concept, readily defined, supports a rich theory and instantiates to the natural and known notions for concretely given transition types. Instead of re-establishing facts about strong bisimulation on a case-by-case basis, separately for each type of transition system, the coalgebraic approach provides a general theory of which specific results for concretely given systems are mere instances: a coalgebraic success story."@en ;
    askg-onto:hasSentence askg-data:Paper-ae04d54115630f9e-Section-12-Paragraph-121-Sentence-1211,
        askg-data:Paper-ae04d54115630f9e-Section-12-Paragraph-121-Sentence-1212,
        askg-data:Paper-ae04d54115630f9e-Section-12-Paragraph-121-Sentence-1213 ;
    askg-onto:index "1"^^xsd:int .

askg-data:Paper-ae04d54115630f9e-Section-12-Paragraph-121-Sentence-1211 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "One of the main important aspects of the general theory of coalgebra is a uniform theory of strong bisimulation."@en ;
    askg-onto:inSentence "One of the main important aspects of the general theory of coalgebra is a uniform theory of strong bisimulation."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-general_theory_of_coalgebra,
        askg-data:Entity-uniform_theory_of_strong_bisimulation .

askg-data:Paper-ae04d54115630f9e-Section-12-Paragraph-121-Sentence-1212 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "In coalgebraic terms, strong bisimulation is a simple concept, readily defined, supports a rich theory and instantiates to the natural and known notions for concretely given transition types."@en ;
    askg-onto:inSentence "In coalgebraic terms, strong bisimulation is a simple concept, readily defined, supports a rich theory and instantiates to the natural and known notions for concretely given transition types."^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-concept,
        askg-data:Entity-concretely_given_transition_types,
        askg-data:Entity-known_notions,
        askg-data:Entity-natural_and_known_notions,
        askg-data:Entity-natural_notions,
        askg-data:Entity-rich_theory,
        askg-data:Entity-strong_bisimulation .

askg-data:Paper-ae04d54115630f9e-Section-12-Paragraph-121-Sentence-1213 a askg-onto:Sentence ;
    rdfs:label "Sentence 3"@en ;
    domo:Text "Instead of re-establishing facts about strong bisimulation on a case-by-case basis, separately for each type of transition system, the coalgebraic approach provides a general theory of which specific results for concretely given systems are mere instances: a coalgebraic success story."@en ;
    askg-onto:inSentence "Instead of re-establishing facts about strong bisimulation on a case-by-case basis, separately for each type of transition system, the coalgebraic approach provides a general theory of which specific results for concretely given systems are mere instances: a coalgebraic success story."^^xsd:string ;
    askg-onto:index "3"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-coalgebraic_approach,
        askg-data:Entity-concretely_given_systems,
        askg-data:Entity-general_theory,
        askg-data:Entity-mere_instances .

askg-data:Paper-ae04d54115630f9e-Section-12-Paragraph-122 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 2"@en ;
    domo:Text "The question about whether a similar success story for trace equivalence can also be told in a coalgebraic setting has been the subject of numerous papers (discussed in the previous section in detail) but has so far not received a satisfactory answer."@en ;
    askg-onto:hasSentence askg-data:Paper-ae04d54115630f9e-Section-12-Paragraph-122-Sentence-1221 ;
    askg-onto:index "2"^^xsd:int .

askg-data:Paper-ae04d54115630f9e-Section-12-Paragraph-122-Sentence-1221 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "The question about whether a similar success story for trace equivalence can also be told in a coalgebraic setting has been the subject of numerous papers (discussed in the previous section in detail) but has so far not received a satisfactory answer."@en ;
    askg-onto:inSentence "The question about whether a similar success story for trace equivalence can also be told in a coalgebraic setting has been the subject of numerous papers (discussed in the previous section in detail) but has so far not received a satisfactory answer."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-coalgebraic_setting,
        askg-data:Entity-numerous_papers,
        askg-data:Entity-satisfactory_answer,
        askg-data:Entity-trace_equivalence .

askg-data:Paper-ae04d54115630f9e-Section-12-Paragraph-123 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 3"@en ;
    domo:Text "One of the reasons why trace semantics has so far been a more elusive concept is the fact that - even for concretely given systems such as labelled transition systems with explicit termination - there are many, equally natural, formulations of trace equivalence. This suggests that trace equivalence, by its very nature, cannot be captured by one general definition, but needs an additional parameter that defines the precise nature of traces one wants to capture."@en ;
    askg-onto:hasSentence askg-data:Paper-ae04d54115630f9e-Section-12-Paragraph-123-Sentence-1231,
        askg-data:Paper-ae04d54115630f9e-Section-12-Paragraph-123-Sentence-1232 ;
    askg-onto:index "3"^^xsd:int .

askg-data:Paper-ae04d54115630f9e-Section-12-Paragraph-123-Sentence-1231 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "One of the reasons why trace semantics has so far been a more elusive concept is the fact that - even for concretely given systems such as labelled transition systems with explicit termination - there are many, equally natural, formulations of trace equivalence."@en ;
    askg-onto:inSentence "One of the reasons why trace semantics has so far been a more elusive concept is the fact that - even for concretely given systems such as labelled transition systems with explicit termination - there are many, equally natural, formulations of trace equivalence."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-concept,
        askg-data:Entity-labelled_transition_systems,
        askg-data:Entity-system,
        askg-data:Entity-trace_equivalence,
        askg-data:Entity-trace_semantics .

askg-data:Paper-ae04d54115630f9e-Section-12-Paragraph-123-Sentence-1232 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "This suggests that trace equivalence, by its very nature, cannot be captured by one general definition, but needs an additional parameter that defines the precise nature of traces one wants to capture."@en ;
    askg-onto:inSentence "This suggests that trace equivalence, by its very nature, cannot be captured by one general definition, but needs an additional parameter that defines the precise nature of traces one wants to capture."^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-an_additional_parameter,
        askg-data:Entity-one_general_definition,
        askg-data:Entity-the_precise_nature_of_traces,
        askg-data:Entity-trace_equivalence,
        askg-data:Entity-traces .

askg-data:Paper-ae04d54115630f9e-Section-12-Paragraph-124 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 4"@en ;
    domo:Text "In contrast to other approaches in the literature, we account for this fact by parametrising trace semantics by an embedding of a functor (that defines the coalgebraic type of system under consideration) into a monad (that allows us to sequence transitions). As a consequence, our definition is more flexible, and subsumes existing notions. Conceptually speaking, this manifests itself in the fact that other approaches impose various technical conditions like order enrichment or partial additivity of a monad that are geared towards capturing a *specific* notion of trace equivalence, whereas our definition is parametrised to capture the entire range of the linear-time branching-time spectrum. This is evidenced by Proposition 7 that shows that (even) strong bisimulation is a specific instance of our parameterised definition."@en ;
    askg-onto:hasSentence askg-data:Paper-ae04d54115630f9e-Section-12-Paragraph-124-Sentence-1241,
        askg-data:Paper-ae04d54115630f9e-Section-12-Paragraph-124-Sentence-1242,
        askg-data:Paper-ae04d54115630f9e-Section-12-Paragraph-124-Sentence-1243,
        askg-data:Paper-ae04d54115630f9e-Section-12-Paragraph-124-Sentence-1244 ;
    askg-onto:index "4"^^xsd:int .

askg-data:Paper-ae04d54115630f9e-Section-12-Paragraph-124-Sentence-1241 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "In contrast to other approaches in the literature, we account for this fact by parametrising trace semantics by an embedding of a functor (that defines the coalgebraic type of system under consideration) into a monad (that allows us to sequence transitions)."@en ;
    askg-onto:inSentence "In contrast to other approaches in the literature, we account for this fact by parametrising trace semantics by an embedding of a functor (that defines the coalgebraic type of system under consideration) into a monad (that allows us to sequence transitions)."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-coalgebraic_type_of_system,
        askg-data:Entity-embedding_of_a_functor,
        askg-data:Entity-monad,
        askg-data:Entity-trace_semantics,
        askg-data:Entity-transitions .

askg-data:Paper-ae04d54115630f9e-Section-12-Paragraph-124-Sentence-1242 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "As a consequence, our definition is more flexible, and subsumes existing notions."@en ;
    askg-onto:inSentence "As a consequence, our definition is more flexible, and subsumes existing notions."^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-definition,
        askg-data:Entity-existing_notions .

askg-data:Paper-ae04d54115630f9e-Section-12-Paragraph-124-Sentence-1243 a askg-onto:Sentence ;
    rdfs:label "Sentence 3"@en ;
    domo:Text "Conceptually speaking, this manifests itself in the fact that other approaches impose various technical conditions like order enrichment or partial additivity of a monad that are geared towards capturing a *specific* notion of trace equivalence, whereas our definition is parametrised to capture the entire range of the linear-time branching-time spectrum."@en ;
    askg-onto:inSentence "Conceptually speaking, this manifests itself in the fact that other approaches impose various technical conditions like order enrichment or partial additivity of a monad that are geared towards capturing a *specific* notion of trace equivalence, whereas our definition is parametrised to capture the entire range of the linear-time branching-time spectrum."^^xsd:string ;
    askg-onto:index "3"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-approaches,
        askg-data:Entity-definition,
        askg-data:Entity-linear-time_branching-time_spectrum,
        askg-data:Entity-monad,
        askg-data:Entity-order_enrichment,
        askg-data:Entity-partial_additivity,
        askg-data:Entity-technical_conditions .

askg-data:Paper-ae04d54115630f9e-Section-12-Paragraph-124-Sentence-1244 a askg-onto:Sentence ;
    rdfs:label "Sentence 4"@en ;
    domo:Text "This is evidenced by Proposition 7 that shows that (even) strong bisimulation is a specific instance of our parameterised definition."@en ;
    askg-onto:inSentence "This is evidenced by Proposition 7 that shows that (even) strong bisimulation is a specific instance of our parameterised definition."^^xsd:string ;
    askg-onto:index "4"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-proposition_7,
        askg-data:Entity-strong_bisimulation .

askg-data:Paper-ae04d54115630f9e-Section-12-Paragraph-125 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 5"@en ;
    domo:Text "Technically, we have presented a simplified notion of a semantics of finite traces for coalgebras. This novel account allows us to deal with new examples and subsumes previous proposals of a semantics of finite traces. Important points for future work include a generalisation to behavioural preorders, as well as appropriate logics that characterise these preorders and ensuing equivalences."@en ;
    askg-onto:hasSentence askg-data:Paper-ae04d54115630f9e-Section-12-Paragraph-125-Sentence-1251,
        askg-data:Paper-ae04d54115630f9e-Section-12-Paragraph-125-Sentence-1252,
        askg-data:Paper-ae04d54115630f9e-Section-12-Paragraph-125-Sentence-1253 ;
    askg-onto:index "5"^^xsd:int .

askg-data:Paper-ae04d54115630f9e-Section-12-Paragraph-125-Sentence-1251 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "Technically, we have presented a simplified notion of a semantics of finite traces for coalgebras."@en ;
    askg-onto:inSentence "Technically, we have presented a simplified notion of a semantics of finite traces for coalgebras."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-coalgebras,
        askg-data:Entity-semantics_of_finite_traces .

askg-data:Paper-ae04d54115630f9e-Section-12-Paragraph-125-Sentence-1252 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "This novel account allows us to deal with new examples and subsumes previous proposals of a semantics of finite traces."@en ;
    askg-onto:inSentence "This novel account allows us to deal with new examples and subsumes previous proposals of a semantics of finite traces."^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-new_examples,
        askg-data:Entity-previous_proposals,
        askg-data:Entity-semantics_of_finite_traces .

askg-data:Paper-ae04d54115630f9e-Section-12-Paragraph-125-Sentence-1253 a askg-onto:Sentence ;
    rdfs:label "Sentence 3"@en ;
    domo:Text "Important points for future work include a generalisation to behavioural preorders, as well as appropriate logics that characterise these preorders and ensuing equivalences."@en ;
    askg-onto:inSentence "Important points for future work include a generalisation to behavioural preorders, as well as appropriate logics that characterise these preorders and ensuing equivalences."^^xsd:string ;
    askg-onto:index "3"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-appropriate_logics,
        askg-data:Entity-behavioural_preorders,
        askg-data:Entity-equivalences .

askg-data:Paper-ae04d54115630f9e-Section-13 a askg-onto:Section ;
    rdfs:label "Section 13"@en ;
    domo:Text "References"@en ;
    askg-onto:hasParagraph askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-131,
        askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-1310,
        askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-1311,
        askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-1312,
        askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-1313,
        askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-1314,
        askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-1315,
        askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-1316,
        askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-132,
        askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-133,
        askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-134,
        askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-135,
        askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-136,
        askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-137,
        askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-138,
        askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-139 ;
    askg-onto:index "13"^^xsd:int ;
    askg-onto:level "2"^^xsd:int .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-131 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 1"@en ;
    domo:Text "1. L. Aceto, A. Ing´olfsd´ottir, K. Larsen, and J. Srba. Reactive systems: modelling, specification and verification. Cambridge University Press, 2007."@en ;
    askg-onto:hasSentence askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-131-Sentence-1311,
        askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-131-Sentence-1312,
        askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-131-Sentence-1313,
        askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-131-Sentence-1314,
        askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-131-Sentence-1315,
        askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-131-Sentence-1316,
        askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-131-Sentence-1317,
        askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-131-Sentence-1318 ;
    askg-onto:index "1"^^xsd:int .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-131-Sentence-1311 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "1."@en ;
    askg-onto:inSentence "1."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-algorithm,
        askg-data:Entity-concept,
        askg-data:Entity-data,
        askg-data:Entity-dataset,
        askg-data:Entity-field,
        askg-data:Entity-method,
        askg-data:Entity-research,
        askg-data:Entity-result,
        askg-data:Entity-study,
        askg-data:Entity-triple .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-131-Sentence-1312 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "L."@en ;
    askg-onto:inSentence "L."^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-l,
        askg-data:Entity-unknown .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-131-Sentence-1313 a askg-onto:Sentence ;
    rdfs:label "Sentence 3"@en ;
    domo:Text "Aceto, A."@en ;
    askg-onto:inSentence "Aceto, A."^^xsd:string ;
    askg-onto:index "3"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-aceto_a,
        askg-data:Entity-author .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-131-Sentence-1314 a askg-onto:Sentence ;
    rdfs:label "Sentence 4"@en ;
    domo:Text "Ing´olfsd´ottir, K."@en ;
    askg-onto:inSentence "Ing´olfsd´ottir, K."^^xsd:string ;
    askg-onto:index "4"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-ingolfsdottir_k,
        askg-data:Entity-publication .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-131-Sentence-1315 a askg-onto:Sentence ;
    rdfs:label "Sentence 5"@en ;
    domo:Text "Larsen, and J."@en ;
    askg-onto:inSentence "Larsen, and J."^^xsd:string ;
    askg-onto:index "5"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-author,
        askg-data:Entity-j,
        askg-data:Entity-larsen .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-131-Sentence-1316 a askg-onto:Sentence ;
    rdfs:label "Sentence 6"@en ;
    domo:Text "Srba."@en ;
    askg-onto:inSentence "Srba."^^xsd:string ;
    askg-onto:index "6"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-person,
        askg-data:Entity-srba .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-131-Sentence-1317 a askg-onto:Sentence ;
    rdfs:label "Sentence 7"@en ;
    domo:Text "Reactive systems: modelling, specification and verification."@en ;
    askg-onto:inSentence "Reactive systems: modelling, specification and verification."^^xsd:string ;
    askg-onto:index "7"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-modelling,
        askg-data:Entity-reactive_systems,
        askg-data:Entity-specification,
        askg-data:Entity-verification .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-131-Sentence-1318 a askg-onto:Sentence ;
    rdfs:label "Sentence 8"@en ;
    domo:Text "Cambridge University Press, 2007."@en ;
    askg-onto:inSentence "Cambridge University Press, 2007."^^xsd:string ;
    askg-onto:index "8"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-2007,
        askg-data:Entity-cambridge_university_press .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-1310 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 10"@en ;
    domo:Text "12. M. Kelly. A unified treatment of transfinite constructions for free algebras, free monoids, colimits, associated sheaves, and so on. *Bull. Austral. Math. Soc.*, 22:1–83, 1980."@en ;
    askg-onto:hasSentence askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-1310-Sentence-13101,
        askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-1310-Sentence-13102,
        askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-1310-Sentence-13103,
        askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-1310-Sentence-13104,
        askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-1310-Sentence-13105,
        askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-1310-Sentence-13106,
        askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-1310-Sentence-13107,
        askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-1310-Sentence-13108 ;
    askg-onto:index "10"^^xsd:int .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-1310-Sentence-13101 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "12."@en ;
    askg-onto:inSentence "12."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-12,
        askg-data:Entity-number .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-1310-Sentence-13102 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "M."@en ;
    askg-onto:inSentence "M."^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-author,
        askg-data:Entity-m .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-1310-Sentence-13103 a askg-onto:Sentence ;
    rdfs:label "Sentence 3"@en ;
    domo:Text "Kelly."@en ;
    askg-onto:inSentence "Kelly."^^xsd:string ;
    askg-onto:index "3"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-kelly,
        askg-data:Entity-person .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-1310-Sentence-13104 a askg-onto:Sentence ;
    rdfs:label "Sentence 4"@en ;
    domo:Text "A unified treatment of transfinite constructions for free algebras, free monoids, colimits, associated sheaves, and so on."@en ;
    askg-onto:inSentence "A unified treatment of transfinite constructions for free algebras, free monoids, colimits, associated sheaves, and so on."^^xsd:string ;
    askg-onto:index "4"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-associated_sheaves,
        askg-data:Entity-colimits,
        askg-data:Entity-free_algebras,
        askg-data:Entity-free_monoids,
        askg-data:Entity-transfinite_constructions .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-1310-Sentence-13105 a askg-onto:Sentence ;
    rdfs:label "Sentence 5"@en ;
    domo:Text "*Bull."@en ;
    askg-onto:inSentence "*Bull."^^xsd:string ;
    askg-onto:index "5"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-animal,
        askg-data:Entity-bull .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-1310-Sentence-13106 a askg-onto:Sentence ;
    rdfs:label "Sentence 6"@en ;
    domo:Text "Austral."@en ;
    askg-onto:inSentence "Austral."^^xsd:string ;
    askg-onto:index "6"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-austral,
        askg-data:Entity-company .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-1310-Sentence-13107 a askg-onto:Sentence ;
    rdfs:label "Sentence 7"@en ;
    domo:Text "Math."@en ;
    askg-onto:inSentence "Math."^^xsd:string ;
    askg-onto:index "7"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-concept,
        askg-data:Entity-math .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-1310-Sentence-13108 a askg-onto:Sentence ;
    rdfs:label "Sentence 8"@en ;
    domo:Text "Soc.*, 22:1–83, 1980."@en ;
    askg-onto:inSentence "Soc.*, 22:1–83, 1980."^^xsd:string ;
    askg-onto:index "8"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-soc .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-1311 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 11"@en ;
    domo:Text "13. C. Kissig and A. Kurz. Generic trace logics. arXiv preprint 1103.3239, 2011. 14. J. Power and D. Turi. A coalgebraic foundation for linear time semantics. In Coalgebraic Methods in Computer Science, CMCS 1999, vol. 29 of *ENTCS*, pp. 259–274. Elsevier, 1999."@en ;
    askg-onto:hasSentence askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-1311-Sentence-13111,
        askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-1311-Sentence-131110,
        askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-1311-Sentence-131111,
        askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-1311-Sentence-131112,
        askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-1311-Sentence-131113,
        askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-1311-Sentence-131114,
        askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-1311-Sentence-131115,
        askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-1311-Sentence-13112,
        askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-1311-Sentence-13113,
        askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-1311-Sentence-13114,
        askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-1311-Sentence-13115,
        askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-1311-Sentence-13116,
        askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-1311-Sentence-13117,
        askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-1311-Sentence-13118,
        askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-1311-Sentence-13119 ;
    askg-onto:index "11"^^xsd:int .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-1311-Sentence-13111 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "13."@en ;
    askg-onto:inSentence "13."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-concept,
        askg-data:Entity-triple .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-1311-Sentence-131110 a askg-onto:Sentence ;
    rdfs:label "Sentence 10"@en ;
    domo:Text "Turi."@en ;
    askg-onto:inSentence "Turi."^^xsd:string ;
    askg-onto:index "10"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-platform,
        askg-data:Entity-turi .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-1311-Sentence-131111 a askg-onto:Sentence ;
    rdfs:label "Sentence 11"@en ;
    domo:Text "A coalgebraic foundation for linear time semantics."@en ;
    askg-onto:inSentence "A coalgebraic foundation for linear time semantics."^^xsd:string ;
    askg-onto:index "11"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-coalgebraic_foundation,
        askg-data:Entity-linear_time_semantics .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-1311-Sentence-131112 a askg-onto:Sentence ;
    rdfs:label "Sentence 12"@en ;
    domo:Text "In Coalgebraic Methods in Computer Science, CMCS 1999, vol."@en ;
    askg-onto:inSentence "In Coalgebraic Methods in Computer Science, CMCS 1999, vol."^^xsd:string ;
    askg-onto:index "12"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-cmcs_1999,
        askg-data:Entity-coalgebraic_methods_in_computer_science,
        askg-data:Entity-publication .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-1311-Sentence-131113 a askg-onto:Sentence ;
    rdfs:label "Sentence 13"@en ;
    domo:Text "29 of *ENTCS*, pp."@en ;
    askg-onto:inSentence "29 of *ENTCS*, pp."^^xsd:string ;
    askg-onto:index "13"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-29,
        askg-data:Entity-entcs .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-1311-Sentence-131114 a askg-onto:Sentence ;
    rdfs:label "Sentence 14"@en ;
    domo:Text "259–274."@en ;
    askg-onto:inSentence "259–274."^^xsd:string ;
    askg-onto:index "14"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-259274,
        askg-data:Entity-publication .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-1311-Sentence-131115 a askg-onto:Sentence ;
    rdfs:label "Sentence 15"@en ;
    domo:Text "Elsevier, 1999."@en ;
    askg-onto:inSentence "Elsevier, 1999."^^xsd:string ;
    askg-onto:index "15"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-1999,
        askg-data:Entity-elsevier .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-1311-Sentence-13112 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "C."@en ;
    askg-onto:inSentence "C."^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-c,
        askg-data:Entity-concept .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-1311-Sentence-13113 a askg-onto:Sentence ;
    rdfs:label "Sentence 3"@en ;
    domo:Text "Kissig and A."@en ;
    askg-onto:inSentence "Kissig and A."^^xsd:string ;
    askg-onto:index "3"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-a,
        askg-data:Entity-kissig .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-1311-Sentence-13114 a askg-onto:Sentence ;
    rdfs:label "Sentence 4"@en ;
    domo:Text "Kurz."@en ;
    askg-onto:inSentence "Kurz."^^xsd:string ;
    askg-onto:index "4"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-author,
        askg-data:Entity-kurz .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-1311-Sentence-13115 a askg-onto:Sentence ;
    rdfs:label "Sentence 5"@en ;
    domo:Text "Generic trace logics."@en ;
    askg-onto:inSentence "Generic trace logics."^^xsd:string ;
    askg-onto:index "5"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-concept,
        askg-data:Entity-generic_trace_logics .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-1311-Sentence-13116 a askg-onto:Sentence ;
    rdfs:label "Sentence 6"@en ;
    domo:Text "arXiv preprint 1103.3239, 2011."@en ;
    askg-onto:inSentence "arXiv preprint 1103.3239, 2011."^^xsd:string ;
    askg-onto:index "6"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-arxiv,
        askg-data:Entity-arxiv_preprint_11033239,
        askg-data:Entity-preprint_11033239,
        askg-data:Entity-publication .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-1311-Sentence-13117 a askg-onto:Sentence ;
    rdfs:label "Sentence 7"@en ;
    domo:Text "14."@en ;
    askg-onto:inSentence "14."^^xsd:string ;
    askg-onto:index "7"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-artificial_intelligence,
        askg-data:Entity-computer_science,
        askg-data:Entity-machine_learning,
        askg-data:Entity-natural_language_processing,
        askg-data:Entity-research_area,
        askg-data:Entity-university_of_california_berkeley .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-1311-Sentence-13118 a askg-onto:Sentence ;
    rdfs:label "Sentence 8"@en ;
    domo:Text "J."@en ;
    askg-onto:inSentence "J."^^xsd:string ;
    askg-onto:index "8"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-author,
        askg-data:Entity-j .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-1311-Sentence-13119 a askg-onto:Sentence ;
    rdfs:label "Sentence 9"@en ;
    domo:Text "Power and D."@en ;
    askg-onto:inSentence "Power and D."^^xsd:string ;
    askg-onto:index "9"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-d,
        askg-data:Entity-power .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-1312 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 12"@en ;
    domo:Text "15. H. Reichel. Behavioural equivalence a unifying concept for initial and final specification methods. In *Math. Models in Comp. Systems, Proc. 3rd Hungarian Comp. Sci. Conference*, pp. 27–39, 1981."@en ;
    askg-onto:hasSentence askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-1312-Sentence-13121,
        askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-1312-Sentence-131210,
        askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-1312-Sentence-131211,
        askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-1312-Sentence-13122,
        askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-1312-Sentence-13123,
        askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-1312-Sentence-13124,
        askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-1312-Sentence-13125,
        askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-1312-Sentence-13126,
        askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-1312-Sentence-13127,
        askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-1312-Sentence-13128,
        askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-1312-Sentence-13129 ;
    askg-onto:index "12"^^xsd:int .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-1312-Sentence-13121 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "15."@en ;
    askg-onto:inSentence "15."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-article,
        askg-data:Entity-author,
        askg-data:Entity-company,
        askg-data:Entity-method,
        askg-data:Entity-organization,
        askg-data:Entity-publication,
        askg-data:Entity-research_area,
        askg-data:Entity-research_group,
        askg-data:Entity-researcher,
        askg-data:Entity-scientist,
        askg-data:Entity-study,
        askg-data:Entity-university .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-1312-Sentence-131210 a askg-onto:Sentence ;
    rdfs:label "Sentence 10"@en ;
    domo:Text "Conference*, pp."@en ;
    askg-onto:inSentence "Conference*, pp."^^xsd:string ;
    askg-onto:index "10"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-conference,
        askg-data:Entity-publication .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-1312-Sentence-131211 a askg-onto:Sentence ;
    rdfs:label "Sentence 11"@en ;
    domo:Text "27–39, 1981."@en ;
    askg-onto:inSentence "27–39, 1981."^^xsd:string ;
    askg-onto:index "11"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-1981,
        askg-data:Entity-2739 .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-1312-Sentence-13122 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "H."@en ;
    askg-onto:inSentence "H."^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-h,
        askg-data:Entity-person .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-1312-Sentence-13123 a askg-onto:Sentence ;
    rdfs:label "Sentence 3"@en ;
    domo:Text "Reichel."@en ;
    askg-onto:inSentence "Reichel."^^xsd:string ;
    askg-onto:index "3"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-reichel .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-1312-Sentence-13124 a askg-onto:Sentence ;
    rdfs:label "Sentence 4"@en ;
    domo:Text "Behavioural equivalence a unifying concept for initial and final specification methods."@en ;
    askg-onto:inSentence "Behavioural equivalence a unifying concept for initial and final specification methods."^^xsd:string ;
    askg-onto:index "4"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-behavioural_equivalence,
        askg-data:Entity-initial_and_final_specification_methods .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-1312-Sentence-13125 a askg-onto:Sentence ;
    rdfs:label "Sentence 5"@en ;
    domo:Text "In *Math."@en ;
    askg-onto:inSentence "In *Math."^^xsd:string ;
    askg-onto:index "5"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-math,
        askg-data:Entity-mathematics .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-1312-Sentence-13126 a askg-onto:Sentence ;
    rdfs:label "Sentence 6"@en ;
    domo:Text "Models in Comp."@en ;
    askg-onto:inSentence "Models in Comp."^^xsd:string ;
    askg-onto:index "6"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-comp,
        askg-data:Entity-models .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-1312-Sentence-13127 a askg-onto:Sentence ;
    rdfs:label "Sentence 7"@en ;
    domo:Text "Systems, Proc."@en ;
    askg-onto:inSentence "Systems, Proc."^^xsd:string ;
    askg-onto:index "7"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-systems .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-1312-Sentence-13128 a askg-onto:Sentence ;
    rdfs:label "Sentence 8"@en ;
    domo:Text "3rd Hungarian Comp."@en ;
    askg-onto:inSentence "3rd Hungarian Comp."^^xsd:string ;
    askg-onto:index "8"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-3rd_hungarian_comp,
        askg-data:Entity-competition .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-1312-Sentence-13129 a askg-onto:Sentence ;
    rdfs:label "Sentence 9"@en ;
    domo:Text "Sci."@en ;
    askg-onto:inSentence "Sci."^^xsd:string ;
    askg-onto:index "9"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-concept,
        askg-data:Entity-sci .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-1313 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 13"@en ;
    domo:Text "16. A. Silva, F. Bonchi, M. Bonsangue, and J. Rutten. Generalizing the powerset construction, coalgebraically. In K. Lodaya and M. Mahajan, eds., *Proc. IARCS Annual Conference on* Foundations of Software Technology and Theoretical Computer Science (FSTTCS 2010), vol. 8 of *Leibniz International Proceedings in Informatics (LIPIcs)*, pp. 272–283, 2010."@en ;
    askg-onto:hasSentence askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-1313-Sentence-13131,
        askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-1313-Sentence-131310,
        askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-1313-Sentence-131311,
        askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-1313-Sentence-131312,
        askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-1313-Sentence-131313,
        askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-1313-Sentence-13132,
        askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-1313-Sentence-13133,
        askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-1313-Sentence-13134,
        askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-1313-Sentence-13135,
        askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-1313-Sentence-13136,
        askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-1313-Sentence-13137,
        askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-1313-Sentence-13138,
        askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-1313-Sentence-13139 ;
    askg-onto:index "13"^^xsd:int .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-1313-Sentence-13131 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "16."@en ;
    askg-onto:inSentence "16."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-dataset,
        askg-data:Entity-method,
        askg-data:Entity-publication,
        askg-data:Entity-research_area,
        askg-data:Entity-research_field,
        askg-data:Entity-researcher,
        askg-data:Entity-result,
        askg-data:Entity-study,
        askg-data:Entity-triple .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-1313-Sentence-131310 a askg-onto:Sentence ;
    rdfs:label "Sentence 10"@en ;
    domo:Text "Mahajan, eds., *Proc."@en ;
    askg-onto:inSentence "Mahajan, eds., *Proc."^^xsd:string ;
    askg-onto:index "10"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-mahajan,
        askg-data:Entity-proc .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-1313-Sentence-131311 a askg-onto:Sentence ;
    rdfs:label "Sentence 11"@en ;
    domo:Text "IARCS Annual Conference on* Foundations of Software Technology and Theoretical Computer Science (FSTTCS 2010), vol."@en ;
    askg-onto:inSentence "IARCS Annual Conference on* Foundations of Software Technology and Theoretical Computer Science (FSTTCS 2010), vol."^^xsd:string ;
    askg-onto:index "11"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-conference,
        askg-data:Entity-fsttcs_2010,
        askg-data:Entity-iarcs_annual_conference_on_foundations_of_software_technology_and_theoretical_computer_science .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-1313-Sentence-131312 a askg-onto:Sentence ;
    rdfs:label "Sentence 12"@en ;
    domo:Text "8 of *Leibniz International Proceedings in Informatics (LIPIcs)*, pp."@en ;
    askg-onto:inSentence "8 of *Leibniz International Proceedings in Informatics (LIPIcs)*, pp."^^xsd:string ;
    askg-onto:index "12"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-leibniz_international_proceedings_in_informatics_lipics,
        askg-data:Entity-publication .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-1313-Sentence-131313 a askg-onto:Sentence ;
    rdfs:label "Sentence 13"@en ;
    domo:Text "272–283, 2010."@en ;
    askg-onto:inSentence "272–283, 2010."^^xsd:string ;
    askg-onto:index "13"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-2010,
        askg-data:Entity-272283 .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-1313-Sentence-13132 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "A."@en ;
    askg-onto:inSentence "A."^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-a,
        askg-data:Entity-text .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-1313-Sentence-13133 a askg-onto:Sentence ;
    rdfs:label "Sentence 3"@en ;
    domo:Text "Silva, F."@en ;
    askg-onto:inSentence "Silva, F."^^xsd:string ;
    askg-onto:index "3"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-author,
        askg-data:Entity-silva_f .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-1313-Sentence-13134 a askg-onto:Sentence ;
    rdfs:label "Sentence 4"@en ;
    domo:Text "Bonchi, M."@en ;
    askg-onto:inSentence "Bonchi, M."^^xsd:string ;
    askg-onto:index "4"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-author,
        askg-data:Entity-bonchi_m .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-1313-Sentence-13135 a askg-onto:Sentence ;
    rdfs:label "Sentence 5"@en ;
    domo:Text "Bonsangue, and J."@en ;
    askg-onto:inSentence "Bonsangue, and J."^^xsd:string ;
    askg-onto:index "5"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-author,
        askg-data:Entity-bonsangue,
        askg-data:Entity-j .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-1313-Sentence-13136 a askg-onto:Sentence ;
    rdfs:label "Sentence 6"@en ;
    domo:Text "Rutten."@en ;
    askg-onto:inSentence "Rutten."^^xsd:string ;
    askg-onto:index "6"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-author,
        askg-data:Entity-rutten .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-1313-Sentence-13137 a askg-onto:Sentence ;
    rdfs:label "Sentence 7"@en ;
    domo:Text "Generalizing the powerset construction, coalgebraically."@en ;
    askg-onto:inSentence "Generalizing the powerset construction, coalgebraically."^^xsd:string ;
    askg-onto:index "7"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-coalgebraically,
        askg-data:Entity-powerset_construction .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-1313-Sentence-13138 a askg-onto:Sentence ;
    rdfs:label "Sentence 8"@en ;
    domo:Text "In K."@en ;
    askg-onto:inSentence "In K."^^xsd:string ;
    askg-onto:index "8"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-k,
        askg-data:Entity-person .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-1313-Sentence-13139 a askg-onto:Sentence ;
    rdfs:label "Sentence 9"@en ;
    domo:Text "Lodaya and M."@en ;
    askg-onto:inSentence "Lodaya and M."^^xsd:string ;
    askg-onto:index "9"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-lodaya,
        askg-data:Entity-m,
        askg-data:Entity-person .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-1314 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 14"@en ;
    domo:Text "17. A. Silva, F. Bonchi, M. M. Bonsangue, and J. J. M. M. Rutten. Generalizing determinization from automata to coalgebras. *Log. Methods Comput. Sci*, 9(1:9), 2013."@en ;
    askg-onto:hasSentence askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-1314-Sentence-13141,
        askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-1314-Sentence-131410,
        askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-1314-Sentence-131411,
        askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-1314-Sentence-131412,
        askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-1314-Sentence-131413,
        askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-1314-Sentence-131414,
        askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-1314-Sentence-13142,
        askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-1314-Sentence-13143,
        askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-1314-Sentence-13144,
        askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-1314-Sentence-13145,
        askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-1314-Sentence-13146,
        askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-1314-Sentence-13147,
        askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-1314-Sentence-13148,
        askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-1314-Sentence-13149 ;
    askg-onto:index "14"^^xsd:int .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-1314-Sentence-13141 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "17."@en ;
    askg-onto:inSentence "17."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-research_area,
        askg-data:Entity-researcher,
        askg-data:Entity-triple .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-1314-Sentence-131410 a askg-onto:Sentence ;
    rdfs:label "Sentence 10"@en ;
    domo:Text "Rutten."@en ;
    askg-onto:inSentence "Rutten."^^xsd:string ;
    askg-onto:index "10"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-person,
        askg-data:Entity-rutten .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-1314-Sentence-131411 a askg-onto:Sentence ;
    rdfs:label "Sentence 11"@en ;
    domo:Text "Generalizing determinization from automata to coalgebras."@en ;
    askg-onto:inSentence "Generalizing determinization from automata to coalgebras."^^xsd:string ;
    askg-onto:index "11"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-coalgebras,
        askg-data:Entity-determinization .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-1314-Sentence-131412 a askg-onto:Sentence ;
    rdfs:label "Sentence 12"@en ;
    domo:Text "*Log."@en ;
    askg-onto:inSentence "*Log."^^xsd:string ;
    askg-onto:index "12"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-concept,
        askg-data:Entity-log .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-1314-Sentence-131413 a askg-onto:Sentence ;
    rdfs:label "Sentence 13"@en ;
    domo:Text "Methods Comput."@en ;
    askg-onto:inSentence "Methods Comput."^^xsd:string ;
    askg-onto:index "13"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-method,
        askg-data:Entity-methods_comput .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-1314-Sentence-131414 a askg-onto:Sentence ;
    rdfs:label "Sentence 14"@en ;
    domo:Text "Sci*, 9(1:9), 2013."@en ;
    askg-onto:inSentence "Sci*, 9(1:9), 2013."^^xsd:string ;
    askg-onto:index "14"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-919_2013,
        askg-data:Entity-sci .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-1314-Sentence-13142 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "A."@en ;
    askg-onto:inSentence "A."^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-algorithm,
        askg-data:Entity-device,
        askg-data:Entity-method,
        askg-data:Entity-organization,
        askg-data:Entity-platform,
        askg-data:Entity-research_group,
        askg-data:Entity-researcher,
        askg-data:Entity-study,
        askg-data:Entity-technology,
        askg-data:Entity-tool .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-1314-Sentence-13143 a askg-onto:Sentence ;
    rdfs:label "Sentence 3"@en ;
    domo:Text "Silva, F."@en ;
    askg-onto:inSentence "Silva, F."^^xsd:string ;
    askg-onto:index "3"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-researcher,
        askg-data:Entity-silva_f .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-1314-Sentence-13144 a askg-onto:Sentence ;
    rdfs:label "Sentence 4"@en ;
    domo:Text "Bonchi, M."@en ;
    askg-onto:inSentence "Bonchi, M."^^xsd:string ;
    askg-onto:index "4"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-author,
        askg-data:Entity-bonchi_m .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-1314-Sentence-13145 a askg-onto:Sentence ;
    rdfs:label "Sentence 5"@en ;
    domo:Text "M."@en ;
    askg-onto:inSentence "M."^^xsd:string ;
    askg-onto:index "5"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-m,
        askg-data:Entity-unknown .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-1314-Sentence-13146 a askg-onto:Sentence ;
    rdfs:label "Sentence 6"@en ;
    domo:Text "Bonsangue, and J."@en ;
    askg-onto:inSentence "Bonsangue, and J."^^xsd:string ;
    askg-onto:index "6"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-author,
        askg-data:Entity-bonsangue,
        askg-data:Entity-j .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-1314-Sentence-13147 a askg-onto:Sentence ;
    rdfs:label "Sentence 7"@en ;
    domo:Text "J."@en ;
    askg-onto:inSentence "J."^^xsd:string ;
    askg-onto:index "7"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-j .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-1314-Sentence-13148 a askg-onto:Sentence ;
    rdfs:label "Sentence 8"@en ;
    domo:Text "M."@en ;
    askg-onto:inSentence "M."^^xsd:string ;
    askg-onto:index "8"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-m,
        askg-data:Entity-person .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-1314-Sentence-13149 a askg-onto:Sentence ;
    rdfs:label "Sentence 9"@en ;
    domo:Text "M."@en ;
    askg-onto:inSentence "M."^^xsd:string ;
    askg-onto:index "9"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-m,
        askg-data:Entity-person .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-1315 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 15"@en ;
    domo:Text "18. D. Turi and G. Plotkin. Towards a mathematical operational semantics. In Logic in Computer Science, LICS 1997, pp. 280–291, 1997."@en ;
    askg-onto:hasSentence askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-1315-Sentence-13151,
        askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-1315-Sentence-13152,
        askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-1315-Sentence-13153,
        askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-1315-Sentence-13154,
        askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-1315-Sentence-13155,
        askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-1315-Sentence-13156,
        askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-1315-Sentence-13157 ;
    askg-onto:index "15"^^xsd:int .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-1315-Sentence-13151 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "18."@en ;
    askg-onto:inSentence "18."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-algorithm,
        askg-data:Entity-author,
        askg-data:Entity-data,
        askg-data:Entity-dataset,
        askg-data:Entity-device,
        askg-data:Entity-method,
        askg-data:Entity-publication,
        askg-data:Entity-research_area,
        askg-data:Entity-research_group,
        askg-data:Entity-researcher,
        askg-data:Entity-study,
        askg-data:Entity-technology .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-1315-Sentence-13152 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "D."@en ;
    askg-onto:inSentence "D."^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-d,
        askg-data:Entity-device .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-1315-Sentence-13153 a askg-onto:Sentence ;
    rdfs:label "Sentence 3"@en ;
    domo:Text "Turi and G."@en ;
    askg-onto:inSentence "Turi and G."^^xsd:string ;
    askg-onto:index "3"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-g,
        askg-data:Entity-person,
        askg-data:Entity-turi .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-1315-Sentence-13154 a askg-onto:Sentence ;
    rdfs:label "Sentence 4"@en ;
    domo:Text "Plotkin."@en ;
    askg-onto:inSentence "Plotkin."^^xsd:string ;
    askg-onto:index "4"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-author,
        askg-data:Entity-plotkin .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-1315-Sentence-13155 a askg-onto:Sentence ;
    rdfs:label "Sentence 5"@en ;
    domo:Text "Towards a mathematical operational semantics."@en ;
    askg-onto:inSentence "Towards a mathematical operational semantics."^^xsd:string ;
    askg-onto:index "5"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-concept,
        askg-data:Entity-mathematical_operational_semantics .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-1315-Sentence-13156 a askg-onto:Sentence ;
    rdfs:label "Sentence 6"@en ;
    domo:Text "In Logic in Computer Science, LICS 1997, pp."@en ;
    askg-onto:inSentence "In Logic in Computer Science, LICS 1997, pp."^^xsd:string ;
    askg-onto:index "6"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-lics_1997,
        askg-data:Entity-logic_in_computer_science .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-1315-Sentence-13157 a askg-onto:Sentence ;
    rdfs:label "Sentence 7"@en ;
    domo:Text "280–291, 1997."@en ;
    askg-onto:inSentence "280–291, 1997."^^xsd:string ;
    askg-onto:index "7"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-1997,
        askg-data:Entity-280291 .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-1316 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 16"@en ;
    domo:Text "19. R. van Glabbeek. The linear time-branching time spectrum (extended abstract). In *Theories* of Concurrency: Unification and Extension, CONCUR 1990, vol. 458 of *LNCS*, pp. 278–297. Springer, 1990."@en ;
    askg-onto:hasSentence askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-1316-Sentence-13161,
        askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-1316-Sentence-13162,
        askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-1316-Sentence-13163,
        askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-1316-Sentence-13164,
        askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-1316-Sentence-13165,
        askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-1316-Sentence-13166,
        askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-1316-Sentence-13167,
        askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-1316-Sentence-13168 ;
    askg-onto:index "16"^^xsd:int .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-1316-Sentence-13161 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "19."@en ;
    askg-onto:inSentence "19."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-datasets,
        askg-data:Entity-meaningful_entities,
        askg-data:Entity-methods,
        askg-data:Entity-organizations,
        askg-data:Entity-persons,
        askg-data:Entity-research_concepts,
        askg-data:Entity-tools,
        askg-data:Entity-triple .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-1316-Sentence-13162 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "R."@en ;
    askg-onto:inSentence "R."^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-r,
        askg-data:Entity-unknown .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-1316-Sentence-13163 a askg-onto:Sentence ;
    rdfs:label "Sentence 3"@en ;
    domo:Text "van Glabbeek."@en ;
    askg-onto:inSentence "van Glabbeek."^^xsd:string ;
    askg-onto:index "3"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-person,
        askg-data:Entity-van_glabbeek .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-1316-Sentence-13164 a askg-onto:Sentence ;
    rdfs:label "Sentence 4"@en ;
    domo:Text "The linear time-branching time spectrum (extended abstract)."@en ;
    askg-onto:inSentence "The linear time-branching time spectrum (extended abstract)."^^xsd:string ;
    askg-onto:index "4"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-extended_abstract,
        askg-data:Entity-linear_time-branching_time_spectrum .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-1316-Sentence-13165 a askg-onto:Sentence ;
    rdfs:label "Sentence 5"@en ;
    domo:Text "In *Theories* of Concurrency: Unification and Extension, CONCUR 1990, vol."@en ;
    askg-onto:inSentence "In *Theories* of Concurrency: Unification and Extension, CONCUR 1990, vol."^^xsd:string ;
    askg-onto:index "5"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-concur_1990,
        askg-data:Entity-publication,
        askg-data:Entity-theories_of_concurrency,
        askg-data:Entity-theory .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-1316-Sentence-13166 a askg-onto:Sentence ;
    rdfs:label "Sentence 6"@en ;
    domo:Text "458 of *LNCS*, pp."@en ;
    askg-onto:inSentence "458 of *LNCS*, pp."^^xsd:string ;
    askg-onto:index "6"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-lncs,
        askg-data:Entity-publication .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-1316-Sentence-13167 a askg-onto:Sentence ;
    rdfs:label "Sentence 7"@en ;
    domo:Text "278–297."@en ;
    askg-onto:inSentence "278–297."^^xsd:string ;
    askg-onto:index "7"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-278297,
        askg-data:Entity-page_numbers .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-1316-Sentence-13168 a askg-onto:Sentence ;
    rdfs:label "Sentence 8"@en ;
    domo:Text "Springer, 1990."@en ;
    askg-onto:inSentence "Springer, 1990."^^xsd:string ;
    askg-onto:index "8"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-1990,
        askg-data:Entity-springer .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-132 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 2"@en ;
    domo:Text "2. P. Aczel. *Non-Well-Founded Sets*. CSLI, Stanford, 1988. 3. M. Barr. Coequalizers and free triples. *Math. Zeitschr.*, 116:307–322, 1970."@en ;
    askg-onto:hasSentence askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-132-Sentence-1321,
        askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-132-Sentence-13210,
        askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-132-Sentence-13211,
        askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-132-Sentence-1322,
        askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-132-Sentence-1323,
        askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-132-Sentence-1324,
        askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-132-Sentence-1325,
        askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-132-Sentence-1326,
        askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-132-Sentence-1327,
        askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-132-Sentence-1328,
        askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-132-Sentence-1329 ;
    askg-onto:index "2"^^xsd:int .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-132-Sentence-1321 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "2."@en ;
    askg-onto:inSentence "2."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-institution,
        askg-data:Entity-organization,
        askg-data:Entity-research_concept,
        askg-data:Entity-researcher,
        askg-data:Entity-study,
        askg-data:Entity-triple .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-132-Sentence-13210 a askg-onto:Sentence ;
    rdfs:label "Sentence 10"@en ;
    domo:Text "*Math."@en ;
    askg-onto:inSentence "*Math."^^xsd:string ;
    askg-onto:index "10"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-concept,
        askg-data:Entity-math .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-132-Sentence-13211 a askg-onto:Sentence ;
    rdfs:label "Sentence 11"@en ;
    domo:Text "Zeitschr.*, 116:307–322, 1970."@en ;
    askg-onto:inSentence "Zeitschr.*, 116:307–322, 1970."^^xsd:string ;
    askg-onto:index "11"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-1970,
        askg-data:Entity-zeitschr .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-132-Sentence-1322 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "P."@en ;
    askg-onto:inSentence "P."^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-p,
        askg-data:Entity-unknown .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-132-Sentence-1323 a askg-onto:Sentence ;
    rdfs:label "Sentence 3"@en ;
    domo:Text "Aczel."@en ;
    askg-onto:inSentence "Aczel."^^xsd:string ;
    askg-onto:index "3"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-aczel,
        askg-data:Entity-research_concepts .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-132-Sentence-1324 a askg-onto:Sentence ;
    rdfs:label "Sentence 4"@en ;
    domo:Text "*Non-Well-Founded Sets*."@en ;
    askg-onto:inSentence "*Non-Well-Founded Sets*."^^xsd:string ;
    askg-onto:index "4"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-concept,
        askg-data:Entity-non-well-founded_sets .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-132-Sentence-1325 a askg-onto:Sentence ;
    rdfs:label "Sentence 5"@en ;
    domo:Text "CSLI, Stanford, 1988."@en ;
    askg-onto:inSentence "CSLI, Stanford, 1988."^^xsd:string ;
    askg-onto:index "5"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-csli,
        askg-data:Entity-stanford .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-132-Sentence-1326 a askg-onto:Sentence ;
    rdfs:label "Sentence 6"@en ;
    domo:Text "3."@en ;
    askg-onto:inSentence "3."^^xsd:string ;
    askg-onto:index "6"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-concept,
        askg-data:Entity-experiment,
        askg-data:Entity-method,
        askg-data:Entity-research_area,
        askg-data:Entity-triple .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-132-Sentence-1327 a askg-onto:Sentence ;
    rdfs:label "Sentence 7"@en ;
    domo:Text "M."@en ;
    askg-onto:inSentence "M."^^xsd:string ;
    askg-onto:index "7"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-m,
        askg-data:Entity-person .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-132-Sentence-1328 a askg-onto:Sentence ;
    rdfs:label "Sentence 8"@en ;
    domo:Text "Barr."@en ;
    askg-onto:inSentence "Barr."^^xsd:string ;
    askg-onto:index "8"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-barr,
        askg-data:Entity-person .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-132-Sentence-1329 a askg-onto:Sentence ;
    rdfs:label "Sentence 9"@en ;
    domo:Text "Coequalizers and free triples."@en ;
    askg-onto:inSentence "Coequalizers and free triples."^^xsd:string ;
    askg-onto:index "9"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-coequalizers,
        askg-data:Entity-free_triples .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-133 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 3"@en ;
    domo:Text "4. M. M. Bonsangue, S. Milius, and A. Silva. Sound and complete axiomatizations of coalgebraic language equivalence. *ACM Trans. Comput. Log.*, 14(1:7), 2013."@en ;
    askg-onto:hasSentence askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-133-Sentence-1331,
        askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-133-Sentence-13310,
        askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-133-Sentence-1332,
        askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-133-Sentence-1333,
        askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-133-Sentence-1334,
        askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-133-Sentence-1335,
        askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-133-Sentence-1336,
        askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-133-Sentence-1337,
        askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-133-Sentence-1338,
        askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-133-Sentence-1339 ;
    askg-onto:index "3"^^xsd:int .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-133-Sentence-1331 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "4."@en ;
    askg-onto:inSentence "4."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-experiment,
        askg-data:Entity-method,
        askg-data:Entity-paradigm,
        askg-data:Entity-research,
        askg-data:Entity-research_methods,
        askg-data:Entity-research_tools,
        askg-data:Entity-study .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-133-Sentence-13310 a askg-onto:Sentence ;
    rdfs:label "Sentence 10"@en ;
    domo:Text "Log.*, 14(1:7), 2013."@en ;
    askg-onto:inSentence "Log.*, 14(1:7), 2013."^^xsd:string ;
    askg-onto:index "10"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-1417,
        askg-data:Entity-2013,
        askg-data:Entity-log .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-133-Sentence-1332 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "M."@en ;
    askg-onto:inSentence "M."^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-m,
        askg-data:Entity-person .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-133-Sentence-1333 a askg-onto:Sentence ;
    rdfs:label "Sentence 3"@en ;
    domo:Text "M."@en ;
    askg-onto:inSentence "M."^^xsd:string ;
    askg-onto:index "3"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-m,
        askg-data:Entity-molecule .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-133-Sentence-1334 a askg-onto:Sentence ;
    rdfs:label "Sentence 4"@en ;
    domo:Text "Bonsangue, S."@en ;
    askg-onto:inSentence "Bonsangue, S."^^xsd:string ;
    askg-onto:index "4"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-author,
        askg-data:Entity-bonsangue_s .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-133-Sentence-1335 a askg-onto:Sentence ;
    rdfs:label "Sentence 5"@en ;
    domo:Text "Milius, and A."@en ;
    askg-onto:inSentence "Milius, and A."^^xsd:string ;
    askg-onto:index "5"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-author,
        askg-data:Entity-milius .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-133-Sentence-1336 a askg-onto:Sentence ;
    rdfs:label "Sentence 6"@en ;
    domo:Text "Silva."@en ;
    askg-onto:inSentence "Silva."^^xsd:string ;
    askg-onto:index "6"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-a_researcher,
        askg-data:Entity-silva .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-133-Sentence-1337 a askg-onto:Sentence ;
    rdfs:label "Sentence 7"@en ;
    domo:Text "Sound and complete axiomatizations of coalgebraic language equivalence."@en ;
    askg-onto:inSentence "Sound and complete axiomatizations of coalgebraic language equivalence."^^xsd:string ;
    askg-onto:index "7"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-axiomatization,
        askg-data:Entity-coalgebraic_language_equivalence .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-133-Sentence-1338 a askg-onto:Sentence ;
    rdfs:label "Sentence 8"@en ;
    domo:Text "*ACM Trans."@en ;
    askg-onto:inSentence "*ACM Trans."^^xsd:string ;
    askg-onto:index "8"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-acm_trans,
        askg-data:Entity-publication .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-133-Sentence-1339 a askg-onto:Sentence ;
    rdfs:label "Sentence 9"@en ;
    domo:Text "Comput."@en ;
    askg-onto:inSentence "Comput."^^xsd:string ;
    askg-onto:index "9"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-comput,
        askg-data:Entity-concept .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-134 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 4"@en ;
    domo:Text "5. C. Cˆırstea. A coalgebraic approach to linear-time logics. In Foundations of Software Science and Computation Structures, FoSSaCS 2014, vol. 8412 of *LNCS*, pp. 426–440. Springer, 2014."@en ;
    askg-onto:hasSentence askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-134-Sentence-1341,
        askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-134-Sentence-1342,
        askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-134-Sentence-1343,
        askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-134-Sentence-1344,
        askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-134-Sentence-1345,
        askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-134-Sentence-1346,
        askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-134-Sentence-1347,
        askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-134-Sentence-1348 ;
    askg-onto:index "4"^^xsd:int .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-134-Sentence-1341 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "5."@en ;
    askg-onto:inSentence "5."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-algorithm,
        askg-data:Entity-concept,
        askg-data:Entity-corpus,
        askg-data:Entity-dataset,
        askg-data:Entity-device,
        askg-data:Entity-institution,
        askg-data:Entity-method,
        askg-data:Entity-organization,
        askg-data:Entity-research_area,
        askg-data:Entity-software,
        askg-data:Entity-technique,
        askg-data:Entity-technology .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-134-Sentence-1342 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "C."@en ;
    askg-onto:inSentence "C."^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-c,
        askg-data:Entity-text .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-134-Sentence-1343 a askg-onto:Sentence ;
    rdfs:label "Sentence 3"@en ;
    domo:Text "Cˆırstea."@en ;
    askg-onto:inSentence "Cˆırstea."^^xsd:string ;
    askg-onto:index "3"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-author,
        askg-data:Entity-c%CB%86%C4%B1rstea .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-134-Sentence-1344 a askg-onto:Sentence ;
    rdfs:label "Sentence 4"@en ;
    domo:Text "A coalgebraic approach to linear-time logics."@en ;
    askg-onto:inSentence "A coalgebraic approach to linear-time logics."^^xsd:string ;
    askg-onto:index "4"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-coalgebraic_approach,
        askg-data:Entity-linear-time_logics .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-134-Sentence-1345 a askg-onto:Sentence ;
    rdfs:label "Sentence 5"@en ;
    domo:Text "In Foundations of Software Science and Computation Structures, FoSSaCS 2014, vol."@en ;
    askg-onto:inSentence "In Foundations of Software Science and Computation Structures, FoSSaCS 2014, vol."^^xsd:string ;
    askg-onto:index "5"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-fossacs_2014,
        askg-data:Entity-foundations_of_software_science_and_computation_structures .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-134-Sentence-1346 a askg-onto:Sentence ;
    rdfs:label "Sentence 6"@en ;
    domo:Text "8412 of *LNCS*, pp."@en ;
    askg-onto:inSentence "8412 of *LNCS*, pp."^^xsd:string ;
    askg-onto:index "6"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-lncs,
        askg-data:Entity-publication .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-134-Sentence-1347 a askg-onto:Sentence ;
    rdfs:label "Sentence 7"@en ;
    domo:Text "426–440."@en ;
    askg-onto:inSentence "426–440."^^xsd:string ;
    askg-onto:index "7"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-426440,
        askg-data:Entity-publication .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-134-Sentence-1348 a askg-onto:Sentence ;
    rdfs:label "Sentence 8"@en ;
    domo:Text "Springer, 2014."@en ;
    askg-onto:inSentence "Springer, 2014."^^xsd:string ;
    askg-onto:index "8"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-2014,
        askg-data:Entity-springer .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-135 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 5"@en ;
    domo:Text "6. V. Giarratana, F. Gimona, and U. Montanari. Observability concepts in abstract data type specifications. In *Mathematical Foundations of Computer Science, MFCS 1976*, vol. 45 of LNCS, pp. 576–587. Springer, 1976."@en ;
    askg-onto:hasSentence askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-135-Sentence-1351,
        askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-135-Sentence-13510,
        askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-135-Sentence-1352,
        askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-135-Sentence-1353,
        askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-135-Sentence-1354,
        askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-135-Sentence-1355,
        askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-135-Sentence-1356,
        askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-135-Sentence-1357,
        askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-135-Sentence-1358,
        askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-135-Sentence-1359 ;
    askg-onto:index "5"^^xsd:int .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-135-Sentence-1351 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "6."@en ;
    askg-onto:inSentence "6."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-text,
        askg-data:Entity-triple .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-135-Sentence-13510 a askg-onto:Sentence ;
    rdfs:label "Sentence 10"@en ;
    domo:Text "Springer, 1976."@en ;
    askg-onto:inSentence "Springer, 1976."^^xsd:string ;
    askg-onto:index "10"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-1976,
        askg-data:Entity-springer .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-135-Sentence-1352 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "V."@en ;
    askg-onto:inSentence "V."^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-unknown,
        askg-data:Entity-v .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-135-Sentence-1353 a askg-onto:Sentence ;
    rdfs:label "Sentence 3"@en ;
    domo:Text "Giarratana, F."@en ;
    askg-onto:inSentence "Giarratana, F."^^xsd:string ;
    askg-onto:index "3"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-author,
        askg-data:Entity-giarratana_f .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-135-Sentence-1354 a askg-onto:Sentence ;
    rdfs:label "Sentence 4"@en ;
    domo:Text "Gimona, and U."@en ;
    askg-onto:inSentence "Gimona, and U."^^xsd:string ;
    askg-onto:index "4"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-author,
        askg-data:Entity-gimona,
        askg-data:Entity-u .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-135-Sentence-1355 a askg-onto:Sentence ;
    rdfs:label "Sentence 5"@en ;
    domo:Text "Montanari."@en ;
    askg-onto:inSentence "Montanari."^^xsd:string ;
    askg-onto:index "5"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-author,
        askg-data:Entity-montanari .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-135-Sentence-1356 a askg-onto:Sentence ;
    rdfs:label "Sentence 6"@en ;
    domo:Text "Observability concepts in abstract data type specifications."@en ;
    askg-onto:inSentence "Observability concepts in abstract data type specifications."^^xsd:string ;
    askg-onto:index "6"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-abstract_data_type_specifications,
        askg-data:Entity-observability_concepts .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-135-Sentence-1357 a askg-onto:Sentence ;
    rdfs:label "Sentence 7"@en ;
    domo:Text "In *Mathematical Foundations of Computer Science, MFCS 1976*, vol."@en ;
    askg-onto:inSentence "In *Mathematical Foundations of Computer Science, MFCS 1976*, vol."^^xsd:string ;
    askg-onto:index "7"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-mathematical_foundations_of_computer_science_mfcs_1976,
        askg-data:Entity-publication .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-135-Sentence-1358 a askg-onto:Sentence ;
    rdfs:label "Sentence 8"@en ;
    domo:Text "45 of LNCS, pp."@en ;
    askg-onto:inSentence "45 of LNCS, pp."^^xsd:string ;
    askg-onto:index "8"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-lncs,
        askg-data:Entity-publication .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-135-Sentence-1359 a askg-onto:Sentence ;
    rdfs:label "Sentence 9"@en ;
    domo:Text "576–587."@en ;
    askg-onto:inSentence "576–587."^^xsd:string ;
    askg-onto:index "9"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-576587,
        askg-data:Entity-a_numerical_range .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-136 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 6"@en ;
    domo:Text "7. J. Goguen and J. Thatcher. Initial algebra semantics. In Switching and Automata Theory, SWAT (FOCS) 1974, pp. 63–77. IEEE Computer Society, 1974."@en ;
    askg-onto:hasSentence askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-136-Sentence-1361,
        askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-136-Sentence-1362,
        askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-136-Sentence-1363,
        askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-136-Sentence-1364,
        askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-136-Sentence-1365,
        askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-136-Sentence-1366,
        askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-136-Sentence-1367,
        askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-136-Sentence-1368 ;
    askg-onto:index "6"^^xsd:int .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-136-Sentence-1361 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "7."@en ;
    askg-onto:inSentence "7."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-algorithm,
        askg-data:Entity-binary,
        askg-data:Entity-computations,
        askg-data:Entity-data,
        askg-data:Entity-mathematics,
        askg-data:Entity-triple .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-136-Sentence-1362 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "J."@en ;
    askg-onto:inSentence "J."^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-j,
        askg-data:Entity-publication .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-136-Sentence-1363 a askg-onto:Sentence ;
    rdfs:label "Sentence 3"@en ;
    domo:Text "Goguen and J."@en ;
    askg-onto:inSentence "Goguen and J."^^xsd:string ;
    askg-onto:index "3"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-author,
        askg-data:Entity-goguen,
        askg-data:Entity-j .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-136-Sentence-1364 a askg-onto:Sentence ;
    rdfs:label "Sentence 4"@en ;
    domo:Text "Thatcher."@en ;
    askg-onto:inSentence "Thatcher."^^xsd:string ;
    askg-onto:index "4"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-person,
        askg-data:Entity-thatcher .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-136-Sentence-1365 a askg-onto:Sentence ;
    rdfs:label "Sentence 5"@en ;
    domo:Text "Initial algebra semantics."@en ;
    askg-onto:inSentence "Initial algebra semantics."^^xsd:string ;
    askg-onto:index "5"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-concept,
        askg-data:Entity-initial_algebra_semantics .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-136-Sentence-1366 a askg-onto:Sentence ;
    rdfs:label "Sentence 6"@en ;
    domo:Text "In Switching and Automata Theory, SWAT (FOCS) 1974, pp."@en ;
    askg-onto:inSentence "In Switching and Automata Theory, SWAT (FOCS) 1974, pp."^^xsd:string ;
    askg-onto:index "6"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-1974,
        askg-data:Entity-focs,
        askg-data:Entity-swat,
        askg-data:Entity-switching_and_automata_theory,
        askg-data:Entity-theory .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-136-Sentence-1367 a askg-onto:Sentence ;
    rdfs:label "Sentence 7"@en ;
    domo:Text "63–77."@en ;
    askg-onto:inSentence "63–77."^^xsd:string ;
    askg-onto:index "7"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-6377,
        askg-data:Entity-numbers .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-136-Sentence-1368 a askg-onto:Sentence ;
    rdfs:label "Sentence 8"@en ;
    domo:Text "IEEE Computer Society, 1974."@en ;
    askg-onto:inSentence "IEEE Computer Society, 1974."^^xsd:string ;
    askg-onto:index "8"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-1974,
        askg-data:Entity-ieee_computer_society .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-137 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 7"@en ;
    domo:Text "8. I. Hasuo, B. Jacobs, and A. Sokolova. Generic trace semantics via coinduction. Log. Methods Comput. Sci., 3, 2007."@en ;
    askg-onto:hasSentence askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-137-Sentence-1371,
        askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-137-Sentence-1372,
        askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-137-Sentence-1373,
        askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-137-Sentence-1374,
        askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-137-Sentence-1375,
        askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-137-Sentence-1376,
        askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-137-Sentence-1377,
        askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-137-Sentence-1378,
        askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-137-Sentence-1379 ;
    askg-onto:index "7"^^xsd:int .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-137-Sentence-1371 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "8."@en ;
    askg-onto:inSentence "8."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-concept,
        askg-data:Entity-triple .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-137-Sentence-1372 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "I."@en ;
    askg-onto:inSentence "I."^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-i,
        askg-data:Entity-person .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-137-Sentence-1373 a askg-onto:Sentence ;
    rdfs:label "Sentence 3"@en ;
    domo:Text "Hasuo, B."@en ;
    askg-onto:inSentence "Hasuo, B."^^xsd:string ;
    askg-onto:index "3"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-author,
        askg-data:Entity-hasuo_b .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-137-Sentence-1374 a askg-onto:Sentence ;
    rdfs:label "Sentence 4"@en ;
    domo:Text "Jacobs, and A."@en ;
    askg-onto:inSentence "Jacobs, and A."^^xsd:string ;
    askg-onto:index "4"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-a,
        askg-data:Entity-jacobs .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-137-Sentence-1375 a askg-onto:Sentence ;
    rdfs:label "Sentence 5"@en ;
    domo:Text "Sokolova."@en ;
    askg-onto:inSentence "Sokolova."^^xsd:string ;
    askg-onto:index "5"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-research,
        askg-data:Entity-sokolova .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-137-Sentence-1376 a askg-onto:Sentence ;
    rdfs:label "Sentence 6"@en ;
    domo:Text "Generic trace semantics via coinduction."@en ;
    askg-onto:inSentence "Generic trace semantics via coinduction."^^xsd:string ;
    askg-onto:index "6"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-coinduction,
        askg-data:Entity-concept,
        askg-data:Entity-generic_trace_semantics,
        askg-data:Entity-method .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-137-Sentence-1377 a askg-onto:Sentence ;
    rdfs:label "Sentence 7"@en ;
    domo:Text "Log."@en ;
    askg-onto:inSentence "Log."^^xsd:string ;
    askg-onto:index "7"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-concept,
        askg-data:Entity-log .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-137-Sentence-1378 a askg-onto:Sentence ;
    rdfs:label "Sentence 8"@en ;
    domo:Text "Methods Comput."@en ;
    askg-onto:inSentence "Methods Comput."^^xsd:string ;
    askg-onto:index "8"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-comput,
        askg-data:Entity-methods .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-137-Sentence-1379 a askg-onto:Sentence ;
    rdfs:label "Sentence 9"@en ;
    domo:Text "Sci., 3, 2007."@en ;
    askg-onto:inSentence "Sci., 3, 2007."^^xsd:string ;
    askg-onto:index "9"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-sci .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-138 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 8"@en ;
    domo:Text "9. R. Hennicker and M. Wirsing. Observational Specification: A Birkhoff Theorem. In Workshop on Theory and Applications of Abstract Data Types, WADT *1985, Selected Papers*, pp. 119–135. Springer, 1985."@en ;
    askg-onto:hasSentence askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-138-Sentence-1381,
        askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-138-Sentence-1382,
        askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-138-Sentence-1383,
        askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-138-Sentence-1384,
        askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-138-Sentence-1385,
        askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-138-Sentence-1386,
        askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-138-Sentence-1387,
        askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-138-Sentence-1388 ;
    askg-onto:index "8"^^xsd:int .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-138-Sentence-1381 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "9."@en ;
    askg-onto:inSentence "9."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-meaningful_entity,
        askg-data:Entity-semantic_type,
        askg-data:Entity-triple .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-138-Sentence-1382 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "R."@en ;
    askg-onto:inSentence "R."^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-r,
        askg-data:Entity-researcher .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-138-Sentence-1383 a askg-onto:Sentence ;
    rdfs:label "Sentence 3"@en ;
    domo:Text "Hennicker and M."@en ;
    askg-onto:inSentence "Hennicker and M."^^xsd:string ;
    askg-onto:index "3"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-author,
        askg-data:Entity-hennicker,
        askg-data:Entity-m .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-138-Sentence-1384 a askg-onto:Sentence ;
    rdfs:label "Sentence 4"@en ;
    domo:Text "Wirsing."@en ;
    askg-onto:inSentence "Wirsing."^^xsd:string ;
    askg-onto:index "4"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-a_researcher,
        askg-data:Entity-wirsing .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-138-Sentence-1385 a askg-onto:Sentence ;
    rdfs:label "Sentence 5"@en ;
    domo:Text "Observational Specification: A Birkhoff Theorem."@en ;
    askg-onto:inSentence "Observational Specification: A Birkhoff Theorem."^^xsd:string ;
    askg-onto:index "5"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-birkhoff_theorem,
        askg-data:Entity-observational_specification .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-138-Sentence-1386 a askg-onto:Sentence ;
    rdfs:label "Sentence 6"@en ;
    domo:Text "In Workshop on Theory and Applications of Abstract Data Types, WADT *1985, Selected Papers*, pp."@en ;
    askg-onto:inSentence "In Workshop on Theory and Applications of Abstract Data Types, WADT *1985, Selected Papers*, pp."^^xsd:string ;
    askg-onto:index "6"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-selected_papers,
        askg-data:Entity-wadt_1985 .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-138-Sentence-1387 a askg-onto:Sentence ;
    rdfs:label "Sentence 7"@en ;
    domo:Text "119–135."@en ;
    askg-onto:inSentence "119–135."^^xsd:string ;
    askg-onto:index "7"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-119135,
        askg-data:Entity-text .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-138-Sentence-1388 a askg-onto:Sentence ;
    rdfs:label "Sentence 8"@en ;
    domo:Text "Springer, 1985."@en ;
    askg-onto:inSentence "Springer, 1985."^^xsd:string ;
    askg-onto:index "8"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-1985,
        askg-data:Entity-springer .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-139 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 9"@en ;
    domo:Text "10. A. Hoare. *Communicating sequential processes*. Prentice Hall, 1985. 11. B. Jacobs, A. Silva, and A. Sokolova. Trace semantics via determinization. In *Coalgebraic* Methods in Computer Science, CMCS 2012, vol. 7399 of *LNCS*, pp. 109–129. Springer, 2012."@en ;
    askg-onto:hasSentence askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-139-Sentence-1391,
        askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-139-Sentence-13910,
        askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-139-Sentence-13911,
        askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-139-Sentence-13912,
        askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-139-Sentence-13913,
        askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-139-Sentence-13914,
        askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-139-Sentence-13915,
        askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-139-Sentence-1392,
        askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-139-Sentence-1393,
        askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-139-Sentence-1394,
        askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-139-Sentence-1395,
        askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-139-Sentence-1396,
        askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-139-Sentence-1397,
        askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-139-Sentence-1398,
        askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-139-Sentence-1399 ;
    askg-onto:index "9"^^xsd:int .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-139-Sentence-1391 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "10."@en ;
    askg-onto:inSentence "10."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-algorithm,
        askg-data:Entity-device,
        askg-data:Entity-experiment,
        askg-data:Entity-research_area,
        askg-data:Entity-researcher,
        askg-data:Entity-result,
        askg-data:Entity-study,
        askg-data:Entity-technology .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-139-Sentence-13910 a askg-onto:Sentence ;
    rdfs:label "Sentence 10"@en ;
    domo:Text "Sokolova."@en ;
    askg-onto:inSentence "Sokolova."^^xsd:string ;
    askg-onto:index "10"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-author,
        askg-data:Entity-sokolova .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-139-Sentence-13911 a askg-onto:Sentence ;
    rdfs:label "Sentence 11"@en ;
    domo:Text "Trace semantics via determinization."@en ;
    askg-onto:inSentence "Trace semantics via determinization."^^xsd:string ;
    askg-onto:index "11"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-determinization,
        askg-data:Entity-trace_semantics .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-139-Sentence-13912 a askg-onto:Sentence ;
    rdfs:label "Sentence 12"@en ;
    domo:Text "In *Coalgebraic* Methods in Computer Science, CMCS 2012, vol."@en ;
    askg-onto:inSentence "In *Coalgebraic* Methods in Computer Science, CMCS 2012, vol."^^xsd:string ;
    askg-onto:index "12"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-coalgebraic_methods_in_computer_science,
        askg-data:Entity-publication,
        askg-data:Entity-vol .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-139-Sentence-13913 a askg-onto:Sentence ;
    rdfs:label "Sentence 13"@en ;
    domo:Text "7399 of *LNCS*, pp."@en ;
    askg-onto:inSentence "7399 of *LNCS*, pp."^^xsd:string ;
    askg-onto:index "13"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-lncs,
        askg-data:Entity-publication .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-139-Sentence-13914 a askg-onto:Sentence ;
    rdfs:label "Sentence 14"@en ;
    domo:Text "109–129."@en ;
    askg-onto:inSentence "109–129."^^xsd:string ;
    askg-onto:index "14"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-109129,
        askg-data:Entity-pages .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-139-Sentence-13915 a askg-onto:Sentence ;
    rdfs:label "Sentence 15"@en ;
    domo:Text "Springer, 2012."@en ;
    askg-onto:inSentence "Springer, 2012."^^xsd:string ;
    askg-onto:index "15"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-2012,
        askg-data:Entity-springer .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-139-Sentence-1392 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "A."@en ;
    askg-onto:inSentence "A."^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-a,
        askg-data:Entity-text .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-139-Sentence-1393 a askg-onto:Sentence ;
    rdfs:label "Sentence 3"@en ;
    domo:Text "Hoare."@en ;
    askg-onto:inSentence "Hoare."^^xsd:string ;
    askg-onto:index "3"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-author,
        askg-data:Entity-hoare .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-139-Sentence-1394 a askg-onto:Sentence ;
    rdfs:label "Sentence 4"@en ;
    domo:Text "*Communicating sequential processes*."@en ;
    askg-onto:inSentence "*Communicating sequential processes*."^^xsd:string ;
    askg-onto:index "4"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-communicating_sequential_processes,
        askg-data:Entity-paradigm .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-139-Sentence-1395 a askg-onto:Sentence ;
    rdfs:label "Sentence 5"@en ;
    domo:Text "Prentice Hall, 1985."@en ;
    askg-onto:inSentence "Prentice Hall, 1985."^^xsd:string ;
    askg-onto:index "5"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-1985,
        askg-data:Entity-prentice_hall .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-139-Sentence-1396 a askg-onto:Sentence ;
    rdfs:label "Sentence 6"@en ;
    domo:Text "11."@en ;
    askg-onto:inSentence "11."^^xsd:string ;
    askg-onto:index "6"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-concept,
        askg-data:Entity-triple .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-139-Sentence-1397 a askg-onto:Sentence ;
    rdfs:label "Sentence 7"@en ;
    domo:Text "B."@en ;
    askg-onto:inSentence "B."^^xsd:string ;
    askg-onto:index "7"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-b .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-139-Sentence-1398 a askg-onto:Sentence ;
    rdfs:label "Sentence 8"@en ;
    domo:Text "Jacobs, A."@en ;
    askg-onto:inSentence "Jacobs, A."^^xsd:string ;
    askg-onto:index "8"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-author,
        askg-data:Entity-jacobs_a .

askg-data:Paper-ae04d54115630f9e-Section-13-Paragraph-139-Sentence-1399 a askg-onto:Sentence ;
    rdfs:label "Sentence 9"@en ;
    domo:Text "Silva, and A."@en ;
    askg-onto:inSentence "Silva, and A."^^xsd:string ;
    askg-onto:index "9"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-a,
        askg-data:Entity-silva .

askg-data:Paper-ae04d54115630f9e-Section-2 a askg-onto:Section ;
    rdfs:label "Section 2"@en ;
    domo:Text "1 Introduction"@en ;
    askg-onto:hasParagraph askg-data:Paper-ae04d54115630f9e-Section-2-Paragraph-21,
        askg-data:Paper-ae04d54115630f9e-Section-2-Paragraph-22,
        askg-data:Paper-ae04d54115630f9e-Section-2-Paragraph-23 ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:level "2"^^xsd:int .

askg-data:Paper-ae04d54115630f9e-Section-2-Paragraph-21 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 1"@en ;
    domo:Text "It was recognized early on that the initial algebra semantics of Goguen and Thatcher [7] needs to be extended to account for notions of observational or behavioural equivalence, see Giarratana, Gimona and Montanari [6], Reichel [15], and Hennicker and Wirsing [9]. When Aczel [2] discovered that at least one important notion of behavioural equivalence—the bisimilarity of process algebra—is captured by final coalgebra semantics, the study of coalgebras entered computer science. Whereas early work emphasized the duality between algebra and coalgebra, it became soon clear that both areas have to be taken together. For example, in the work of Turi and Plotkin [18], monads represent the programs, comonads represent their behaviour (operational semantics), and a distributive law between them ensures that the behaviour of a composed system is given by the behaviours of the components, or, more technically, that bisimilarity is a congruence."@en ;
    askg-onto:hasSentence askg-data:Paper-ae04d54115630f9e-Section-2-Paragraph-21-Sentence-211,
        askg-data:Paper-ae04d54115630f9e-Section-2-Paragraph-21-Sentence-212,
        askg-data:Paper-ae04d54115630f9e-Section-2-Paragraph-21-Sentence-213,
        askg-data:Paper-ae04d54115630f9e-Section-2-Paragraph-21-Sentence-214 ;
    askg-onto:index "1"^^xsd:int .

askg-data:Paper-ae04d54115630f9e-Section-2-Paragraph-21-Sentence-211 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "It was recognized early on that the initial algebra semantics of Goguen and Thatcher [7] needs to be extended to account for notions of observational or behavioural equivalence, see Giarratana, Gimona and Montanari [6], Reichel [15], and Hennicker and Wirsing [9]."@en ;
    askg-onto:inSentence "It was recognized early on that the initial algebra semantics of Goguen and Thatcher [7] needs to be extended to account for notions of observational or behavioural equivalence, see Giarratana, Gimona and Montanari [6], Reichel [15], and Hennicker and Wirsing [9]."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-giarratana,
        askg-data:Entity-gimona,
        askg-data:Entity-goguen_and_thatcher,
        askg-data:Entity-hennicker_and_wirsing,
        askg-data:Entity-initial_algebra_semantics,
        askg-data:Entity-montanari,
        askg-data:Entity-observational_or_behavioural_equivalence,
        askg-data:Entity-reichel .

askg-data:Paper-ae04d54115630f9e-Section-2-Paragraph-21-Sentence-212 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "When Aczel [2] discovered that at least one important notion of behavioural equivalence—the bisimilarity of process algebra—is captured by final coalgebra semantics, the study of coalgebras entered computer science."@en ;
    askg-onto:inSentence "When Aczel [2] discovered that at least one important notion of behavioural equivalence—the bisimilarity of process algebra—is captured by final coalgebra semantics, the study of coalgebras entered computer science."^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-aczel,
        askg-data:Entity-bisimilarity_of_process_algebra,
        askg-data:Entity-computer_science,
        askg-data:Entity-final_coalgebra_semantics .

askg-data:Paper-ae04d54115630f9e-Section-2-Paragraph-21-Sentence-213 a askg-onto:Sentence ;
    rdfs:label "Sentence 3"@en ;
    domo:Text "Whereas early work emphasized the duality between algebra and coalgebra, it became soon clear that both areas have to be taken together."@en ;
    askg-onto:inSentence "Whereas early work emphasized the duality between algebra and coalgebra, it became soon clear that both areas have to be taken together."^^xsd:string ;
    askg-onto:index "3"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-algebra,
        askg-data:Entity-coalgebra .

askg-data:Paper-ae04d54115630f9e-Section-2-Paragraph-21-Sentence-214 a askg-onto:Sentence ;
    rdfs:label "Sentence 4"@en ;
    domo:Text "For example, in the work of Turi and Plotkin [18], monads represent the programs, comonads represent their behaviour (operational semantics), and a distributive law between them ensures that the behaviour of a composed system is given by the behaviours of the components, or, more technically, that bisimilarity is a congruence."@en ;
    askg-onto:inSentence "For example, in the work of Turi and Plotkin [18], monads represent the programs, comonads represent their behaviour (operational semantics), and a distributive law between them ensures that the behaviour of a composed system is given by the behaviours of the components, or, more technically, that bisimilarity is a congruence."^^xsd:string ;
    askg-onto:index "4"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-behaviour,
        askg-data:Entity-behaviour_of_a_composed_system,
        askg-data:Entity-behaviours_of_the_components,
        askg-data:Entity-bisimilarity,
        askg-data:Entity-comonads,
        askg-data:Entity-congruence,
        askg-data:Entity-distributive_law,
        askg-data:Entity-monads,
        askg-data:Entity-plotkin,
        askg-data:Entity-programs,
        askg-data:Entity-turi .

askg-data:Paper-ae04d54115630f9e-Section-2-Paragraph-22 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 2"@en ;
    domo:Text "Another example of the interplay of algebraic and coalgebraic structure arises from the desire to make coalgebraic methods available for a larger range of program equivalences such as described in van Glabbeek's [19]. To this end, Power and Turi [14] argued that trace equivalence arises from a distributive law T F → F T between a monad T describing the non-deterministic part and a functor F describing the deterministic part of a transition system X → **T F X**. This was taken up by Hasuo et al [8] and gave rise to a sequence of papers [13,11,17,4,5] that discuss coalgebraic aspects of trace equivalence."@en ;
    askg-onto:hasSentence askg-data:Paper-ae04d54115630f9e-Section-2-Paragraph-22-Sentence-221,
        askg-data:Paper-ae04d54115630f9e-Section-2-Paragraph-22-Sentence-222,
        askg-data:Paper-ae04d54115630f9e-Section-2-Paragraph-22-Sentence-223 ;
    askg-onto:index "2"^^xsd:int .

askg-data:Paper-ae04d54115630f9e-Section-2-Paragraph-22-Sentence-221 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "Another example of the interplay of algebraic and coalgebraic structure arises from the desire to make coalgebraic methods available for a larger range of program equivalences such as described in van Glabbeek's [19]."@en ;
    askg-onto:inSentence "Another example of the interplay of algebraic and coalgebraic structure arises from the desire to make coalgebraic methods available for a larger range of program equivalences such as described in van Glabbeek's [19]."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-19,
        askg-data:Entity-a_larger_range_of_program_equivalences,
        askg-data:Entity-coalgebraic_methods,
        askg-data:Entity-van_glabbeek .

askg-data:Paper-ae04d54115630f9e-Section-2-Paragraph-22-Sentence-222 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "To this end, Power and Turi [14] argued that trace equivalence arises from a distributive law T F → F T between a monad T describing the non-deterministic part and a functor F describing the deterministic part of a transition system X → **T F X**."@en ;
    askg-onto:inSentence "To this end, Power and Turi [14] argued that trace equivalence arises from a distributive law T F → F T between a monad T describing the non-deterministic part and a functor F describing the deterministic part of a transition system X → **T F X**."^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-deterministic_part,
        askg-data:Entity-f,
        askg-data:Entity-non-deterministic_part,
        askg-data:Entity-power,
        askg-data:Entity-t,
        askg-data:Entity-trace_equivalence,
        askg-data:Entity-transition_system,
        askg-data:Entity-x__t_f_x .

askg-data:Paper-ae04d54115630f9e-Section-2-Paragraph-22-Sentence-223 a askg-onto:Sentence ;
    rdfs:label "Sentence 3"@en ;
    domo:Text "This was taken up by Hasuo et al [8] and gave rise to a sequence of papers [13,11,17,4,5] that discuss coalgebraic aspects of trace equivalence."@en ;
    askg-onto:inSentence "This was taken up by Hasuo et al [8] and gave rise to a sequence of papers [13,11,17,4,5] that discuss coalgebraic aspects of trace equivalence."^^xsd:string ;
    askg-onto:index "3"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-coalgebraic_aspects_of_trace_equivalence,
        askg-data:Entity-hasuo_et_al,
        askg-data:Entity-sequence_of_papers .

askg-data:Paper-ae04d54115630f9e-Section-2-Paragraph-23 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 3"@en ;
    domo:Text "We generalize this approach and call a trace semantics for coalgebras X → GX simply a natural transformation G → M for some monad M. This allows us, for example, and opposed to the work cited in the previous paragraph, to account for nondeterminstic transition systems without explicit termination. Moreover, because of the flexibility afforded by choosing M, both trace semantics and bisimilarity can be accounted for in the same setting. We also show that for G being of the specific forms investigated in [8] and in [17,4,11] there is a uniform way of constructing the a natural transformation of type G → M that induces the traces of *op.cit.* up to canonical forgetting of deadlocks."@en ;
    askg-onto:hasSentence askg-data:Paper-ae04d54115630f9e-Section-2-Paragraph-23-Sentence-231,
        askg-data:Paper-ae04d54115630f9e-Section-2-Paragraph-23-Sentence-232,
        askg-data:Paper-ae04d54115630f9e-Section-2-Paragraph-23-Sentence-233,
        askg-data:Paper-ae04d54115630f9e-Section-2-Paragraph-23-Sentence-234 ;
    askg-onto:index "3"^^xsd:int .

askg-data:Paper-ae04d54115630f9e-Section-2-Paragraph-23-Sentence-231 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "We generalize this approach and call a trace semantics for coalgebras X → GX simply a natural transformation G → M for some monad M."@en ;
    askg-onto:inSentence "We generalize this approach and call a trace semantics for coalgebras X → GX simply a natural transformation G → M for some monad M."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-coalgebras,
        askg-data:Entity-gx,
        askg-data:Entity-monad_m,
        askg-data:Entity-natural_transformation,
        askg-data:Entity-trace_semantics .

askg-data:Paper-ae04d54115630f9e-Section-2-Paragraph-23-Sentence-232 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "This allows us, for example, and opposed to the work cited in the previous paragraph, to account for nondeterminstic transition systems without explicit termination."@en ;
    askg-onto:inSentence "This allows us, for example, and opposed to the work cited in the previous paragraph, to account for nondeterminstic transition systems without explicit termination."^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-explicit_termination,
        askg-data:Entity-nondeterministic_transition_systems .

askg-data:Paper-ae04d54115630f9e-Section-2-Paragraph-23-Sentence-233 a askg-onto:Sentence ;
    rdfs:label "Sentence 3"@en ;
    domo:Text "Moreover, because of the flexibility afforded by choosing M, both trace semantics and bisimilarity can be accounted for in the same setting."@en ;
    askg-onto:inSentence "Moreover, because of the flexibility afforded by choosing M, both trace semantics and bisimilarity can be accounted for in the same setting."^^xsd:string ;
    askg-onto:index "3"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-bisimilarity,
        askg-data:Entity-flexibility,
        askg-data:Entity-m,
        askg-data:Entity-trace_semantics .

askg-data:Paper-ae04d54115630f9e-Section-2-Paragraph-23-Sentence-234 a askg-onto:Sentence ;
    rdfs:label "Sentence 4"@en ;
    domo:Text "We also show that for G being of the specific forms investigated in [8] and in [17,4,11] there is a uniform way of constructing the a natural transformation of type G → M that induces the traces of *op.cit.* up to canonical forgetting of deadlocks."@en ;
    askg-onto:inSentence "We also show that for G being of the specific forms investigated in [8] and in [17,4,11] there is a uniform way of constructing the a natural transformation of type G → M that induces the traces of *op.cit.* up to canonical forgetting of deadlocks."^^xsd:string ;
    askg-onto:index "4"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-a_natural_transformation,
        askg-data:Entity-g,
        askg-data:Entity-m,
        askg-data:Entity-traces_of_opcit .

askg-data:Paper-ae04d54115630f9e-Section-3 a askg-onto:Section ;
    rdfs:label "Section 3"@en ;
    domo:Text "2 Preliminaries"@en ;
    askg-onto:hasParagraph askg-data:Paper-ae04d54115630f9e-Section-3-Paragraph-31,
        askg-data:Paper-ae04d54115630f9e-Section-3-Paragraph-32,
        askg-data:Paper-ae04d54115630f9e-Section-3-Paragraph-33,
        askg-data:Paper-ae04d54115630f9e-Section-3-Paragraph-34,
        askg-data:Paper-ae04d54115630f9e-Section-3-Paragraph-35,
        askg-data:Paper-ae04d54115630f9e-Section-3-Paragraph-36,
        askg-data:Paper-ae04d54115630f9e-Section-3-Paragraph-37,
        askg-data:Paper-ae04d54115630f9e-Section-3-Paragraph-38 ;
    askg-onto:index "3"^^xsd:int ;
    askg-onto:level "2"^^xsd:int .

askg-data:Paper-ae04d54115630f9e-Section-3-Paragraph-31 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 1"@en ;
    domo:Text "We work with a base category C, which we may assume for simplicity to be locally finitely presentable, such as the category Set of sets and functions."@en ;
    askg-onto:hasSentence askg-data:Paper-ae04d54115630f9e-Section-3-Paragraph-31-Sentence-311 ;
    askg-onto:index "1"^^xsd:int .

askg-data:Paper-ae04d54115630f9e-Section-3-Paragraph-31-Sentence-311 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "We work with a base category C, which we may assume for simplicity to be locally finitely presentable, such as the category Set of sets and functions."@en ;
    askg-onto:inSentence "We work with a base category C, which we may assume for simplicity to be locally finitely presentable, such as the category Set of sets and functions."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-category_c,
        askg-data:Entity-category_of_sets_and_functions,
        askg-data:Entity-category_set,
        askg-data:Entity-locally_finitely_presentable .

askg-data:Paper-ae04d54115630f9e-Section-3-Paragraph-32 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 2"@en ;
    domo:Text "Given a functor G : C → C, a G-*coalgebra* is an arrow γ : X → GX. Given two coalgebras γ : X → GX and γ ′: X′ → GX′, a *coalgebra morphism* f : (**X, γ**) → (X′, γ′) is an arrow f : X → X′in C such that γ ′ ◦ f = Gf ◦ γ."@en ;
    askg-onto:hasSentence askg-data:Paper-ae04d54115630f9e-Section-3-Paragraph-32-Sentence-321,
        askg-data:Paper-ae04d54115630f9e-Section-3-Paragraph-32-Sentence-322 ;
    askg-onto:index "2"^^xsd:int .

askg-data:Paper-ae04d54115630f9e-Section-3-Paragraph-32-Sentence-321 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "Given a functor G : C → C, a G-*coalgebra* is an arrow γ : X → GX."@en ;
    askg-onto:inSentence "Given a functor G : C → C, a G-*coalgebra* is an arrow γ : X → GX."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-%CE%B3,
        askg-data:Entity-c__c,
        askg-data:Entity-g,
        askg-data:Entity-g-coalgebra,
        askg-data:Entity-x__gx .

askg-data:Paper-ae04d54115630f9e-Section-3-Paragraph-32-Sentence-322 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "Given two coalgebras γ : X → GX and γ ′: X′ → GX′, a *coalgebra morphism* f : (**X, γ**) → (X′, γ′) is an arrow f : X → X′in C such that γ ′ ◦ f = Gf ◦ γ."@en ;
    askg-onto:inSentence "Given two coalgebras γ : X → GX and γ ′: X′ → GX′, a *coalgebra morphism* f : (**X, γ**) → (X′, γ′) is an arrow f : X → X′in C such that γ ′ ◦ f = Gf ◦ γ."^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-%CE%B3,
        askg-data:Entity-%CE%B3_,
        askg-data:Entity-c,
        askg-data:Entity-coalgebra_morphism,
        askg-data:Entity-f,
        askg-data:Entity-functor,
        askg-data:Entity-gx,
        askg-data:Entity-morphism,
        askg-data:Entity-objects,
        askg-data:Entity-set,
        askg-data:Entity-x,
        askg-data:Entity-x_to_x .

askg-data:Paper-ae04d54115630f9e-Section-3-Paragraph-33 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 3"@en ;
    domo:Text "When C is a concrete category, we say that two states x ∈ X and x ′ ∈ X′in two coalgebras (**X, γ**) and (X′, γ′) are *behaviourally equivalent* if there are coalgebra morphisms **f, f**′ with common codomain (**Y, δ**) such that f(x) = f ′(x ′)."@en ;
    askg-onto:hasSentence askg-data:Paper-ae04d54115630f9e-Section-3-Paragraph-33-Sentence-331 ;
    askg-onto:index "3"^^xsd:int .

askg-data:Paper-ae04d54115630f9e-Section-3-Paragraph-33-Sentence-331 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "When C is a concrete category, we say that two states x ∈ X and x ′ ∈ X′in two coalgebras (**X, γ**) and (X′, γ′) are *behaviourally equivalent* if there are coalgebra morphisms **f, f**′ with common codomain (**Y, δ**) such that f(x) = f ′(x ′)."@en ;
    askg-onto:inSentence "When C is a concrete category, we say that two states x ∈ X and x ′ ∈ X′in two coalgebras (**X, γ**) and (X′, γ′) are *behaviourally equivalent* if there are coalgebra morphisms **f, f**′ with common codomain (**Y, δ**) such that f(x) = f ′(x ′)."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-behaviourally_equivalent,
        askg-data:Entity-coalgebra_morphisms,
        askg-data:Entity-common_codomain,
        askg-data:Entity-states .

askg-data:Paper-ae04d54115630f9e-Section-3-Paragraph-34 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 4"@en ;
    domo:Text "Behavioural equivalence can be computed in a partition-refinement style using the final coalgebra sequence (Gn1)n<ω where 1 is a final object in C and Gn is n fold application of G. The projections p n+1 n: Gn+11 → Gn1 are defined by induction where p 10 : G → 1 is the unique arrow to 1 and p n+2 n+1 = G(p n+1 n )."@en ;
    askg-onto:hasSentence askg-data:Paper-ae04d54115630f9e-Section-3-Paragraph-34-Sentence-341,
        askg-data:Paper-ae04d54115630f9e-Section-3-Paragraph-34-Sentence-342 ;
    askg-onto:index "4"^^xsd:int .

askg-data:Paper-ae04d54115630f9e-Section-3-Paragraph-34-Sentence-341 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "Behavioural equivalence can be computed in a partition-refinement style using the final coalgebra sequence (Gn1)n<ω where 1 is a final object in C and Gn is n fold application of G."@en ;
    askg-onto:inSentence "Behavioural equivalence can be computed in a partition-refinement style using the final coalgebra sequence (Gn1)n<ω where 1 is a final object in C and Gn is n fold application of G."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-1,
        askg-data:Entity-behavioural_equivalence,
        askg-data:Entity-final_coalgebra_sequence,
        askg-data:Entity-final_object,
        askg-data:Entity-gn,
        askg-data:Entity-gn1n%CF%89,
        askg-data:Entity-n_fold_application_of_g,
        askg-data:Entity-partition-refinement_style .

askg-data:Paper-ae04d54115630f9e-Section-3-Paragraph-34-Sentence-342 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "The projections p n+1 n: Gn+11 → Gn1 are defined by induction where p 10 : G → 1 is the unique arrow to 1 and p n+2 n+1 = G(p n+1 n )."@en ;
    askg-onto:inSentence "The projections p n+1 n: Gn+11 → Gn1 are defined by induction where p 10 : G → 1 is the unique arrow to 1 and p n+2 n+1 = G(p n+1 n )."^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-1,
        askg-data:Entity-g,
        askg-data:Entity-gn11__gn1,
        askg-data:Entity-gp_n1_n,
        askg-data:Entity-induction,
        askg-data:Entity-p_10,
        askg-data:Entity-p_n1_n,
        askg-data:Entity-p_n2_n1 .

askg-data:Paper-ae04d54115630f9e-Section-3-Paragraph-35 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 5"@en ;
    domo:Text "For any coalgebra (**X, γ**), there is a *canonical cone* γn : X → Gn1 defined inductively by γ0 : X → 1 and γn+1 = G(γn)γ. We say that two states **x, x**′ ∈ X in (**X, γ**) are *finite-depth behaviourally equivalent* if γn(x) = γn(x ′) for all **n < ω**."@en ;
    askg-onto:hasSentence askg-data:Paper-ae04d54115630f9e-Section-3-Paragraph-35-Sentence-351,
        askg-data:Paper-ae04d54115630f9e-Section-3-Paragraph-35-Sentence-352 ;
    askg-onto:index "5"^^xsd:int .

askg-data:Paper-ae04d54115630f9e-Section-3-Paragraph-35-Sentence-351 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "For any coalgebra (**X, γ**), there is a *canonical cone* γn : X → Gn1 defined inductively by γ0 : X → 1 and γn+1 = G(γn)γ."@en ;
    askg-onto:inSentence "For any coalgebra (**X, γ**), there is a *canonical cone* γn : X → Gn1 defined inductively by γ0 : X → 1 and γn+1 = G(γn)γ."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-%CE%B30,
        askg-data:Entity-%CE%B3n1,
        askg-data:Entity-%CE%B3n__x__gn1,
        askg-data:Entity-canonical_cone,
        askg-data:Entity-coalgebra,
        askg-data:Entity-g%CE%B3n%CE%B3,
        askg-data:Entity-x__1 .

askg-data:Paper-ae04d54115630f9e-Section-3-Paragraph-35-Sentence-352 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "We say that two states **x, x**′ ∈ X in (**X, γ**) are *finite-depth behaviourally equivalent* if γn(x) = γn(x ′) for all **n < ω**."@en ;
    askg-onto:inSentence "We say that two states **x, x**′ ∈ X in (**X, γ**) are *finite-depth behaviourally equivalent* if γn(x) = γn(x ′) for all **n < ω**."^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-%CF%89,
        askg-data:Entity-finite-depth_behaviourally_equivalent,
        askg-data:Entity-n,
        askg-data:Entity-states_x_x .

askg-data:Paper-ae04d54115630f9e-Section-3-Paragraph-36 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 6"@en ;
    domo:Text "(We remark that if G is a finitary set functor, then finite-depth behavioural equivalence implies behavioural equivalence.) A *monad* is given by an operation M on the objects of C and, for each set X, a function ηX : X → MX and, for each f : X → MY , a so-called Kleisli star f ∗: MX → MY satisfying (i) η ∗ X = idMX, (ii) f ∗ ◦ ηX = f, (iii) (g ∗ ◦ f) ∗ = g ∗ ◦ f ∗ for all g : Y → MZ. It follows that M is a functor, given by Mf = (ηf) ∗, and η a natural transformation. Moreover, µ = id ∗: MM → M is a natural transformation and satisfies µ ◦ Mη = µ ◦ ηM = id and µ ◦ Mµ = µ ◦ µM. We obtain the Kleisli star back from µ and M by f ∗ = µMf."@en ;
    askg-onto:hasSentence askg-data:Paper-ae04d54115630f9e-Section-3-Paragraph-36-Sentence-361,
        askg-data:Paper-ae04d54115630f9e-Section-3-Paragraph-36-Sentence-362,
        askg-data:Paper-ae04d54115630f9e-Section-3-Paragraph-36-Sentence-363,
        askg-data:Paper-ae04d54115630f9e-Section-3-Paragraph-36-Sentence-364 ;
    askg-onto:index "6"^^xsd:int .

askg-data:Paper-ae04d54115630f9e-Section-3-Paragraph-36-Sentence-361 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "(We remark that if G is a finitary set functor, then finite-depth behavioural equivalence implies behavioural equivalence.) A *monad* is given by an operation M on the objects of C and, for each set X, a function ηX : X → MX and, for each f : X → MY , a so-called Kleisli star f ∗: MX → MY satisfying (i) η ∗ X = idMX, (ii) f ∗ ◦ ηX = f, (iii) (g ∗ ◦ f) ∗ = g ∗ ◦ f ∗ for all g : Y → MZ."@en ;
    askg-onto:inSentence "(We remark that if G is a finitary set functor, then finite-depth behavioural equivalence implies behavioural equivalence.) A *monad* is given by an operation M on the objects of C and, for each set X, a function ηX : X → MX and, for each f : X → MY , a so-called Kleisli star f ∗: MX → MY satisfying (i) η ∗ X = idMX, (ii) f ∗ ◦ ηX = f, (iii) (g ∗ ◦ f) ∗ = g ∗ ◦ f ∗ for all g : Y → MZ."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-%CE%B7,
        askg-data:Entity-conditions_i_ii_iii,
        askg-data:Entity-f,
        askg-data:Entity-f___%CE%B7x,
        askg-data:Entity-function_%CE%B7x,
        askg-data:Entity-g___f_,
        askg-data:Entity-idmx,
        askg-data:Entity-kleisli_star_f_,
        askg-data:Entity-monad,
        askg-data:Entity-operation_m,
        askg-data:Entity-set_x .

askg-data:Paper-ae04d54115630f9e-Section-3-Paragraph-36-Sentence-362 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "It follows that M is a functor, given by Mf = (ηf) ∗, and η a natural transformation."@en ;
    askg-onto:inSentence "It follows that M is a functor, given by Mf = (ηf) ∗, and η a natural transformation."^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-%CE%B7,
        askg-data:Entity-%CE%B7f_,
        askg-data:Entity-functor,
        askg-data:Entity-m,
        askg-data:Entity-mf,
        askg-data:Entity-natural_transformation .

askg-data:Paper-ae04d54115630f9e-Section-3-Paragraph-36-Sentence-363 a askg-onto:Sentence ;
    rdfs:label "Sentence 3"@en ;
    domo:Text "Moreover, µ = id ∗: MM → M is a natural transformation and satisfies µ ◦ Mη = µ ◦ ηM = id and µ ◦ Mµ = µ ◦ µM."@en ;
    askg-onto:inSentence "Moreover, µ = id ∗: MM → M is a natural transformation and satisfies µ ◦ Mη = µ ◦ ηM = id and µ ◦ Mµ = µ ◦ µM."^^xsd:string ;
    askg-onto:index "3"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-%C2%B5,
        askg-data:Entity-%C2%B5__%C2%B5m,
        askg-data:Entity-%C2%B5__%CE%B7m,
        askg-data:Entity-%C2%B5__m%C2%B5,
        askg-data:Entity-%C2%B5__m%CE%B7,
        askg-data:Entity-%CE%B7,
        askg-data:Entity-id,
        askg-data:Entity-m,
        askg-data:Entity-method,
        askg-data:Entity-natural_transformation .

askg-data:Paper-ae04d54115630f9e-Section-3-Paragraph-36-Sentence-364 a askg-onto:Sentence ;
    rdfs:label "Sentence 4"@en ;
    domo:Text "We obtain the Kleisli star back from µ and M by f ∗ = µMf."@en ;
    askg-onto:inSentence "We obtain the Kleisli star back from µ and M by f ∗ = µMf."^^xsd:string ;
    askg-onto:index "4"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-%C2%B5,
        askg-data:Entity-%C2%B5mf,
        askg-data:Entity-f_,
        askg-data:Entity-kleisli_star,
        askg-data:Entity-m .

askg-data:Paper-ae04d54115630f9e-Section-3-Paragraph-37 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 7"@en ;
    domo:Text "An *Eilenberg-Moore algebra* for the monad M is an arrow ξ : MX → X such that ξ ◦ ηX = idX and ξ ◦ M ξ = ξ ◦ µX."@en ;
    askg-onto:hasSentence askg-data:Paper-ae04d54115630f9e-Section-3-Paragraph-37-Sentence-371 ;
    askg-onto:index "7"^^xsd:int .

askg-data:Paper-ae04d54115630f9e-Section-3-Paragraph-37-Sentence-371 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "An *Eilenberg-Moore algebra* for the monad M is an arrow ξ : MX → X such that ξ ◦ ηX = idX and ξ ◦ M ξ = ξ ◦ µX."@en ;
    askg-onto:inSentence "An *Eilenberg-Moore algebra* for the monad M is an arrow ξ : MX → X such that ξ ◦ ηX = idX and ξ ◦ M ξ = ξ ◦ µX."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-%CE%BE,
        askg-data:Entity-%CE%BE__%CE%B7x__idx,
        askg-data:Entity-%CE%BE__m_%CE%BE__%CE%BE__%C2%B5x,
        askg-data:Entity-eilenberg-moore_algebra,
        askg-data:Entity-monad_m,
        askg-data:Entity-mx__x .

askg-data:Paper-ae04d54115630f9e-Section-3-Paragraph-38 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 8"@en ;
    domo:Text "Recall that an endofunctor G on a category C is said to generate an algebraicallyfree monad G∗if the category of Eilenberg-Moore algebras of G∗is isomorphic over C to the category of G-algebras (i.e. morphisms GX → X). The monad G∗is then also the free monad over G; conversely, free monads are algebraically-free if the base category C is complete [3,12]. E.g., when C is locally finitely presentable, then every finitary functor on C, representing a type of finitely-branching systems, generates an (algebraically-)free monad."@en ;
    askg-onto:hasSentence askg-data:Paper-ae04d54115630f9e-Section-3-Paragraph-38-Sentence-381,
        askg-data:Paper-ae04d54115630f9e-Section-3-Paragraph-38-Sentence-382,
        askg-data:Paper-ae04d54115630f9e-Section-3-Paragraph-38-Sentence-383,
        askg-data:Paper-ae04d54115630f9e-Section-3-Paragraph-38-Sentence-384 ;
    askg-onto:index "8"^^xsd:int .

askg-data:Paper-ae04d54115630f9e-Section-3-Paragraph-38-Sentence-381 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "Recall that an endofunctor G on a category C is said to generate an algebraicallyfree monad G∗if the category of Eilenberg-Moore algebras of G∗is isomorphic over C to the category of G-algebras (i.e."@en ;
    askg-onto:inSentence "Recall that an endofunctor G on a category C is said to generate an algebraicallyfree monad G∗if the category of Eilenberg-Moore algebras of G∗is isomorphic over C to the category of G-algebras (i.e."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-algebraically_free_monad_g,
        askg-data:Entity-category_c,
        askg-data:Entity-category_of_g-algebras,
        askg-data:Entity-eilenberg-moore_algebras,
        askg-data:Entity-endofunctor_g .

askg-data:Paper-ae04d54115630f9e-Section-3-Paragraph-38-Sentence-382 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "morphisms GX → X)."@en ;
    askg-onto:inSentence "morphisms GX → X)."^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-gx,
        askg-data:Entity-x .

askg-data:Paper-ae04d54115630f9e-Section-3-Paragraph-38-Sentence-383 a askg-onto:Sentence ;
    rdfs:label "Sentence 3"@en ;
    domo:Text "The monad G∗is then also the free monad over G; conversely, free monads are algebraically-free if the base category C is complete [3,12]."@en ;
    askg-onto:inSentence "The monad G∗is then also the free monad over G; conversely, free monads are algebraically-free if the base category C is complete [3,12]."^^xsd:string ;
    askg-onto:index "3"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-free_monads,
        askg-data:Entity-g,
        askg-data:Entity-the_base_category_c_is_complete .

askg-data:Paper-ae04d54115630f9e-Section-3-Paragraph-38-Sentence-384 a askg-onto:Sentence ;
    rdfs:label "Sentence 4"@en ;
    domo:Text "E.g., when C is locally finitely presentable, then every finitary functor on C, representing a type of finitely-branching systems, generates an (algebraically-)free monad."@en ;
    askg-onto:inSentence "E.g., when C is locally finitely presentable, then every finitary functor on C, representing a type of finitely-branching systems, generates an (algebraically-)free monad."^^xsd:string ;
    askg-onto:index "4"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-algebraically-free_monad,
        askg-data:Entity-c,
        askg-data:Entity-finitary_functor_on_c,
        askg-data:Entity-finitely-branching_systems,
        askg-data:Entity-locally_finitely_presentable .

askg-data:Paper-ae04d54115630f9e-Section-4 a askg-onto:Section ;
    rdfs:label "Section 4"@en ;
    domo:Text "3 A Simple Definition Of Coalgebraic Trace Equivalence"@en ;
    askg-onto:hasParagraph askg-data:Paper-ae04d54115630f9e-Section-4-Paragraph-41,
        askg-data:Paper-ae04d54115630f9e-Section-4-Paragraph-410,
        askg-data:Paper-ae04d54115630f9e-Section-4-Paragraph-411,
        askg-data:Paper-ae04d54115630f9e-Section-4-Paragraph-412,
        askg-data:Paper-ae04d54115630f9e-Section-4-Paragraph-413,
        askg-data:Paper-ae04d54115630f9e-Section-4-Paragraph-414,
        askg-data:Paper-ae04d54115630f9e-Section-4-Paragraph-415,
        askg-data:Paper-ae04d54115630f9e-Section-4-Paragraph-416,
        askg-data:Paper-ae04d54115630f9e-Section-4-Paragraph-417,
        askg-data:Paper-ae04d54115630f9e-Section-4-Paragraph-42,
        askg-data:Paper-ae04d54115630f9e-Section-4-Paragraph-43,
        askg-data:Paper-ae04d54115630f9e-Section-4-Paragraph-44,
        askg-data:Paper-ae04d54115630f9e-Section-4-Paragraph-45,
        askg-data:Paper-ae04d54115630f9e-Section-4-Paragraph-46,
        askg-data:Paper-ae04d54115630f9e-Section-4-Paragraph-47,
        askg-data:Paper-ae04d54115630f9e-Section-4-Paragraph-48,
        askg-data:Paper-ae04d54115630f9e-Section-4-Paragraph-49 ;
    askg-onto:index "4"^^xsd:int ;
    askg-onto:level "2"^^xsd:int .

askg-data:Paper-ae04d54115630f9e-Section-4-Paragraph-41 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 1"@en ;
    domo:Text "Recall the classical distinction between bisimilarity and trace equivalence, the two ends of the *linear-time-branching time spectrum* [19]: to cite a much-belaboured standard example, the two labelled transition systems (over the alphabet Σ = {**a, b, c**})"@en ;
    askg-onto:hasSentence askg-data:Paper-ae04d54115630f9e-Section-4-Paragraph-41-Sentence-411 ;
    askg-onto:index "1"^^xsd:int .

askg-data:Paper-ae04d54115630f9e-Section-4-Paragraph-41-Sentence-411 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "Recall the classical distinction between bisimilarity and trace equivalence, the two ends of the *linear-time-branching time spectrum* [19]: to cite a much-belaboured standard example, the two labelled transition systems (over the alphabet Σ = {**a, b, c**})"@en ;
    askg-onto:inSentence "Recall the classical distinction between bisimilarity and trace equivalence, the two ends of the *linear-time-branching time spectrum* [19]: to cite a much-belaboured standard example, the two labelled transition systems (over the alphabet Σ = {**a, b, c**})"^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-a,
        askg-data:Entity-alphabet,
        askg-data:Entity-b,
        askg-data:Entity-bisimilarity,
        askg-data:Entity-c,
        askg-data:Entity-labelled_transition_systems,
        askg-data:Entity-linear-time-branching_time_spectrum,
        askg-data:Entity-trace_equivalence .

askg-data:Paper-ae04d54115630f9e-Section-4-Paragraph-410 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 10"@en ;
    domo:Text "for all n ∈ ω."@en ;
    askg-onto:hasSentence askg-data:Paper-ae04d54115630f9e-Section-4-Paragraph-410-Sentence-4101 ;
    askg-onto:index "10"^^xsd:int .

askg-data:Paper-ae04d54115630f9e-Section-4-Paragraph-410-Sentence-4101 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "for all n ∈ ω."@en ;
    askg-onto:inSentence "for all n ∈ ω."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-%CF%89,
        askg-data:Entity-n .

askg-data:Paper-ae04d54115630f9e-Section-4-Paragraph-411 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 11"@en ;
    domo:Text "Proof. Induction on n."@en ;
    askg-onto:hasSentence askg-data:Paper-ae04d54115630f9e-Section-4-Paragraph-411-Sentence-4111,
        askg-data:Paper-ae04d54115630f9e-Section-4-Paragraph-411-Sentence-4112 ;
    askg-onto:index "11"^^xsd:int .

askg-data:Paper-ae04d54115630f9e-Section-4-Paragraph-411-Sentence-4111 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "Proof."@en ;
    askg-onto:inSentence "Proof."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-concept,
        askg-data:Entity-proof .

askg-data:Paper-ae04d54115630f9e-Section-4-Paragraph-411-Sentence-4112 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "Induction on n."@en ;
    askg-onto:inSentence "Induction on n."^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-induction,
        askg-data:Entity-n .

askg-data:Paper-ae04d54115630f9e-Section-4-Paragraph-412 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 12"@en ;
    domo:Text "n = 0: We have M!γ (0) = M!η = η! = α0γ0."@en ;
    askg-onto:hasSentence askg-data:Paper-ae04d54115630f9e-Section-4-Paragraph-412-Sentence-4121,
        askg-data:Paper-ae04d54115630f9e-Section-4-Paragraph-412-Sentence-4122 ;
    askg-onto:index "12"^^xsd:int .

askg-data:Paper-ae04d54115630f9e-Section-4-Paragraph-412-Sentence-4121 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "n = 0: We have M!γ (0) = M!η = η!"@en ;
    askg-onto:inSentence "n = 0: We have M!γ (0) = M!η = η!"^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-%CE%B7,
        askg-data:Entity-m%CE%B3_0,
        askg-data:Entity-m%CE%B7 .

askg-data:Paper-ae04d54115630f9e-Section-4-Paragraph-412-Sentence-4122 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "= α0γ0."@en ;
    askg-onto:inSentence "= α0γ0."^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-%CE%B10,
        askg-data:Entity-%CE%B30 .

askg-data:Paper-ae04d54115630f9e-Section-4-Paragraph-413 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 13"@en ;
    domo:Text "n → n + 1: We have αn+1γn+1 = µαG(αn)Gγnγ (Definitions of γn+1, αn+1) = µαG(M!γ = µM(M!γ = M!**µM γ**(n)αγ (Naturality of µ)"@en ;
    askg-onto:hasSentence askg-data:Paper-ae04d54115630f9e-Section-4-Paragraph-413-Sentence-4131 ;
    askg-onto:index "13"^^xsd:int .

askg-data:Paper-ae04d54115630f9e-Section-4-Paragraph-413-Sentence-4131 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "n → n + 1: We have αn+1γn+1 = µαG(αn)Gγnγ (Definitions of γn+1, αn+1) = µαG(M!γ = µM(M!γ = M!**µM γ**(n)αγ (Naturality of µ)"@en ;
    askg-onto:inSentence "n → n + 1: We have αn+1γn+1 = µαG(αn)Gγnγ (Definitions of γn+1, αn+1) = µαG(M!γ = µM(M!γ = M!**µM γ**(n)αγ (Naturality of µ)"^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-%C2%B5%CE%B1g,
        askg-data:Entity-%C2%B5m,
        askg-data:Entity-%C2%B5mm%CE%B3,
        askg-data:Entity-%CE%B1g%CE%B1n,
        askg-data:Entity-%CE%B1n1,
        askg-data:Entity-%CE%B3n1,
        askg-data:Entity-m%C2%B5m_%CE%B3n%CE%B1%CE%B3,
        askg-data:Entity-m%CE%B3 .

askg-data:Paper-ae04d54115630f9e-Section-4-Paragraph-414 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 14"@en ;
    domo:Text "$\\square$ (n))γ (Inductive hypothesis)"@en ;
    askg-onto:hasSentence askg-data:Paper-ae04d54115630f9e-Section-4-Paragraph-414-Sentence-4141 ;
    askg-onto:index "14"^^xsd:int .

askg-data:Paper-ae04d54115630f9e-Section-4-Paragraph-414-Sentence-4141 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "$\\square$ (n))γ (Inductive hypothesis)"@en ;
    askg-onto:inSentence "$\\square$ (n))γ (Inductive hypothesis)"^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-concept,
        askg-data:Entity-inductive_hypothesis .

askg-data:Paper-ae04d54115630f9e-Section-4-Paragraph-415 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 15"@en ;
    domo:Text "$\\mathrm{(n)}$)or $\\square$ $\\gamma^{(n)}\\alpha\\gamma$. (n))αγ (Naturality of α) = M!(γ (n))"@en ;
    askg-onto:hasSentence askg-data:Paper-ae04d54115630f9e-Section-4-Paragraph-415-Sentence-4151,
        askg-data:Paper-ae04d54115630f9e-Section-4-Paragraph-415-Sentence-4152 ;
    askg-onto:index "15"^^xsd:int .

askg-data:Paper-ae04d54115630f9e-Section-4-Paragraph-415-Sentence-4151 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "$\\mathrm{(n)}$)or $\\square$ $\\gamma^{(n)}\\alpha\\gamma$."@en ;
    askg-onto:inSentence "$\\mathrm{(n)}$)or $\\square$ $\\gamma^{(n)}\\alpha\\gamma$."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-%CE%B1,
        askg-data:Entity-%CE%B3n,
        askg-data:Entity-concept .

askg-data:Paper-ae04d54115630f9e-Section-4-Paragraph-415-Sentence-4152 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "(n))αγ (Naturality of α) = M!(γ (n))"@en ;
    askg-onto:inSentence "(n))αγ (Naturality of α) = M!(γ (n))"^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-m%CE%B3_n,
        askg-data:Entity-naturality_of_%CE%B1 .

askg-data:Paper-ae04d54115630f9e-Section-4-Paragraph-416 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 16"@en ;
    domo:Text "$$|\\rangle^{*}\\alpha\\gamma$$"@en ;
    askg-onto:hasSentence askg-data:Paper-ae04d54115630f9e-Section-4-Paragraph-416-Sentence-4161 ;
    askg-onto:index "16"^^xsd:int .

askg-data:Paper-ae04d54115630f9e-Section-4-Paragraph-416-Sentence-4161 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "$$|\\rangle^{*}\\alpha\\gamma$$"@en ;
    askg-onto:inSentence "$$|\\rangle^{*}\\alpha\\gamma$$"^^xsd:string ;
    askg-onto:index "1"^^xsd:int .

askg-data:Paper-ae04d54115630f9e-Section-4-Paragraph-417 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 17"@en ;
    domo:Text "= M!γ (n+1) (1)."@en ;
    askg-onto:hasSentence askg-data:Paper-ae04d54115630f9e-Section-4-Paragraph-417-Sentence-4171 ;
    askg-onto:index "17"^^xsd:int .

askg-data:Paper-ae04d54115630f9e-Section-4-Paragraph-417-Sentence-4171 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "= M!γ (n+1) (1)."@en ;
    askg-onto:inSentence "= M!γ (n+1) (1)."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-concept,
        askg-data:Entity-m%CE%B3_n1 .

askg-data:Paper-ae04d54115630f9e-Section-4-Paragraph-42 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 2"@en ;
    domo:Text "![2_image_0.png](2_image_0.png)"@en ;
    askg-onto:hasSentence askg-data:Paper-ae04d54115630f9e-Section-4-Paragraph-42-Sentence-421 ;
    askg-onto:index "2"^^xsd:int .

askg-data:Paper-ae04d54115630f9e-Section-4-Paragraph-42-Sentence-421 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "![2_image_0.png](2_image_0.png)"@en ;
    askg-onto:inSentence "![2_image_0.png](2_image_0.png)"^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-artificial_intelligence,
        askg-data:Entity-computer_science,
        askg-data:Entity-convolutional_neural_networks,
        askg-data:Entity-data_science,
        askg-data:Entity-deep_learning,
        askg-data:Entity-keras,
        askg-data:Entity-machine_learning,
        askg-data:Entity-natural_language_processing,
        askg-data:Entity-python,
        askg-data:Entity-reinforcement_learning,
        askg-data:Entity-research_area,
        askg-data:Entity-scikit-learn,
        askg-data:Entity-statistics,
        askg-data:Entity-tensorflow .

askg-data:Paper-ae04d54115630f9e-Section-4-Paragraph-43 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 3"@en ;
    domo:Text "are *trace equivalent* in the usual sense [1], as they both admit exactly the traces ab and ac (and prefixes thereof), but not bisimilar, as bisimilarity is sensitive to the fact that the left hand side decides in the first step whether b or c will be enabled in the second step, while the right hand side leaves the decision between b and c open in the first step. In other words, trace equivalence collapses all future branches, retaining only the branching at the current state. Now observe that we can nevertheless construct the trace semantics by stepwise unfolding; to do this, we need to a) remember the last step reached by a given trace in order to continue the trace correctly, and b) implement the collapsing correctly in each step. E.g. for s0 above, this takes the following form: let us call a pair (**u, x**) consisting of a word over Σ and a state x a *pretrace*. Before the first step, we assign, by default, the set {(**ǫ, s**0)} of pretraces, where ǫ denotes the empty word. After the first step, we reach, applying both transitions simultaneously, the set {(a, s10),(**a, s**11)}. After the second step, we reach, again applying two transitions, {(ab, s20),(**ac, s**21)}. Note that after the third step, the set of pretraces will become empty if we proceed in the same manner, as s20 and s21 are both deadlocks. Thus, we will in general need to remember all finite unfoldings of the set of pretraces, as traces ending in deadlocks will be lost on the way. Of course, for purposes of trace equivalence we are no longer interested in the states reached by a given trace, so we forget the state components of all pretraces that we have accumulated, obtaining the expected prefixclosed trace set {**ǫ, a, ab, ac**}."@en ;
    askg-onto:hasSentence askg-data:Paper-ae04d54115630f9e-Section-4-Paragraph-43-Sentence-431,
        askg-data:Paper-ae04d54115630f9e-Section-4-Paragraph-43-Sentence-4310,
        askg-data:Paper-ae04d54115630f9e-Section-4-Paragraph-43-Sentence-4311,
        askg-data:Paper-ae04d54115630f9e-Section-4-Paragraph-43-Sentence-432,
        askg-data:Paper-ae04d54115630f9e-Section-4-Paragraph-43-Sentence-433,
        askg-data:Paper-ae04d54115630f9e-Section-4-Paragraph-43-Sentence-434,
        askg-data:Paper-ae04d54115630f9e-Section-4-Paragraph-43-Sentence-435,
        askg-data:Paper-ae04d54115630f9e-Section-4-Paragraph-43-Sentence-436,
        askg-data:Paper-ae04d54115630f9e-Section-4-Paragraph-43-Sentence-437,
        askg-data:Paper-ae04d54115630f9e-Section-4-Paragraph-43-Sentence-438,
        askg-data:Paper-ae04d54115630f9e-Section-4-Paragraph-43-Sentence-439 ;
    askg-onto:index "3"^^xsd:int .

askg-data:Paper-ae04d54115630f9e-Section-4-Paragraph-43-Sentence-431 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "are *trace equivalent* in the usual sense [1], as they both admit exactly the traces ab and ac (and prefixes thereof), but not bisimilar, as bisimilarity is sensitive to the fact that the left hand side decides in the first step whether b or c will be enabled in the second step, while the right hand side leaves the decision between b and c open in the first step."@en ;
    askg-onto:inSentence "are *trace equivalent* in the usual sense [1], as they both admit exactly the traces ab and ac (and prefixes thereof), but not bisimilar, as bisimilarity is sensitive to the fact that the left hand side decides in the first step whether b or c will be enabled in the second step, while the right hand side leaves the decision between b and c open in the first step."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-b_and_c,
        askg-data:Entity-bisimilarity,
        askg-data:Entity-concept,
        askg-data:Entity-decision_between_b_and_c,
        askg-data:Entity-trace_equivalence,
        askg-data:Entity-traces_ab_and_ac .

askg-data:Paper-ae04d54115630f9e-Section-4-Paragraph-43-Sentence-4310 a askg-onto:Sentence ;
    rdfs:label "Sentence 10"@en ;
    domo:Text "Thus, we will in general need to remember all finite unfoldings of the set of pretraces, as traces ending in deadlocks will be lost on the way."@en ;
    askg-onto:inSentence "Thus, we will in general need to remember all finite unfoldings of the set of pretraces, as traces ending in deadlocks will be lost on the way."^^xsd:string ;
    askg-onto:index "10"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-all_finite_unfoldings_of_the_set_of_pretraces,
        askg-data:Entity-deadlocks,
        askg-data:Entity-finite_unfoldings,
        askg-data:Entity-traces .

askg-data:Paper-ae04d54115630f9e-Section-4-Paragraph-43-Sentence-4311 a askg-onto:Sentence ;
    rdfs:label "Sentence 11"@en ;
    domo:Text "Of course, for purposes of trace equivalence we are no longer interested in the states reached by a given trace, so we forget the state components of all pretraces that we have accumulated, obtaining the expected prefixclosed trace set {**ǫ, a, ab, ac**}."@en ;
    askg-onto:inSentence "Of course, for purposes of trace equivalence we are no longer interested in the states reached by a given trace, so we forget the state components of all pretraces that we have accumulated, obtaining the expected prefixclosed trace set {**ǫ, a, ab, ac**}."^^xsd:string ;
    askg-onto:index "11"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-%C7%AB,
        askg-data:Entity-a,
        askg-data:Entity-ab,
        askg-data:Entity-ac,
        askg-data:Entity-prefix-closed_trace_set,
        askg-data:Entity-trace,
        askg-data:Entity-trace_equivalence .

askg-data:Paper-ae04d54115630f9e-Section-4-Paragraph-43-Sentence-432 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "In other words, trace equivalence collapses all future branches, retaining only the branching at the current state."@en ;
    askg-onto:inSentence "In other words, trace equivalence collapses all future branches, retaining only the branching at the current state."^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-branches,
        askg-data:Entity-branching,
        askg-data:Entity-current_state,
        askg-data:Entity-equivalence,
        askg-data:Entity-state .

askg-data:Paper-ae04d54115630f9e-Section-4-Paragraph-43-Sentence-433 a askg-onto:Sentence ;
    rdfs:label "Sentence 3"@en ;
    domo:Text "Now observe that we can nevertheless construct the trace semantics by stepwise unfolding; to do this, we need to a) remember the last step reached by a given trace in order to continue the trace correctly, and b) implement the collapsing correctly in each step."@en ;
    askg-onto:inSentence "Now observe that we can nevertheless construct the trace semantics by stepwise unfolding; to do this, we need to a) remember the last step reached by a given trace in order to continue the trace correctly, and b) implement the collapsing correctly in each step."^^xsd:string ;
    askg-onto:index "3"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-collapsing,
        askg-data:Entity-each_step,
        askg-data:Entity-step,
        askg-data:Entity-stepwise_unfolding,
        askg-data:Entity-trace,
        askg-data:Entity-trace_correctly,
        askg-data:Entity-trace_semantics .

askg-data:Paper-ae04d54115630f9e-Section-4-Paragraph-43-Sentence-434 a askg-onto:Sentence ;
    rdfs:label "Sentence 4"@en ;
    domo:Text "E.g."@en ;
    askg-onto:inSentence "E.g."^^xsd:string ;
    askg-onto:index "4"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-eg,
        askg-data:Entity-triple .

askg-data:Paper-ae04d54115630f9e-Section-4-Paragraph-43-Sentence-435 a askg-onto:Sentence ;
    rdfs:label "Sentence 5"@en ;
    domo:Text "for s0 above, this takes the following form: let us call a pair (**u, x**) consisting of a word over Σ and a state x a *pretrace*."@en ;
    askg-onto:inSentence "for s0 above, this takes the following form: let us call a pair (**u, x**) consisting of a word over Σ and a state x a *pretrace*."^^xsd:string ;
    askg-onto:index "5"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-pair,
        askg-data:Entity-pretrace,
        askg-data:Entity-state,
        askg-data:Entity-u,
        askg-data:Entity-word,
        askg-data:Entity-x .

askg-data:Paper-ae04d54115630f9e-Section-4-Paragraph-43-Sentence-436 a askg-onto:Sentence ;
    rdfs:label "Sentence 6"@en ;
    domo:Text "Before the first step, we assign, by default, the set {(**ǫ, s**0)} of pretraces, where ǫ denotes the empty word."@en ;
    askg-onto:inSentence "Before the first step, we assign, by default, the set {(**ǫ, s**0)} of pretraces, where ǫ denotes the empty word."^^xsd:string ;
    askg-onto:index "6"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-pretraces,
        askg-data:Entity-set_%C7%AB_s0 .

askg-data:Paper-ae04d54115630f9e-Section-4-Paragraph-43-Sentence-437 a askg-onto:Sentence ;
    rdfs:label "Sentence 7"@en ;
    domo:Text "After the first step, we reach, applying both transitions simultaneously, the set {(a, s10),(**a, s**11)}."@en ;
    askg-onto:inSentence "After the first step, we reach, applying both transitions simultaneously, the set {(a, s10),(**a, s**11)}."^^xsd:string ;
    askg-onto:index "7"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-a,
        askg-data:Entity-set_a_s10_a_s11 .

askg-data:Paper-ae04d54115630f9e-Section-4-Paragraph-43-Sentence-438 a askg-onto:Sentence ;
    rdfs:label "Sentence 8"@en ;
    domo:Text "After the second step, we reach, again applying two transitions, {(ab, s20),(**ac, s**21)}."@en ;
    askg-onto:inSentence "After the second step, we reach, again applying two transitions, {(ab, s20),(**ac, s**21)}."^^xsd:string ;
    askg-onto:index "8"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-ab,
        askg-data:Entity-ac,
        askg-data:Entity-s20,
        askg-data:Entity-s21 .

askg-data:Paper-ae04d54115630f9e-Section-4-Paragraph-43-Sentence-439 a askg-onto:Sentence ;
    rdfs:label "Sentence 9"@en ;
    domo:Text "Note that after the third step, the set of pretraces will become empty if we proceed in the same manner, as s20 and s21 are both deadlocks."@en ;
    askg-onto:inSentence "Note that after the third step, the set of pretraces will become empty if we proceed in the same manner, as s20 and s21 are both deadlocks."^^xsd:string ;
    askg-onto:index "9"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-deadlock,
        askg-data:Entity-s20,
        askg-data:Entity-s21 .

askg-data:Paper-ae04d54115630f9e-Section-4-Paragraph-44 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 4"@en ;
    domo:Text "Recall that we can understand labelled transition systems as coalgebras γ : X → P(Σ × X). What is happening in the unfolding steps is easily recognized as composition with γ in the Kleisli category of a suitable monad, specifically M = P(Σ∗ × ), a monad that contains the functor P(Σ × ) via an obvious natural transformation α. Defining γ (n)as the n-fold iteration of the morphism αγ in the Kleisli category of M, we have γ (0)(s0) = {(**ǫ, s**0)}, γ (1)(s0) = {(a, s10),(**a, s**11)}, γ (2)(s0) = {(ab, s20),(**ac, s**21)}, and γ (3)(s0) = ∅. Forgetting the state component of the pretraces in these sets amounts to postcomposing with M!, where ! is the unique map into 1 = {∗}. These considerations lead to the following definitions. Definition 1. A *trace semantics* for a functor G is a natural transformation α : G → M into a monad M, the *global monad*. Given such an α and a G-coalgebra γ : X → GX, we define the *iterations* γ (n): X → MX of γ, for n ≥ 0, inductively by"@en ;
    askg-onto:hasSentence askg-data:Paper-ae04d54115630f9e-Section-4-Paragraph-44-Sentence-441,
        askg-data:Paper-ae04d54115630f9e-Section-4-Paragraph-44-Sentence-442,
        askg-data:Paper-ae04d54115630f9e-Section-4-Paragraph-44-Sentence-443,
        askg-data:Paper-ae04d54115630f9e-Section-4-Paragraph-44-Sentence-444,
        askg-data:Paper-ae04d54115630f9e-Section-4-Paragraph-44-Sentence-445,
        askg-data:Paper-ae04d54115630f9e-Section-4-Paragraph-44-Sentence-446,
        askg-data:Paper-ae04d54115630f9e-Section-4-Paragraph-44-Sentence-447,
        askg-data:Paper-ae04d54115630f9e-Section-4-Paragraph-44-Sentence-448,
        askg-data:Paper-ae04d54115630f9e-Section-4-Paragraph-44-Sentence-449 ;
    askg-onto:index "4"^^xsd:int .

askg-data:Paper-ae04d54115630f9e-Section-4-Paragraph-44-Sentence-441 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "Recall that we can understand labelled transition systems as coalgebras γ : X → P(Σ × X)."@en ;
    askg-onto:inSentence "Recall that we can understand labelled transition systems as coalgebras γ : X → P(Σ × X)."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-coalgebras_%CE%B3__x__p%CF%82__x,
        askg-data:Entity-labelled_transition_systems .

askg-data:Paper-ae04d54115630f9e-Section-4-Paragraph-44-Sentence-442 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "What is happening in the unfolding steps is easily recognized as composition with γ in the Kleisli category of a suitable monad, specifically M = P(Σ∗ × ), a monad that contains the functor P(Σ × ) via an obvious natural transformation α."@en ;
    askg-onto:inSentence "What is happening in the unfolding steps is easily recognized as composition with γ in the Kleisli category of a suitable monad, specifically M = P(Σ∗ × ), a monad that contains the functor P(Σ × ) via an obvious natural transformation α."^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-composition,
        askg-data:Entity-kleisli_category,
        askg-data:Entity-m,
        askg-data:Entity-m__p%CF%82__,
        askg-data:Entity-monad,
        askg-data:Entity-natural_transformation_%CE%B1,
        askg-data:Entity-p%CF%82__,
        askg-data:Entity-transformation .

askg-data:Paper-ae04d54115630f9e-Section-4-Paragraph-44-Sentence-443 a askg-onto:Sentence ;
    rdfs:label "Sentence 3"@en ;
    domo:Text "Defining γ (n)as the n-fold iteration of the morphism αγ in the Kleisli category of M, we have γ (0)(s0) = {(**ǫ, s**0)}, γ (1)(s0) = {(a, s10),(**a, s**11)}, γ (2)(s0) = {(ab, s20),(**ac, s**21)}, and γ (3)(s0) = ∅."@en ;
    askg-onto:inSentence "Defining γ (n)as the n-fold iteration of the morphism αγ in the Kleisli category of M, we have γ (0)(s0) = {(**ǫ, s**0)}, γ (1)(s0) = {(a, s10),(**a, s**11)}, γ (2)(s0) = {(ab, s20),(**ac, s**21)}, and γ (3)(s0) = ∅."^^xsd:string ;
    askg-onto:index "3"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-,
        askg-data:Entity-%C7%AB_s0,
        askg-data:Entity-%CE%B3_0s0,
        askg-data:Entity-%CE%B3_1s0,
        askg-data:Entity-%CE%B3_2s0,
        askg-data:Entity-%CE%B3_3s0,
        askg-data:Entity-%CE%B3_n,
        askg-data:Entity-a_s10a_s11,
        askg-data:Entity-ab_s20ac_s21,
        askg-data:Entity-n-fold_iteration_of_the_morphism_%CE%B1%CE%B3_in_the_kleisli_category_of_m .

askg-data:Paper-ae04d54115630f9e-Section-4-Paragraph-44-Sentence-444 a askg-onto:Sentence ;
    rdfs:label "Sentence 4"@en ;
    domo:Text "Forgetting the state component of the pretraces in these sets amounts to postcomposing with M!, where !"@en ;
    askg-onto:inSentence "Forgetting the state component of the pretraces in these sets amounts to postcomposing with M!, where !"^^xsd:string ;
    askg-onto:index "4"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-m,
        askg-data:Entity-pretraces .

askg-data:Paper-ae04d54115630f9e-Section-4-Paragraph-44-Sentence-445 a askg-onto:Sentence ;
    rdfs:label "Sentence 5"@en ;
    domo:Text "is the unique map into 1 = {∗}."@en ;
    askg-onto:inSentence "is the unique map into 1 = {∗}."^^xsd:string ;
    askg-onto:index "5"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-,
        askg-data:Entity-1__ .

askg-data:Paper-ae04d54115630f9e-Section-4-Paragraph-44-Sentence-446 a askg-onto:Sentence ;
    rdfs:label "Sentence 6"@en ;
    domo:Text "These considerations lead to the following definitions."@en ;
    askg-onto:inSentence "These considerations lead to the following definitions."^^xsd:string ;
    askg-onto:index "6"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-considerations,
        askg-data:Entity-definitions .

askg-data:Paper-ae04d54115630f9e-Section-4-Paragraph-44-Sentence-447 a askg-onto:Sentence ;
    rdfs:label "Sentence 7"@en ;
    domo:Text "Definition 1."@en ;
    askg-onto:inSentence "Definition 1."^^xsd:string ;
    askg-onto:index "7"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-concept,
        askg-data:Entity-definition_1 .

askg-data:Paper-ae04d54115630f9e-Section-4-Paragraph-44-Sentence-448 a askg-onto:Sentence ;
    rdfs:label "Sentence 8"@en ;
    domo:Text "A *trace semantics* for a functor G is a natural transformation α : G → M into a monad M, the *global monad*."@en ;
    askg-onto:inSentence "A *trace semantics* for a functor G is a natural transformation α : G → M into a monad M, the *global monad*."^^xsd:string ;
    askg-onto:index "8"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-functor_g,
        askg-data:Entity-global_monad,
        askg-data:Entity-monad_m,
        askg-data:Entity-natural_transformation,
        askg-data:Entity-trace_semantics .

askg-data:Paper-ae04d54115630f9e-Section-4-Paragraph-44-Sentence-449 a askg-onto:Sentence ;
    rdfs:label "Sentence 9"@en ;
    domo:Text "Given such an α and a G-coalgebra γ : X → GX, we define the *iterations* γ (n): X → MX of γ, for n ≥ 0, inductively by"@en ;
    askg-onto:inSentence "Given such an α and a G-coalgebra γ : X → GX, we define the *iterations* γ (n): X → MX of γ, for n ≥ 0, inductively by"^^xsd:string ;
    askg-onto:index "9"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-%CE%B3,
        askg-data:Entity-%CE%B3n,
        askg-data:Entity-domain,
        askg-data:Entity-g-coalgebra,
        askg-data:Entity-gx,
        askg-data:Entity-mx,
        askg-data:Entity-n,
        askg-data:Entity-x .

askg-data:Paper-ae04d54115630f9e-Section-4-Paragraph-45 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 5"@en ;
    domo:Text "$$\\gamma^{(0)}=\\eta x\\qquad\\gamma^{(n+1)}$$"@en ;
    askg-onto:hasSentence askg-data:Paper-ae04d54115630f9e-Section-4-Paragraph-45-Sentence-451 ;
    askg-onto:index "5"^^xsd:int .

askg-data:Paper-ae04d54115630f9e-Section-4-Paragraph-45-Sentence-451 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "$$\\gamma^{(0)}=\\eta x\\qquad\\gamma^{(n+1)}$$"@en ;
    askg-onto:inSentence "$$\\gamma^{(0)}=\\eta x\\qquad\\gamma^{(n+1)}$$"^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-%CE%B30,
        askg-data:Entity-%CE%B3n1,
        askg-data:Entity-%CE%B7_x .

askg-data:Paper-ae04d54115630f9e-Section-4-Paragraph-46 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 6"@en ;
    domo:Text "(n+1) = (αγ) ∗γ (n) where the unit η and the Kleisli star ∗ are those of M (in particular γ (1) = αγ). Then the α*-trace sequence* of a state x ∈ X is the sequence"@en ;
    askg-onto:hasSentence askg-data:Paper-ae04d54115630f9e-Section-4-Paragraph-46-Sentence-461,
        askg-data:Paper-ae04d54115630f9e-Section-4-Paragraph-46-Sentence-462 ;
    askg-onto:index "6"^^xsd:int .

askg-data:Paper-ae04d54115630f9e-Section-4-Paragraph-46-Sentence-461 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "(n+1) = (αγ) ∗γ (n) where the unit η and the Kleisli star ∗ are those of M (in particular γ (1) = αγ)."@en ;
    askg-onto:inSentence "(n+1) = (αγ) ∗γ (n) where the unit η and the Kleisli star ∗ are those of M (in particular γ (1) = αγ)."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-%CE%B1%CE%B3,
        askg-data:Entity-%CE%B1%CE%B3_%CE%B3_n,
        askg-data:Entity-%CE%B3_1,
        askg-data:Entity-%CE%B7,
        askg-data:Entity-m,
        askg-data:Entity-n .

askg-data:Paper-ae04d54115630f9e-Section-4-Paragraph-46-Sentence-462 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "Then the α*-trace sequence* of a state x ∈ X is the sequence"@en ;
    askg-onto:inSentence "Then the α*-trace sequence* of a state x ∈ X is the sequence"^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-%CE%B1-trace_sequence,
        askg-data:Entity-state_x__x .

askg-data:Paper-ae04d54115630f9e-Section-4-Paragraph-47 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 7"@en ;
    domo:Text "$T_{\\gamma}^{\\mathrm{tr}}(x)$ ? α γ(x) = (M!γ (n)(x))n<ω, with ! denoting the unique map X → 1 as above. Two states x and y in G-coalgebras γ : X → GX and δ : Y → GY , respectively, are α*-trace equivalent* if"@en ;
    askg-onto:hasSentence askg-data:Paper-ae04d54115630f9e-Section-4-Paragraph-47-Sentence-471,
        askg-data:Paper-ae04d54115630f9e-Section-4-Paragraph-47-Sentence-472,
        askg-data:Paper-ae04d54115630f9e-Section-4-Paragraph-47-Sentence-473,
        askg-data:Paper-ae04d54115630f9e-Section-4-Paragraph-47-Sentence-474 ;
    askg-onto:index "7"^^xsd:int .

askg-data:Paper-ae04d54115630f9e-Section-4-Paragraph-47-Sentence-471 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "$T_{\\gamma}^{\\mathrm{tr}}(x)$ ?"@en ;
    askg-onto:inSentence "$T_{\\gamma}^{\\mathrm{tr}}(x)$ ?"^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-mathematical_expression,
        askg-data:Entity-t_eta%09exttrx .

askg-data:Paper-ae04d54115630f9e-Section-4-Paragraph-47-Sentence-472 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "α γ(x) = (M!γ (n)(x))n<ω, with !"@en ;
    askg-onto:inSentence "α γ(x) = (M!γ (n)(x))n<ω, with !"^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-%CE%B3x,
        askg-data:Entity-m%CE%B3_nx .

askg-data:Paper-ae04d54115630f9e-Section-4-Paragraph-47-Sentence-473 a askg-onto:Sentence ;
    rdfs:label "Sentence 3"@en ;
    domo:Text "denoting the unique map X → 1 as above."@en ;
    askg-onto:inSentence "denoting the unique map X → 1 as above."^^xsd:string ;
    askg-onto:index "3"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-1,
        askg-data:Entity-x .

askg-data:Paper-ae04d54115630f9e-Section-4-Paragraph-47-Sentence-474 a askg-onto:Sentence ;
    rdfs:label "Sentence 4"@en ;
    domo:Text "Two states x and y in G-coalgebras γ : X → GX and δ : Y → GY , respectively, are α*-trace equivalent* if"@en ;
    askg-onto:inSentence "Two states x and y in G-coalgebras γ : X → GX and δ : Y → GY , respectively, are α*-trace equivalent* if"^^xsd:string ;
    askg-onto:index "4"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-%CE%B1-trace_equivalent,
        askg-data:Entity-%CE%B3,
        askg-data:Entity-%CE%B4,
        askg-data:Entity-g-coalgebras,
        askg-data:Entity-x,
        askg-data:Entity-x__gx,
        askg-data:Entity-x_and_y,
        askg-data:Entity-y,
        askg-data:Entity-y__gy .

askg-data:Paper-ae04d54115630f9e-Section-4-Paragraph-48 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 8"@en ;
    domo:Text "$T^{\\alpha}_{\\gamma}(x)=T^{\\alpha}_{\\delta}(y)$... (Although we use an element-based formulation for readability, this definition clearly does make sense over arbitrary complete base categories.) Of course, one shows by induction over n that γ n+1 = (γ (n)) ∗αγ for all **n < ω.** (1) We first note that the trace sequence factors through the initial ω-segment of the terminal sequence. Recall from Section 2 that a G-coalgebra γ induces a cone (γn) into the final sequence. Lemma 2. Let α : G → M be a trace semantics for G, and define natural transformations αn : Gn → M for **n < ω** recursively by α0 = η and αn+1 = **µαGα**n. If γ *is a* G*-coalgebra, then* (n) = αnγn *for all* **n < ω**"@en ;
    askg-onto:hasSentence askg-data:Paper-ae04d54115630f9e-Section-4-Paragraph-48-Sentence-481,
        askg-data:Paper-ae04d54115630f9e-Section-4-Paragraph-48-Sentence-482,
        askg-data:Paper-ae04d54115630f9e-Section-4-Paragraph-48-Sentence-483,
        askg-data:Paper-ae04d54115630f9e-Section-4-Paragraph-48-Sentence-484,
        askg-data:Paper-ae04d54115630f9e-Section-4-Paragraph-48-Sentence-485,
        askg-data:Paper-ae04d54115630f9e-Section-4-Paragraph-48-Sentence-486 ;
    askg-onto:index "8"^^xsd:int .

askg-data:Paper-ae04d54115630f9e-Section-4-Paragraph-48-Sentence-481 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "$T^{\\alpha}_{\\gamma}(x)=T^{\\alpha}_{\\delta}(y)$..."@en ;
    askg-onto:inSentence "$T^{\\alpha}_{\\gamma}(x)=T^{\\alpha}_{\\delta}(y)$..."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-talpha_deltay,
        askg-data:Entity-talpha_gammax .

askg-data:Paper-ae04d54115630f9e-Section-4-Paragraph-48-Sentence-482 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "(Although we use an element-based formulation for readability, this definition clearly does make sense over arbitrary complete base categories.) Of course, one shows by induction over n that γ n+1 = (γ (n)) ∗αγ for all **n < ω.** (1) We first note that the trace sequence factors through the initial ω-segment of the terminal sequence."@en ;
    askg-onto:inSentence "(Although we use an element-based formulation for readability, this definition clearly does make sense over arbitrary complete base categories.) Of course, one shows by induction over n that γ n+1 = (γ (n)) ∗αγ for all **n < ω.** (1) We first note that the trace sequence factors through the initial ω-segment of the terminal sequence."^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-%CF%89,
        askg-data:Entity-initial_%CF%89-segment,
        askg-data:Entity-n,
        askg-data:Entity-sequence,
        askg-data:Entity-terminal_sequence,
        askg-data:Entity-trace_sequence .

askg-data:Paper-ae04d54115630f9e-Section-4-Paragraph-48-Sentence-483 a askg-onto:Sentence ;
    rdfs:label "Sentence 3"@en ;
    domo:Text "Recall from Section 2 that a G-coalgebra γ induces a cone (γn) into the final sequence."@en ;
    askg-onto:inSentence "Recall from Section 2 that a G-coalgebra γ induces a cone (γn) into the final sequence."^^xsd:string ;
    askg-onto:index "3"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-cone,
        askg-data:Entity-final_sequence,
        askg-data:Entity-g-coalgebra .

askg-data:Paper-ae04d54115630f9e-Section-4-Paragraph-48-Sentence-484 a askg-onto:Sentence ;
    rdfs:label "Sentence 4"@en ;
    domo:Text "Lemma 2."@en ;
    askg-onto:inSentence "Lemma 2."^^xsd:string ;
    askg-onto:index "4"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-lemma_2,
        askg-data:Entity-mathematics .

askg-data:Paper-ae04d54115630f9e-Section-4-Paragraph-48-Sentence-485 a askg-onto:Sentence ;
    rdfs:label "Sentence 5"@en ;
    domo:Text "Let α : G → M be a trace semantics for G, and define natural transformations αn : Gn → M for **n < ω** recursively by α0 = η and αn+1 = **µαGα**n."@en ;
    askg-onto:inSentence "Let α : G → M be a trace semantics for G, and define natural transformations αn : Gn → M for **n < ω** recursively by α0 = η and αn+1 = **µαGα**n."^^xsd:string ;
    askg-onto:index "5"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-%C2%B5%CE%B1g%CE%B1n,
        askg-data:Entity-%CE%B1,
        askg-data:Entity-%CE%B10__%CE%B7,
        askg-data:Entity-%CE%B1n,
        askg-data:Entity-%CE%B1n1,
        askg-data:Entity-g,
        askg-data:Entity-gn .

askg-data:Paper-ae04d54115630f9e-Section-4-Paragraph-48-Sentence-486 a askg-onto:Sentence ;
    rdfs:label "Sentence 6"@en ;
    domo:Text "If γ *is a* G*-coalgebra, then* (n) = αnγn *for all* **n < ω**"@en ;
    askg-onto:inSentence "If γ *is a* G*-coalgebra, then* (n) = αnγn *for all* **n < ω**"^^xsd:string ;
    askg-onto:index "6"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-%CE%B3,
        askg-data:Entity-g-coalgebra,
        askg-data:Entity-n,
        askg-data:Entity-n__%CF%89 .

askg-data:Paper-ae04d54115630f9e-Section-4-Paragraph-49 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 9"@en ;
    domo:Text "$$M!\\gamma^{(n)}=\\alpha_{n}\\gamma_{n}\\qquad f$$"@en ;
    askg-onto:hasSentence askg-data:Paper-ae04d54115630f9e-Section-4-Paragraph-49-Sentence-491 ;
    askg-onto:index "9"^^xsd:int .

askg-data:Paper-ae04d54115630f9e-Section-4-Paragraph-49-Sentence-491 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "$$M!\\gamma^{(n)}=\\alpha_{n}\\gamma_{n}\\qquad f$$"@en ;
    askg-onto:inSentence "$$M!\\gamma^{(n)}=\\alpha_{n}\\gamma_{n}\\qquad f$$"^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-alpha_ngamma_n,
        askg-data:Entity-mgamman .

askg-data:Paper-ae04d54115630f9e-Section-5 a askg-onto:Section ;
    rdfs:label "Section 5"@en ;
    domo:Text "⊓⊔ Corollary 3. Finite-Depth Behaviourally Equivalent States Are Α-Trace Equivalent."@en ;
    askg-onto:hasParagraph askg-data:Paper-ae04d54115630f9e-Section-5-Paragraph-51,
        askg-data:Paper-ae04d54115630f9e-Section-5-Paragraph-52,
        askg-data:Paper-ae04d54115630f9e-Section-5-Paragraph-53 ;
    askg-onto:index "5"^^xsd:int ;
    askg-onto:level "3"^^xsd:int .

askg-data:Paper-ae04d54115630f9e-Section-5-Paragraph-51 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 1"@en ;
    domo:Text "Remark 4. In most items of related work, stronger assumptions than we make here allow for identifying an *object* of traces in a suitable category, such as the Kleisli category [8] or the Eilenberg-Moore category [11,4] of a monad that forms part of the type functor. In our setting, a similar endeavour boils down to characterizing, possibly by means of a limit of a suitable diagram, those α-trace sequences that are G*-realizable*, i.e. induced by a state in some G-coalgebra. We do not currently have a general answer for this but point out that in a variant of the special case treated in the beginning of the section where we take G to be P ∗ (Σ × ), with P ∗ denoting nonempty powerset, and M = P(Σ∗ × )), the set of G-realizable traces is the limit of the infinite diagram"@en ;
    askg-onto:hasSentence askg-data:Paper-ae04d54115630f9e-Section-5-Paragraph-51-Sentence-511,
        askg-data:Paper-ae04d54115630f9e-Section-5-Paragraph-51-Sentence-512,
        askg-data:Paper-ae04d54115630f9e-Section-5-Paragraph-51-Sentence-513,
        askg-data:Paper-ae04d54115630f9e-Section-5-Paragraph-51-Sentence-514,
        askg-data:Paper-ae04d54115630f9e-Section-5-Paragraph-51-Sentence-515 ;
    askg-onto:index "1"^^xsd:int .

askg-data:Paper-ae04d54115630f9e-Section-5-Paragraph-51-Sentence-511 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "Remark 4."@en ;
    askg-onto:inSentence "Remark 4."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-note,
        askg-data:Entity-remark_4 .

askg-data:Paper-ae04d54115630f9e-Section-5-Paragraph-51-Sentence-512 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "In most items of related work, stronger assumptions than we make here allow for identifying an *object* of traces in a suitable category, such as the Kleisli category [8] or the Eilenberg-Moore category [11,4] of a monad that forms part of the type functor."@en ;
    askg-onto:inSentence "In most items of related work, stronger assumptions than we make here allow for identifying an *object* of traces in a suitable category, such as the Kleisli category [8] or the Eilenberg-Moore category [11,4] of a monad that forms part of the type functor."^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-category,
        askg-data:Entity-eilenberg-moore_category,
        askg-data:Entity-kleisli_category,
        askg-data:Entity-monad,
        askg-data:Entity-type_functor .

askg-data:Paper-ae04d54115630f9e-Section-5-Paragraph-51-Sentence-513 a askg-onto:Sentence ;
    rdfs:label "Sentence 3"@en ;
    domo:Text "In our setting, a similar endeavour boils down to characterizing, possibly by means of a limit of a suitable diagram, those α-trace sequences that are G*-realizable*, i.e."@en ;
    askg-onto:inSentence "In our setting, a similar endeavour boils down to characterizing, possibly by means of a limit of a suitable diagram, those α-trace sequences that are G*-realizable*, i.e."^^xsd:string ;
    askg-onto:index "3"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-%CE%B1-trace_sequences,
        askg-data:Entity-g-realizable .

askg-data:Paper-ae04d54115630f9e-Section-5-Paragraph-51-Sentence-514 a askg-onto:Sentence ;
    rdfs:label "Sentence 4"@en ;
    domo:Text "induced by a state in some G-coalgebra."@en ;
    askg-onto:inSentence "induced by a state in some G-coalgebra."^^xsd:string ;
    askg-onto:index "4"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-g-coalgebra,
        askg-data:Entity-some .

askg-data:Paper-ae04d54115630f9e-Section-5-Paragraph-51-Sentence-515 a askg-onto:Sentence ;
    rdfs:label "Sentence 5"@en ;
    domo:Text "We do not currently have a general answer for this but point out that in a variant of the special case treated in the beginning of the section where we take G to be P ∗ (Σ × ), with P ∗ denoting nonempty powerset, and M = P(Σ∗ × )), the set of G-realizable traces is the limit of the infinite diagram"@en ;
    askg-onto:inSentence "We do not currently have a general answer for this but point out that in a variant of the special case treated in the beginning of the section where we take G to be P ∗ (Σ × ), with P ∗ denoting nonempty powerset, and M = P(Σ∗ × )), the set of G-realizable traces is the limit of the infinite diagram"^^xsd:string ;
    askg-onto:index "5"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-g,
        askg-data:Entity-m,
        askg-data:Entity-nonempty_powerset,
        askg-data:Entity-p%CF%82__,
        askg-data:Entity-p_,
        askg-data:Entity-p__%CF%83__,
        askg-data:Entity-the_limit_of_the_infinite_diagram,
        askg-data:Entity-the_set_of_g-realizable_traces .

askg-data:Paper-ae04d54115630f9e-Section-5-Paragraph-52 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 2"@en ;
    domo:Text "![4_image_0.png](4_image_0.png)"@en ;
    askg-onto:hasSentence askg-data:Paper-ae04d54115630f9e-Section-5-Paragraph-52-Sentence-521 ;
    askg-onto:index "2"^^xsd:int .

askg-data:Paper-ae04d54115630f9e-Section-5-Paragraph-52-Sentence-521 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "![4_image_0.png](4_image_0.png)"@en ;
    askg-onto:inSentence "![4_image_0.png](4_image_0.png)"^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-artificial_intelligence,
        askg-data:Entity-computer_science,
        askg-data:Entity-data_analysis,
        askg-data:Entity-healthcare,
        askg-data:Entity-machine_learning,
        askg-data:Entity-medical_imaging,
        askg-data:Entity-natural_language_processing,
        askg-data:Entity-qualitative_research,
        askg-data:Entity-quantitative_research,
        askg-data:Entity-research_methodology,
        askg-data:Entity-social_sciences .

askg-data:Paper-ae04d54115630f9e-Section-5-Paragraph-53 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 3"@en ;
    domo:Text "where R denotes the immediate prefix relation R = {(u, ua) | u ∈ Σ∗, a ∈ Σ} with projections π1, π2 : R → Σ∗. We expect that this description generalizes to cases where G and M have the form T F and T F∗, respectively, where T is a monad and F ∗ is the free monad over the functor F, possibly under additional assumptions. In the case at hand, the limit of the diagram is the set of all subsets A of Σ∗ × 1 ∼= Σ∗that are prefix-closed and *extensible* in the sense that for every u ∈ A there exists a ∈ Σ such that ua ∈ A."@en ;
    askg-onto:hasSentence askg-data:Paper-ae04d54115630f9e-Section-5-Paragraph-53-Sentence-531,
        askg-data:Paper-ae04d54115630f9e-Section-5-Paragraph-53-Sentence-532,
        askg-data:Paper-ae04d54115630f9e-Section-5-Paragraph-53-Sentence-533 ;
    askg-onto:index "3"^^xsd:int .

askg-data:Paper-ae04d54115630f9e-Section-5-Paragraph-53-Sentence-531 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "where R denotes the immediate prefix relation R = {(u, ua) | u ∈ Σ∗, a ∈ Σ} with projections π1, π2 : R → Σ∗."@en ;
    askg-onto:inSentence "where R denotes the immediate prefix relation R = {(u, ua) | u ∈ Σ∗, a ∈ Σ} with projections π1, π2 : R → Σ∗."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-%CF%801_%CF%802,
        askg-data:Entity-immediate_prefix_relation,
        askg-data:Entity-r .

askg-data:Paper-ae04d54115630f9e-Section-5-Paragraph-53-Sentence-532 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "We expect that this description generalizes to cases where G and M have the form T F and T F∗, respectively, where T is a monad and F ∗ is the free monad over the functor F, possibly under additional assumptions."@en ;
    askg-onto:inSentence "We expect that this description generalizes to cases where G and M have the form T F and T F∗, respectively, where T is a monad and F ∗ is the free monad over the functor F, possibly under additional assumptions."^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-f,
        askg-data:Entity-functor,
        askg-data:Entity-functor_f,
        askg-data:Entity-g,
        askg-data:Entity-m,
        askg-data:Entity-monad,
        askg-data:Entity-t,
        askg-data:Entity-t_f .

askg-data:Paper-ae04d54115630f9e-Section-5-Paragraph-53-Sentence-533 a askg-onto:Sentence ;
    rdfs:label "Sentence 3"@en ;
    domo:Text "In the case at hand, the limit of the diagram is the set of all subsets A of Σ∗ × 1 ∼= Σ∗that are prefix-closed and *extensible* in the sense that for every u ∈ A there exists a ∈ Σ such that ua ∈ A."@en ;
    askg-onto:inSentence "In the case at hand, the limit of the diagram is the set of all subsets A of Σ∗ × 1 ∼= Σ∗that are prefix-closed and *extensible* in the sense that for every u ∈ A there exists a ∈ Σ such that ua ∈ A."^^xsd:string ;
    askg-onto:index "3"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-all_subsets_of_%CF%83__1,
        askg-data:Entity-for_every_u__a_there_exists_a__%CF%83_such_that_ua__a .

askg-data:Paper-ae04d54115630f9e-Section-6 a askg-onto:Section ;
    rdfs:label "Section 6"@en ;
    domo:Text "4 Examples"@en ;
    askg-onto:hasParagraph askg-data:Paper-ae04d54115630f9e-Section-6-Paragraph-61,
        askg-data:Paper-ae04d54115630f9e-Section-6-Paragraph-62,
        askg-data:Paper-ae04d54115630f9e-Section-6-Paragraph-63,
        askg-data:Paper-ae04d54115630f9e-Section-6-Paragraph-64,
        askg-data:Paper-ae04d54115630f9e-Section-6-Paragraph-65 ;
    askg-onto:index "6"^^xsd:int ;
    askg-onto:level "2"^^xsd:int .

askg-data:Paper-ae04d54115630f9e-Section-6-Paragraph-61 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 1"@en ;
    domo:Text "We show that various process equivalences are subsumed under α-trace equivalence."@en ;
    askg-onto:hasSentence askg-data:Paper-ae04d54115630f9e-Section-6-Paragraph-61-Sentence-611 ;
    askg-onto:index "1"^^xsd:int .

askg-data:Paper-ae04d54115630f9e-Section-6-Paragraph-61-Sentence-611 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "We show that various process equivalences are subsumed under α-trace equivalence."@en ;
    askg-onto:inSentence "We show that various process equivalences are subsumed under α-trace equivalence."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-%CE%B1-trace_equivalence,
        askg-data:Entity-process_equivalences .

askg-data:Paper-ae04d54115630f9e-Section-6-Paragraph-62 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 2"@en ;
    domo:Text "Finite-depth behavioural equivalence One pleasant aspect of α-trace equivalence is that it spans, at least for finitely branching systems, the entire length of the linear-timebranching-time spectrum, in the sense that even (finite-depth) behavioural equivalence coincides with α-trace equivalence for a suitable α. This is conveniently formulated using the following terminology. Definition 5. We say that an endofunctor G on a category with a terminal object 1 is non-empty if G1 has a global element."@en ;
    askg-onto:hasSentence askg-data:Paper-ae04d54115630f9e-Section-6-Paragraph-62-Sentence-621,
        askg-data:Paper-ae04d54115630f9e-Section-6-Paragraph-62-Sentence-622,
        askg-data:Paper-ae04d54115630f9e-Section-6-Paragraph-62-Sentence-623,
        askg-data:Paper-ae04d54115630f9e-Section-6-Paragraph-62-Sentence-624 ;
    askg-onto:index "2"^^xsd:int .

askg-data:Paper-ae04d54115630f9e-Section-6-Paragraph-62-Sentence-621 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "Finite-depth behavioural equivalence One pleasant aspect of α-trace equivalence is that it spans, at least for finitely branching systems, the entire length of the linear-timebranching-time spectrum, in the sense that even (finite-depth) behavioural equivalence coincides with α-trace equivalence for a suitable α."@en ;
    askg-onto:inSentence "Finite-depth behavioural equivalence One pleasant aspect of α-trace equivalence is that it spans, at least for finitely branching systems, the entire length of the linear-timebranching-time spectrum, in the sense that even (finite-depth) behavioural equivalence coincides with α-trace equivalence for a suitable α."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-%CE%B1-trace_equivalence,
        askg-data:Entity-finite-depth_behavioural_equivalence .

askg-data:Paper-ae04d54115630f9e-Section-6-Paragraph-62-Sentence-622 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "This is conveniently formulated using the following terminology."@en ;
    askg-onto:inSentence "This is conveniently formulated using the following terminology."^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-conveniently,
        askg-data:Entity-terminology .

askg-data:Paper-ae04d54115630f9e-Section-6-Paragraph-62-Sentence-623 a askg-onto:Sentence ;
    rdfs:label "Sentence 3"@en ;
    domo:Text "Definition 5."@en ;
    askg-onto:inSentence "Definition 5."^^xsd:string ;
    askg-onto:index "3"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-definition_5,
        askg-data:Entity-research_area .

askg-data:Paper-ae04d54115630f9e-Section-6-Paragraph-62-Sentence-624 a askg-onto:Sentence ;
    rdfs:label "Sentence 4"@en ;
    domo:Text "We say that an endofunctor G on a category with a terminal object 1 is non-empty if G1 has a global element."@en ;
    askg-onto:inSentence "We say that an endofunctor G on a category with a terminal object 1 is non-empty if G1 has a global element."^^xsd:string ;
    askg-onto:index "4"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-endofunctor_g,
        askg-data:Entity-g1,
        askg-data:Entity-global_element,
        askg-data:Entity-non-empty .

askg-data:Paper-ae04d54115630f9e-Section-6-Paragraph-63 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 3"@en ;
    domo:Text "Non-emptyness of an endofunctor entails that the component of αn at 1 are sections where αn is as in Lemma 2."@en ;
    askg-onto:hasSentence askg-data:Paper-ae04d54115630f9e-Section-6-Paragraph-63-Sentence-631 ;
    askg-onto:index "3"^^xsd:int .

askg-data:Paper-ae04d54115630f9e-Section-6-Paragraph-63-Sentence-631 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "Non-emptyness of an endofunctor entails that the component of αn at 1 are sections where αn is as in Lemma 2."@en ;
    askg-onto:inSentence "Non-emptyness of an endofunctor entails that the component of αn at 1 are sections where αn is as in Lemma 2."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-%CE%B1n,
        askg-data:Entity-component_of_%CE%B1n_at_1,
        askg-data:Entity-endofunctor,
        askg-data:Entity-lemma_2 .

askg-data:Paper-ae04d54115630f9e-Section-6-Paragraph-64 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 4"@en ;
    domo:Text "Lemma 6. If G is non-empty and generates an algebraically-free monad G∗ with universal arrow α, then (αn)1 (the component of αn *at the terminal object) is a section for* every **n < ω**."@en ;
    askg-onto:hasSentence askg-data:Paper-ae04d54115630f9e-Section-6-Paragraph-64-Sentence-641,
        askg-data:Paper-ae04d54115630f9e-Section-6-Paragraph-64-Sentence-642 ;
    askg-onto:index "4"^^xsd:int .

askg-data:Paper-ae04d54115630f9e-Section-6-Paragraph-64-Sentence-641 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "Lemma 6."@en ;
    askg-onto:inSentence "Lemma 6."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-concept,
        askg-data:Entity-lemma_6 .

askg-data:Paper-ae04d54115630f9e-Section-6-Paragraph-64-Sentence-642 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "If G is non-empty and generates an algebraically-free monad G∗ with universal arrow α, then (αn)1 (the component of αn *at the terminal object) is a section for* every **n < ω**."@en ;
    askg-onto:inSentence "If G is non-empty and generates an algebraically-free monad G∗ with universal arrow α, then (αn)1 (the component of αn *at the terminal object) is a section for* every **n < ω**."^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-%CE%B1,
        askg-data:Entity-%CE%B1n,
        askg-data:Entity-g,
        askg-data:Entity-terminal_object .

askg-data:Paper-ae04d54115630f9e-Section-6-Paragraph-65 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 5"@en ;
    domo:Text "Proof. For each set X, G∗X is the initial G + X-algebra, with structure map"@en ;
    askg-onto:hasSentence askg-data:Paper-ae04d54115630f9e-Section-6-Paragraph-65-Sentence-651,
        askg-data:Paper-ae04d54115630f9e-Section-6-Paragraph-65-Sentence-652 ;
    askg-onto:index "5"^^xsd:int .

askg-data:Paper-ae04d54115630f9e-Section-6-Paragraph-65-Sentence-651 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "Proof."@en ;
    askg-onto:inSentence "Proof."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-concept,
        askg-data:Entity-proof .

askg-data:Paper-ae04d54115630f9e-Section-6-Paragraph-65-Sentence-652 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "For each set X, G∗X is the initial G + X-algebra, with structure map"@en ;
    askg-onto:inSentence "For each set X, G∗X is the initial G + X-algebra, with structure map"^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-g__x-algebra,
        askg-data:Entity-gx,
        askg-data:Entity-structure_map,
        askg-data:Entity-x .

askg-data:Paper-ae04d54115630f9e-Section-7 a askg-onto:Section ;
    rdfs:label "Section 7"@en ;
    domo:Text "[**Μα, Η**] : Gg∗X + X → G ∗X"@en ;
    askg-onto:hasParagraph askg-data:Paper-ae04d54115630f9e-Section-7-Paragraph-71,
        askg-data:Paper-ae04d54115630f9e-Section-7-Paragraph-710,
        askg-data:Paper-ae04d54115630f9e-Section-7-Paragraph-711,
        askg-data:Paper-ae04d54115630f9e-Section-7-Paragraph-712,
        askg-data:Paper-ae04d54115630f9e-Section-7-Paragraph-713,
        askg-data:Paper-ae04d54115630f9e-Section-7-Paragraph-714,
        askg-data:Paper-ae04d54115630f9e-Section-7-Paragraph-715,
        askg-data:Paper-ae04d54115630f9e-Section-7-Paragraph-716,
        askg-data:Paper-ae04d54115630f9e-Section-7-Paragraph-717,
        askg-data:Paper-ae04d54115630f9e-Section-7-Paragraph-718,
        askg-data:Paper-ae04d54115630f9e-Section-7-Paragraph-719,
        askg-data:Paper-ae04d54115630f9e-Section-7-Paragraph-72,
        askg-data:Paper-ae04d54115630f9e-Section-7-Paragraph-720,
        askg-data:Paper-ae04d54115630f9e-Section-7-Paragraph-73,
        askg-data:Paper-ae04d54115630f9e-Section-7-Paragraph-74,
        askg-data:Paper-ae04d54115630f9e-Section-7-Paragraph-75,
        askg-data:Paper-ae04d54115630f9e-Section-7-Paragraph-76,
        askg-data:Paper-ae04d54115630f9e-Section-7-Paragraph-77,
        askg-data:Paper-ae04d54115630f9e-Section-7-Paragraph-78,
        askg-data:Paper-ae04d54115630f9e-Section-7-Paragraph-79 ;
    askg-onto:index "7"^^xsd:int ;
    askg-onto:level "2"^^xsd:int .

askg-data:Paper-ae04d54115630f9e-Section-7-Paragraph-71 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 1"@en ;
    domo:Text "where µ and η are the multiplication and unit of G∗[3]. By Lambek's lemma, it follows that [**µα, η**] is an isomorphism. Since both summands of the coproduct GG∗1 + 1 are nonempty (for GG∗1, this follows from non-emptyness of G: we obtain a global element of GG∗1 by postcomposing a global element of G1 with Gη1 : G1 → GG∗1), the coproduct injections are sections, so we obtain that µα and η are sections, each being the composite of a section with an isomorphism. Using (1), it follows by induction that αn is a section for each **n < ω**. ⊓⊔ (Notice that G is non-empty as soon as any GX has a global element; if the base category is Set, then every functor is non-empty except the constant functor for ∅.) Proposition 7. If G *is non-empty and generates an algebraically-free monad via* α : G → G∗, then α-trace equivalence coincides with ω-behavioural equivalence."@en ;
    askg-onto:hasSentence askg-data:Paper-ae04d54115630f9e-Section-7-Paragraph-71-Sentence-711,
        askg-data:Paper-ae04d54115630f9e-Section-7-Paragraph-71-Sentence-712,
        askg-data:Paper-ae04d54115630f9e-Section-7-Paragraph-71-Sentence-713,
        askg-data:Paper-ae04d54115630f9e-Section-7-Paragraph-71-Sentence-714,
        askg-data:Paper-ae04d54115630f9e-Section-7-Paragraph-71-Sentence-715,
        askg-data:Paper-ae04d54115630f9e-Section-7-Paragraph-71-Sentence-716 ;
    askg-onto:index "1"^^xsd:int .

askg-data:Paper-ae04d54115630f9e-Section-7-Paragraph-71-Sentence-711 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "where µ and η are the multiplication and unit of G∗[3]."@en ;
    askg-onto:inSentence "where µ and η are the multiplication and unit of G∗[3]."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-%C2%B5,
        askg-data:Entity-%CE%B7,
        askg-data:Entity-a_mathematical_structure,
        askg-data:Entity-g3,
        askg-data:Entity-multiplication,
        askg-data:Entity-unit .

askg-data:Paper-ae04d54115630f9e-Section-7-Paragraph-71-Sentence-712 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "By Lambek's lemma, it follows that [**µα, η**] is an isomorphism."@en ;
    askg-onto:inSentence "By Lambek's lemma, it follows that [**µα, η**] is an isomorphism."^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-isomorphism,
        askg-data:Entity-lambeks_lemma .

askg-data:Paper-ae04d54115630f9e-Section-7-Paragraph-71-Sentence-713 a askg-onto:Sentence ;
    rdfs:label "Sentence 3"@en ;
    domo:Text "Since both summands of the coproduct GG∗1 + 1 are nonempty (for GG∗1, this follows from non-emptyness of G: we obtain a global element of GG∗1 by postcomposing a global element of G1 with Gη1 : G1 → GG∗1), the coproduct injections are sections, so we obtain that µα and η are sections, each being the composite of a section with an isomorphism."@en ;
    askg-onto:inSentence "Since both summands of the coproduct GG∗1 + 1 are nonempty (for GG∗1, this follows from non-emptyness of G: we obtain a global element of GG∗1 by postcomposing a global element of G1 with Gη1 : G1 → GG∗1), the coproduct injections are sections, so we obtain that µα and η are sections, each being the composite of a section with an isomorphism."^^xsd:string ;
    askg-onto:index "3"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-%C2%B5%CE%B1,
        askg-data:Entity-%CE%B7,
        askg-data:Entity-coproduct_gg1__1,
        askg-data:Entity-coproduct_injections,
        askg-data:Entity-g,
        askg-data:Entity-g%CE%B71,
        askg-data:Entity-g1,
        askg-data:Entity-gg1,
        askg-data:Entity-isomorphism,
        askg-data:Entity-nonempty_summands,
        askg-data:Entity-section .

askg-data:Paper-ae04d54115630f9e-Section-7-Paragraph-71-Sentence-714 a askg-onto:Sentence ;
    rdfs:label "Sentence 4"@en ;
    domo:Text "Using (1), it follows by induction that αn is a section for each **n < ω**."@en ;
    askg-onto:inSentence "Using (1), it follows by induction that αn is a section for each **n < ω**."^^xsd:string ;
    askg-onto:index "4"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-%CE%B1n,
        askg-data:Entity-n__%CF%89 .

askg-data:Paper-ae04d54115630f9e-Section-7-Paragraph-71-Sentence-715 a askg-onto:Sentence ;
    rdfs:label "Sentence 5"@en ;
    domo:Text "⊓⊔ (Notice that G is non-empty as soon as any GX has a global element; if the base category is Set, then every functor is non-empty except the constant functor for ∅.) Proposition 7."@en ;
    askg-onto:inSentence "⊓⊔ (Notice that G is non-empty as soon as any GX has a global element; if the base category is Set, then every functor is non-empty except the constant functor for ∅.) Proposition 7."^^xsd:string ;
    askg-onto:index "5"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-,
        askg-data:Entity-base_category,
        askg-data:Entity-constant_functor,
        askg-data:Entity-functor,
        askg-data:Entity-global_element,
        askg-data:Entity-gx,
        askg-data:Entity-non-empty,
        askg-data:Entity-set .

askg-data:Paper-ae04d54115630f9e-Section-7-Paragraph-71-Sentence-716 a askg-onto:Sentence ;
    rdfs:label "Sentence 6"@en ;
    domo:Text "If G *is non-empty and generates an algebraically-free monad via* α : G → G∗, then α-trace equivalence coincides with ω-behavioural equivalence."@en ;
    askg-onto:inSentence "If G *is non-empty and generates an algebraically-free monad via* α : G → G∗, then α-trace equivalence coincides with ω-behavioural equivalence."^^xsd:string ;
    askg-onto:index "6"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-%CE%B1-trace_equivalence,
        askg-data:Entity-%CF%89-behavioural_equivalence,
        askg-data:Entity-algebraically-free_monad,
        askg-data:Entity-g .

askg-data:Paper-ae04d54115630f9e-Section-7-Paragraph-710 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 10"@en ;
    domo:Text "All this is not to say that our framework does not cover the language semantics of non-deterministic automata. Note that we can impose w.l.o.g. that a non-deterministic automaton never blocks an input letter - if a state fails to have an a-successor, just add an a-transition into a non-accepting state that loops on all input letters and has no transitions into other states; this clearly leaves the language of the automaton unchanged. This restriction amounts to considering coalgebras for the subfunctor"@en ;
    askg-onto:hasSentence askg-data:Paper-ae04d54115630f9e-Section-7-Paragraph-710-Sentence-7101,
        askg-data:Paper-ae04d54115630f9e-Section-7-Paragraph-710-Sentence-7102,
        askg-data:Paper-ae04d54115630f9e-Section-7-Paragraph-710-Sentence-7103,
        askg-data:Paper-ae04d54115630f9e-Section-7-Paragraph-710-Sentence-7104 ;
    askg-onto:index "10"^^xsd:int .

askg-data:Paper-ae04d54115630f9e-Section-7-Paragraph-710-Sentence-7101 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "All this is not to say that our framework does not cover the language semantics of non-deterministic automata."@en ;
    askg-onto:inSentence "All this is not to say that our framework does not cover the language semantics of non-deterministic automata."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-framework,
        askg-data:Entity-language_semantics,
        askg-data:Entity-non-deterministic_automata .

askg-data:Paper-ae04d54115630f9e-Section-7-Paragraph-710-Sentence-7102 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "Note that we can impose w.l.o.g."@en ;
    askg-onto:inSentence "Note that we can impose w.l.o.g."^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-none,
        askg-data:Entity-wlog .

askg-data:Paper-ae04d54115630f9e-Section-7-Paragraph-710-Sentence-7103 a askg-onto:Sentence ;
    rdfs:label "Sentence 3"@en ;
    domo:Text "that a non-deterministic automaton never blocks an input letter - if a state fails to have an a-successor, just add an a-transition into a non-accepting state that loops on all input letters and has no transitions into other states; this clearly leaves the language of the automaton unchanged."@en ;
    askg-onto:inSentence "that a non-deterministic automaton never blocks an input letter - if a state fails to have an a-successor, just add an a-transition into a non-accepting state that loops on all input letters and has no transitions into other states; this clearly leaves the language of the automaton unchanged."^^xsd:string ;
    askg-onto:index "3"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-a-successor,
        askg-data:Entity-a-transition,
        askg-data:Entity-all_input_letters,
        askg-data:Entity-automaton,
        askg-data:Entity-input_letter,
        askg-data:Entity-language,
        askg-data:Entity-non-accepting_state,
        askg-data:Entity-non-deterministic_automaton,
        askg-data:Entity-other_states,
        askg-data:Entity-state .

askg-data:Paper-ae04d54115630f9e-Section-7-Paragraph-710-Sentence-7104 a askg-onto:Sentence ;
    rdfs:label "Sentence 4"@en ;
    domo:Text "This restriction amounts to considering coalgebras for the subfunctor"@en ;
    askg-onto:inSentence "This restriction amounts to considering coalgebras for the subfunctor"^^xsd:string ;
    askg-onto:index "4"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-coalgebras,
        askg-data:Entity-subfunctor .

askg-data:Paper-ae04d54115630f9e-Section-7-Paragraph-711 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 11"@en ;
    domo:Text "$G=2\\times(\\mathcal{P}^*)^{\\Sigma}$ of the functor P(1 + Σ × ) modelling LTS with explicit termination, where P ∗ denotes non-empty powerset. We embed this functor into the same monad M as above, by restricting α : P(1 + Σ × ) → M to G. Calling G-coalgebras *non-blocking* non-deterministic automata, we now have that two states in a non-blocking nondeterministic automaton are α*-trace equivalent iff they accept the same language*. For a coalgebra γ : X → GX, the maps γ (n): X → M1, of course, still record accepted traces as well as plain traces, but the plain traces no longer carry any information: all α-trace sequences have the form (Ln, Σn)n<ω (with Ln ⊆ Σ∗recording the accepted words of length at most n)."@en ;
    askg-onto:hasSentence askg-data:Paper-ae04d54115630f9e-Section-7-Paragraph-711-Sentence-7111,
        askg-data:Paper-ae04d54115630f9e-Section-7-Paragraph-711-Sentence-7112,
        askg-data:Paper-ae04d54115630f9e-Section-7-Paragraph-711-Sentence-7113,
        askg-data:Paper-ae04d54115630f9e-Section-7-Paragraph-711-Sentence-7114 ;
    askg-onto:index "11"^^xsd:int .

askg-data:Paper-ae04d54115630f9e-Section-7-Paragraph-711-Sentence-7111 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "$G=2\\times(\\mathcal{P}^*)^{\\Sigma}$ of the functor P(1 + Σ × ) modelling LTS with explicit termination, where P ∗ denotes non-empty powerset."@en ;
    askg-onto:inSentence "$G=2\\times(\\mathcal{P}^*)^{\\Sigma}$ of the functor P(1 + Σ × ) modelling LTS with explicit termination, where P ∗ denotes non-empty powerset."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-g2timesmathcalpsigma,
        askg-data:Entity-lts_with_explicit_termination,
        askg-data:Entity-non-empty_powerset,
        askg-data:Entity-p_ .

askg-data:Paper-ae04d54115630f9e-Section-7-Paragraph-711-Sentence-7112 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "We embed this functor into the same monad M as above, by restricting α : P(1 + Σ × ) → M to G."@en ;
    askg-onto:inSentence "We embed this functor into the same monad M as above, by restricting α : P(1 + Σ × ) → M to G."^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-%CE%B1__p1__%CF%83__,
        askg-data:Entity-functor,
        askg-data:Entity-g,
        askg-data:Entity-monad_m .

askg-data:Paper-ae04d54115630f9e-Section-7-Paragraph-711-Sentence-7113 a askg-onto:Sentence ;
    rdfs:label "Sentence 3"@en ;
    domo:Text "Calling G-coalgebras *non-blocking* non-deterministic automata, we now have that two states in a non-blocking nondeterministic automaton are α*-trace equivalent iff they accept the same language*."@en ;
    askg-onto:inSentence "Calling G-coalgebras *non-blocking* non-deterministic automata, we now have that two states in a non-blocking nondeterministic automaton are α*-trace equivalent iff they accept the same language*."^^xsd:string ;
    askg-onto:index "3"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-g-coalgebras,
        askg-data:Entity-non-blocking_non-deterministic_automata,
        askg-data:Entity-same_language,
        askg-data:Entity-two_states .

askg-data:Paper-ae04d54115630f9e-Section-7-Paragraph-711-Sentence-7114 a askg-onto:Sentence ;
    rdfs:label "Sentence 4"@en ;
    domo:Text "For a coalgebra γ : X → GX, the maps γ (n): X → M1, of course, still record accepted traces as well as plain traces, but the plain traces no longer carry any information: all α-trace sequences have the form (Ln, Σn)n<ω (with Ln ⊆ Σ∗recording the accepted words of length at most n)."@en ;
    askg-onto:inSentence "For a coalgebra γ : X → GX, the maps γ (n): X → M1, of course, still record accepted traces as well as plain traces, but the plain traces no longer carry any information: all α-trace sequences have the form (Ln, Σn)n<ω (with Ln ⊆ Σ∗recording the accepted words of length at most n)."^^xsd:string ;
    askg-onto:index "4"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-%CE%B1-trace_sequences,
        askg-data:Entity-%CF%83,
        askg-data:Entity-accepted_words,
        askg-data:Entity-at_most_n,
        askg-data:Entity-coalgebra,
        askg-data:Entity-ln,
        askg-data:Entity-ln_%CF%83nn%CF%89,
        askg-data:Entity-maps_%CE%B3_n,
        askg-data:Entity-x__gx,
        askg-data:Entity-x__m1 .

askg-data:Paper-ae04d54115630f9e-Section-7-Paragraph-712 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 12"@en ;
    domo:Text "Probabilistic Transition Systems Recall that generative probabilistic (transition) systems (for simplicity without the possibility of deadlock, not to be confused with explicit termination) are modelled as coalgebras for the functor D(Σ × ) where D denotes the discrete distribution functor (i.e. D(X) is the set of discrete probability distributions on X, and D(f) takes image measures under f). That is, each state has a probability distribution over pairs of actions and successor states. We embed D(Σ × ) into the global monad MX = D(Σ∗ × ) via the natural transformation α that takes a discrete distribution µ on Σ × X to the discrete distribution on Σ∗ × X that behaves like µ on Σ × X (where we see Σ as a subset of Σ∗) and is 0 outside Σ × X. The unit η of M maps x ∈ X to the Dirac distribution at (**ǫ, x**), and for f : X → MY ,"@en ;
    askg-onto:hasSentence askg-data:Paper-ae04d54115630f9e-Section-7-Paragraph-712-Sentence-7121,
        askg-data:Paper-ae04d54115630f9e-Section-7-Paragraph-712-Sentence-7122,
        askg-data:Paper-ae04d54115630f9e-Section-7-Paragraph-712-Sentence-7123,
        askg-data:Paper-ae04d54115630f9e-Section-7-Paragraph-712-Sentence-7124,
        askg-data:Paper-ae04d54115630f9e-Section-7-Paragraph-712-Sentence-7125 ;
    askg-onto:index "12"^^xsd:int .

askg-data:Paper-ae04d54115630f9e-Section-7-Paragraph-712-Sentence-7121 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "Probabilistic Transition Systems Recall that generative probabilistic (transition) systems (for simplicity without the possibility of deadlock, not to be confused with explicit termination) are modelled as coalgebras for the functor D(Σ × ) where D denotes the discrete distribution functor (i.e."@en ;
    askg-onto:inSentence "Probabilistic Transition Systems Recall that generative probabilistic (transition) systems (for simplicity without the possibility of deadlock, not to be confused with explicit termination) are modelled as coalgebras for the functor D(Σ × ) where D denotes the discrete distribution functor (i.e."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-coalgebras_for_the_functor_d%CF%82__,
        askg-data:Entity-d,
        askg-data:Entity-generative_probabilistic_transition_systems,
        askg-data:Entity-probabilistic_transition_systems,
        askg-data:Entity-the_discrete_distribution_functor .

askg-data:Paper-ae04d54115630f9e-Section-7-Paragraph-712-Sentence-7122 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "D(X) is the set of discrete probability distributions on X, and D(f) takes image measures under f)."@en ;
    askg-onto:inSentence "D(X) is the set of discrete probability distributions on X, and D(f) takes image measures under f)."^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-df,
        askg-data:Entity-discrete_probability_distributions_on_x,
        askg-data:Entity-dx,
        askg-data:Entity-f .

askg-data:Paper-ae04d54115630f9e-Section-7-Paragraph-712-Sentence-7123 a askg-onto:Sentence ;
    rdfs:label "Sentence 3"@en ;
    domo:Text "That is, each state has a probability distribution over pairs of actions and successor states."@en ;
    askg-onto:inSentence "That is, each state has a probability distribution over pairs of actions and successor states."^^xsd:string ;
    askg-onto:index "3"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-pairs_of_actions_and_successor_states,
        askg-data:Entity-state .

askg-data:Paper-ae04d54115630f9e-Section-7-Paragraph-712-Sentence-7124 a askg-onto:Sentence ;
    rdfs:label "Sentence 4"@en ;
    domo:Text "We embed D(Σ × ) into the global monad MX = D(Σ∗ × ) via the natural transformation α that takes a discrete distribution µ on Σ × X to the discrete distribution on Σ∗ × X that behaves like µ on Σ × X (where we see Σ as a subset of Σ∗) and is 0 outside Σ × X."@en ;
    askg-onto:inSentence "We embed D(Σ × ) into the global monad MX = D(Σ∗ × ) via the natural transformation α that takes a discrete distribution µ on Σ × X to the discrete distribution on Σ∗ × X that behaves like µ on Σ × X (where we see Σ as a subset of Σ∗) and is 0 outside Σ × X."^^xsd:string ;
    askg-onto:index "4"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-%CF%83__x,
        askg-data:Entity-d%CF%82__,
        askg-data:Entity-discrete_distribution_%C2%B5_on_%CF%83__x,
        askg-data:Entity-discrete_distribution_on_%CF%83__x,
        askg-data:Entity-global_monad_mx__d%CF%82__,
        askg-data:Entity-natural_transformation_%CE%B1 .

askg-data:Paper-ae04d54115630f9e-Section-7-Paragraph-712-Sentence-7125 a askg-onto:Sentence ;
    rdfs:label "Sentence 5"@en ;
    domo:Text "The unit η of M maps x ∈ X to the Dirac distribution at (**ǫ, x**), and for f : X → MY ,"@en ;
    askg-onto:inSentence "The unit η of M maps x ∈ X to the Dirac distribution at (**ǫ, x**), and for f : X → MY ,"^^xsd:string ;
    askg-onto:index "5"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-%CE%B7,
        askg-data:Entity-dirac_distribution,
        askg-data:Entity-dirac_distribution_at_%C7%AB_x,
        askg-data:Entity-distribution,
        askg-data:Entity-f,
        askg-data:Entity-my,
        askg-data:Entity-x .

askg-data:Paper-ae04d54115630f9e-Section-7-Paragraph-713 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 13"@en ;
    domo:Text "$$f^{*}(\\mu)(u,y)=\\sum_{u=v w,x\\in X}\\mu(v,x)f(x)(w,y)$$"@en ;
    askg-onto:hasSentence askg-data:Paper-ae04d54115630f9e-Section-7-Paragraph-713-Sentence-7131 ;
    askg-onto:index "13"^^xsd:int .

askg-data:Paper-ae04d54115630f9e-Section-7-Paragraph-713-Sentence-7131 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "$$f^{*}(\\mu)(u,y)=\\sum_{u=v w,x\\in X}\\mu(v,x)f(x)(w,y)$$"@en ;
    askg-onto:inSentence "$$f^{*}(\\mu)(u,y)=\\sum_{u=v w,x\\in X}\\mu(v,x)f(x)(w,y)$$"^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-%0A,
        askg-data:Entity-f,
        askg-data:Entity-function,
        askg-data:Entity-mathematical_notation .

askg-data:Paper-ae04d54115630f9e-Section-7-Paragraph-714 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 14"@en ;
    domo:Text "for all µ ∈ MX, (**u, y**) ∈ Σ∗ × Y . This is the monad induced by the canonical distributive law [8] λ : Σ **× D → D**(Σ × ) given by λX(**a, µ**) = δ(a) ∗ µ where δ forms Dirac measures and ∗ is product measure. We identify M1 with D(Σ∗). Given these data, observe that for γ : X → D(Σ × X) and x ∈ X, each distribution M!γ (n)(x) is concentrated at traces of length n."@en ;
    askg-onto:hasSentence askg-data:Paper-ae04d54115630f9e-Section-7-Paragraph-714-Sentence-7141,
        askg-data:Paper-ae04d54115630f9e-Section-7-Paragraph-714-Sentence-7142,
        askg-data:Paper-ae04d54115630f9e-Section-7-Paragraph-714-Sentence-7143,
        askg-data:Paper-ae04d54115630f9e-Section-7-Paragraph-714-Sentence-7144 ;
    askg-onto:index "14"^^xsd:int .

askg-data:Paper-ae04d54115630f9e-Section-7-Paragraph-714-Sentence-7141 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "for all µ ∈ MX, (**u, y**) ∈ Σ∗ × Y ."@en ;
    askg-onto:inSentence "for all µ ∈ MX, (**u, y**) ∈ Σ∗ × Y ."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-%C2%B5,
        askg-data:Entity-%CF%83,
        askg-data:Entity-mx,
        askg-data:Entity-u,
        askg-data:Entity-y .

askg-data:Paper-ae04d54115630f9e-Section-7-Paragraph-714-Sentence-7142 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "This is the monad induced by the canonical distributive law [8] λ : Σ **× D → D**(Σ × ) given by λX(**a, µ**) = δ(a) ∗ µ where δ forms Dirac measures and ∗ is product measure."@en ;
    askg-onto:inSentence "This is the monad induced by the canonical distributive law [8] λ : Σ **× D → D**(Σ × ) given by λX(**a, µ**) = δ(a) ∗ µ where δ forms Dirac measures and ∗ is product measure."^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-%CE%B4,
        askg-data:Entity-%CE%BB__%CF%83__d__d%CF%82__,
        askg-data:Entity-canonical_distributive_law,
        askg-data:Entity-dirac_measures,
        askg-data:Entity-monad,
        askg-data:Entity-product_measure .

askg-data:Paper-ae04d54115630f9e-Section-7-Paragraph-714-Sentence-7143 a askg-onto:Sentence ;
    rdfs:label "Sentence 3"@en ;
    domo:Text "We identify M1 with D(Σ∗)."@en ;
    askg-onto:inSentence "We identify M1 with D(Σ∗)."^^xsd:string ;
    askg-onto:index "3"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-d%CF%82,
        askg-data:Entity-m1 .

askg-data:Paper-ae04d54115630f9e-Section-7-Paragraph-714-Sentence-7144 a askg-onto:Sentence ;
    rdfs:label "Sentence 4"@en ;
    domo:Text "Given these data, observe that for γ : X → D(Σ × X) and x ∈ X, each distribution M!γ (n)(x) is concentrated at traces of length n."@en ;
    askg-onto:inSentence "Given these data, observe that for γ : X → D(Σ × X) and x ∈ X, each distribution M!γ (n)(x) is concentrated at traces of length n."^^xsd:string ;
    askg-onto:index "4"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-%CE%B3,
        askg-data:Entity-d%CF%82__x,
        askg-data:Entity-m%CE%B3_n,
        askg-data:Entity-traces_of_length_n,
        askg-data:Entity-x .

askg-data:Paper-ae04d54115630f9e-Section-7-Paragraph-715 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 15"@en ;
    domo:Text "Assume from now on that Σ is finite. Recall that the usual σ-algebra on the set Σω of infinite words over Σ is generated by the *cones*, i.e. the sets v↑ = {vw | w ∈ Σω}, v ∈ Σ∗, which (by finiteness of Σ) form a semiring of sets. We let states x in a coalgebra γ : X → D(Σ × X) *induce* distributions µx on Σω via the Hahn- Kolmogorov theorem, defining a content µ(v↑) inductively by"@en ;
    askg-onto:hasSentence askg-data:Paper-ae04d54115630f9e-Section-7-Paragraph-715-Sentence-7151,
        askg-data:Paper-ae04d54115630f9e-Section-7-Paragraph-715-Sentence-7152,
        askg-data:Paper-ae04d54115630f9e-Section-7-Paragraph-715-Sentence-7153,
        askg-data:Paper-ae04d54115630f9e-Section-7-Paragraph-715-Sentence-7154 ;
    askg-onto:index "15"^^xsd:int .

askg-data:Paper-ae04d54115630f9e-Section-7-Paragraph-715-Sentence-7151 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "Assume from now on that Σ is finite."@en ;
    askg-onto:inSentence "Assume from now on that Σ is finite."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-%CF%83,
        askg-data:Entity-finite .

askg-data:Paper-ae04d54115630f9e-Section-7-Paragraph-715-Sentence-7152 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "Recall that the usual σ-algebra on the set Σω of infinite words over Σ is generated by the *cones*, i.e."@en ;
    askg-onto:inSentence "Recall that the usual σ-algebra on the set Σω of infinite words over Σ is generated by the *cones*, i.e."^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-%CF%83-algebra,
        askg-data:Entity-cones .

askg-data:Paper-ae04d54115630f9e-Section-7-Paragraph-715-Sentence-7153 a askg-onto:Sentence ;
    rdfs:label "Sentence 3"@en ;
    domo:Text "the sets v↑ = {vw | w ∈ Σω}, v ∈ Σ∗, which (by finiteness of Σ) form a semiring of sets."@en ;
    askg-onto:inSentence "the sets v↑ = {vw | w ∈ Σω}, v ∈ Σ∗, which (by finiteness of Σ) form a semiring of sets."^^xsd:string ;
    askg-onto:index "3"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-%CF%83,
        askg-data:Entity-finiteness,
        askg-data:Entity-v,
        askg-data:Entity-vw__w__%CF%83%CF%89 .

askg-data:Paper-ae04d54115630f9e-Section-7-Paragraph-715-Sentence-7154 a askg-onto:Sentence ;
    rdfs:label "Sentence 4"@en ;
    domo:Text "We let states x in a coalgebra γ : X → D(Σ × X) *induce* distributions µx on Σω via the Hahn- Kolmogorov theorem, defining a content µ(v↑) inductively by"@en ;
    askg-onto:inSentence "We let states x in a coalgebra γ : X → D(Σ × X) *induce* distributions µx on Σω via the Hahn- Kolmogorov theorem, defining a content µ(v↑) inductively by"^^xsd:string ;
    askg-onto:index "4"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-%C2%B5v,
        askg-data:Entity-coalgebra,
        askg-data:Entity-content,
        askg-data:Entity-distributions,
        askg-data:Entity-hahn-kolmogorov_theorem .

askg-data:Paper-ae04d54115630f9e-Section-7-Paragraph-716 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 16"@en ;
    domo:Text "$$\\begin{array}{c}{{\\mu_{x}(\\epsilon\\uparrow)=1}}\\\\ {{\\mu_{x}(a v\\uparrow)=\\sum_{x^{\\prime}\\in X}\\gamma(a,x^{\\prime})\\mu_{x^{\\prime}}(v\\uparrow)}}\\end{array}$$"@en ;
    askg-onto:hasSentence askg-data:Paper-ae04d54115630f9e-Section-7-Paragraph-716-Sentence-7161 ;
    askg-onto:index "16"^^xsd:int .

askg-data:Paper-ae04d54115630f9e-Section-7-Paragraph-716-Sentence-7161 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "$$\\begin{array}{c}{{\\mu_{x}(\\epsilon\\uparrow)=1}}\\\\ {{\\mu_{x}(a v\\uparrow)=\\sum_{x^{\\prime}\\in X}\\gamma(a,x^{\\prime})\\mu_{x^{\\prime}}(v\\uparrow)}}\\end{array}$$"@en ;
    askg-onto:inSentence "$$\\begin{array}{c}{{\\mu_{x}(\\epsilon\\uparrow)=1}}\\\\ {{\\mu_{x}(a v\\uparrow)=\\sum_{x^{\\prime}\\in X}\\gamma(a,x^{\\prime})\\mu_{x^{\\prime}}(v\\uparrow)}}\\end{array}$$"^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-%CE%BC_x%09ext%CE%B5,
        askg-data:Entity-%CE%BC_xa_v,
        askg-data:Entity-1,
        askg-data:Entity-_x_x_%CE%B3ax%CE%BC_xv .

askg-data:Paper-ae04d54115630f9e-Section-7-Paragraph-717 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 17"@en ;
    domo:Text "- a compactness argument, again hinging on finiteness of Σ, shows that no cone be written as a countably infinite disjoint union of cones, so µ is in fact a pre-measure, i.e. σ-additive."@en ;
    askg-onto:hasSentence askg-data:Paper-ae04d54115630f9e-Section-7-Paragraph-717-Sentence-7171,
        askg-data:Paper-ae04d54115630f9e-Section-7-Paragraph-717-Sentence-7172 ;
    askg-onto:index "17"^^xsd:int .

askg-data:Paper-ae04d54115630f9e-Section-7-Paragraph-717-Sentence-7171 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "- a compactness argument, again hinging on finiteness of Σ, shows that no cone be written as a countably infinite disjoint union of cones, so µ is in fact a pre-measure, i.e."@en ;
    askg-onto:inSentence "- a compactness argument, again hinging on finiteness of Σ, shows that no cone be written as a countably infinite disjoint union of cones, so µ is in fact a pre-measure, i.e."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-%C2%B5,
        askg-data:Entity-pre-measure .

askg-data:Paper-ae04d54115630f9e-Section-7-Paragraph-717-Sentence-7172 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "σ-additive."@en ;
    askg-onto:inSentence "σ-additive."^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-%CF%83-additive,
        askg-data:Entity-concept .

askg-data:Paper-ae04d54115630f9e-Section-7-Paragraph-718 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 18"@en ;
    domo:Text "We note explicitly Proposition 8. States in generative probabilistic systems over a finite alphabet Σ are α-trace equivalent iff they induce the same distribution on Σω."@en ;
    askg-onto:hasSentence askg-data:Paper-ae04d54115630f9e-Section-7-Paragraph-718-Sentence-7181,
        askg-data:Paper-ae04d54115630f9e-Section-7-Paragraph-718-Sentence-7182 ;
    askg-onto:index "18"^^xsd:int .

askg-data:Paper-ae04d54115630f9e-Section-7-Paragraph-718-Sentence-7181 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "We note explicitly Proposition 8."@en ;
    askg-onto:inSentence "We note explicitly Proposition 8."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-proposition_8 .

askg-data:Paper-ae04d54115630f9e-Section-7-Paragraph-718-Sentence-7182 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "States in generative probabilistic systems over a finite alphabet Σ are α-trace equivalent iff they induce the same distribution on Σω."@en ;
    askg-onto:inSentence "States in generative probabilistic systems over a finite alphabet Σ are α-trace equivalent iff they induce the same distribution on Σω."^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-%CE%B1-trace_equivalent,
        askg-data:Entity-states_in_generative_probabilistic_systems_over_a_finite_alphabet_%CF%83,
        askg-data:Entity-the_same_distribution_on_%CF%83%CF%89 .

askg-data:Paper-ae04d54115630f9e-Section-7-Paragraph-719 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 19"@en ;
    domo:Text "Proof. For v a word of length n and x a state in a generative probabilistic system, we have"@en ;
    askg-onto:hasSentence askg-data:Paper-ae04d54115630f9e-Section-7-Paragraph-719-Sentence-7191,
        askg-data:Paper-ae04d54115630f9e-Section-7-Paragraph-719-Sentence-7192 ;
    askg-onto:index "19"^^xsd:int .

askg-data:Paper-ae04d54115630f9e-Section-7-Paragraph-719-Sentence-7191 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "Proof."@en ;
    askg-onto:inSentence "Proof."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-concept,
        askg-data:Entity-proof .

askg-data:Paper-ae04d54115630f9e-Section-7-Paragraph-719-Sentence-7192 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "For v a word of length n and x a state in a generative probabilistic system, we have"@en ;
    askg-onto:inSentence "For v a word of length n and x a state in a generative probabilistic system, we have"^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-generative_probabilistic_system,
        askg-data:Entity-n,
        askg-data:Entity-v,
        askg-data:Entity-x .

askg-data:Paper-ae04d54115630f9e-Section-7-Paragraph-72 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 2"@en ;
    domo:Text "Proof. Immediate from Lemmas 2 and 6 ⊓⊔ Labelled Transition Systems (LTS) We provide some additional details for our initial example: We have GX = P(Σ × X) and MX = P(Σ∗ × X), with α the obvious inclusion. The monad M arises from G, as we will see later again in (2), from a distributive law δX : Σ × P(X) → P(Σ × X) which maps a pair (**a, S**) to {a}×S. Explicitly, the unit of M is given by η(x) = {(**ǫ, x**)}, and the multiplication by µ(A) = {(uv, x) | ∃(u, S) ∈ A.(**v, x**) ∈ S} for A ∈ P(Σ∗ × P(Σ∗ × X)). For each n and each state x in an LTS γ : X → P(Σ×X), γ (n)(x) consists of the pretraces of x of length exactly n, i.e."@en ;
    askg-onto:hasSentence askg-data:Paper-ae04d54115630f9e-Section-7-Paragraph-72-Sentence-721,
        askg-data:Paper-ae04d54115630f9e-Section-7-Paragraph-72-Sentence-722,
        askg-data:Paper-ae04d54115630f9e-Section-7-Paragraph-72-Sentence-723,
        askg-data:Paper-ae04d54115630f9e-Section-7-Paragraph-72-Sentence-724,
        askg-data:Paper-ae04d54115630f9e-Section-7-Paragraph-72-Sentence-725 ;
    askg-onto:index "2"^^xsd:int .

askg-data:Paper-ae04d54115630f9e-Section-7-Paragraph-72-Sentence-721 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "Proof."@en ;
    askg-onto:inSentence "Proof."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-concept,
        askg-data:Entity-proof .

askg-data:Paper-ae04d54115630f9e-Section-7-Paragraph-72-Sentence-722 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "Immediate from Lemmas 2 and 6 ⊓⊔ Labelled Transition Systems (LTS) We provide some additional details for our initial example: We have GX = P(Σ × X) and MX = P(Σ∗ × X), with α the obvious inclusion."@en ;
    askg-onto:inSentence "Immediate from Lemmas 2 and 6 ⊓⊔ Labelled Transition Systems (LTS) We provide some additional details for our initial example: We have GX = P(Σ × X) and MX = P(Σ∗ × X), with α the obvious inclusion."^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-%CE%B1,
        askg-data:Entity-gx,
        askg-data:Entity-inclusion,
        askg-data:Entity-labelled_transition_systems,
        askg-data:Entity-lts,
        askg-data:Entity-mx,
        askg-data:Entity-p%CF%82__x .

askg-data:Paper-ae04d54115630f9e-Section-7-Paragraph-72-Sentence-723 a askg-onto:Sentence ;
    rdfs:label "Sentence 3"@en ;
    domo:Text "The monad M arises from G, as we will see later again in (2), from a distributive law δX : Σ × P(X) → P(Σ × X) which maps a pair (**a, S**) to {a}×S."@en ;
    askg-onto:inSentence "The monad M arises from G, as we will see later again in (2), from a distributive law δX : Σ × P(X) → P(Σ × X) which maps a pair (**a, S**) to {a}×S."^^xsd:string ;
    askg-onto:index "3"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-as,
        askg-data:Entity-distributive_law_%CE%B4x,
        askg-data:Entity-g,
        askg-data:Entity-monad_m,
        askg-data:Entity-pair_a_s .

askg-data:Paper-ae04d54115630f9e-Section-7-Paragraph-72-Sentence-724 a askg-onto:Sentence ;
    rdfs:label "Sentence 4"@en ;
    domo:Text "Explicitly, the unit of M is given by η(x) = {(**ǫ, x**)}, and the multiplication by µ(A) = {(uv, x) | ∃(u, S) ∈ A.(**v, x**) ∈ S} for A ∈ P(Σ∗ × P(Σ∗ × X))."@en ;
    askg-onto:inSentence "Explicitly, the unit of M is given by η(x) = {(**ǫ, x**)}, and the multiplication by µ(A) = {(uv, x) | ∃(u, S) ∈ A.(**v, x**) ∈ S} for A ∈ P(Σ∗ × P(Σ∗ × X))."^^xsd:string ;
    askg-onto:index "4"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-%C2%B5a,
        askg-data:Entity-%CE%B7x__%C7%AB_x,
        askg-data:Entity-a,
        askg-data:Entity-m,
        askg-data:Entity-p%CF%82__p%CF%82__x,
        askg-data:Entity-uv_x__u_s__av_x__s .

askg-data:Paper-ae04d54115630f9e-Section-7-Paragraph-72-Sentence-725 a askg-onto:Sentence ;
    rdfs:label "Sentence 5"@en ;
    domo:Text "For each n and each state x in an LTS γ : X → P(Σ×X), γ (n)(x) consists of the pretraces of x of length exactly n, i.e."@en ;
    askg-onto:inSentence "For each n and each state x in an LTS γ : X → P(Σ×X), γ (n)(x) consists of the pretraces of x of length exactly n, i.e."^^xsd:string ;
    askg-onto:index "5"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-concept,
        askg-data:Entity-lts_%CE%B3,
        askg-data:Entity-n,
        askg-data:Entity-p%CF%83x,
        askg-data:Entity-pretraces_of_x,
        askg-data:Entity-state_x .

askg-data:Paper-ae04d54115630f9e-Section-7-Paragraph-720 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 20"@en ;
    domo:Text "$$\\mu_{x}(v\\uparrow)=(M!\\gamma^{(n)}(x))(v).$$"@en ;
    askg-onto:hasSentence askg-data:Paper-ae04d54115630f9e-Section-7-Paragraph-720-Sentence-7201 ;
    askg-onto:index "20"^^xsd:int .

askg-data:Paper-ae04d54115630f9e-Section-7-Paragraph-720-Sentence-7201 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "$$\\mu_{x}(v\\uparrow)=(M!\\gamma^{(n)}(x))(v).$$"@en ;
    askg-onto:index "1"^^xsd:int .

askg-data:Paper-ae04d54115630f9e-Section-7-Paragraph-73 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 3"@en ;
    domo:Text "$$\\gamma^{(n)}(x)=\\{(u,y)\\mid x\\stackrel{u}{\\to}y,u\\in\\Sigma^{n}\\}$$"@en ;
    askg-onto:hasSentence askg-data:Paper-ae04d54115630f9e-Section-7-Paragraph-73-Sentence-731 ;
    askg-onto:index "3"^^xsd:int .

askg-data:Paper-ae04d54115630f9e-Section-7-Paragraph-73-Sentence-731 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "$$\\gamma^{(n)}(x)=\\{(u,y)\\mid x\\stackrel{u}{\\to}y,u\\in\\Sigma^{n}\\}$$"@en ;
    askg-onto:index "1"^^xsd:int .

askg-data:Paper-ae04d54115630f9e-Section-7-Paragraph-74 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 4"@en ;
    domo:Text "where u→ denotes the usual extension of the transition relation to words u ∈ Σ∗. Thus, M!γ (n)(x) consists of the traces of x of length n, i.e. M!γ (n)(x) = {(u, ∗) | xu→ , u ∈ Σn} (where, as usual, xu→ denotes ∃y.xu→ y). Thus, states x and y are αtrace equivalent iff they are trace equivalent in the usual sense, i.e. iff {u ∈ Σ∗| x u→ } = {u ∈ Σ∗| yu→}. The entire scenario transfers verbatim to the case of finitely branching LTS, with G = Pω(Σ × ) and M = P<ω(Σ∗ × ), where P<ω denotes finite powerset."@en ;
    askg-onto:hasSentence askg-data:Paper-ae04d54115630f9e-Section-7-Paragraph-74-Sentence-741,
        askg-data:Paper-ae04d54115630f9e-Section-7-Paragraph-74-Sentence-742,
        askg-data:Paper-ae04d54115630f9e-Section-7-Paragraph-74-Sentence-743,
        askg-data:Paper-ae04d54115630f9e-Section-7-Paragraph-74-Sentence-744,
        askg-data:Paper-ae04d54115630f9e-Section-7-Paragraph-74-Sentence-745,
        askg-data:Paper-ae04d54115630f9e-Section-7-Paragraph-74-Sentence-746 ;
    askg-onto:index "4"^^xsd:int .

askg-data:Paper-ae04d54115630f9e-Section-7-Paragraph-74-Sentence-741 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "where u→ denotes the usual extension of the transition relation to words u ∈ Σ∗."@en ;
    askg-onto:inSentence "where u→ denotes the usual extension of the transition relation to words u ∈ Σ∗."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-the_usual_extension_of_the_transition_relation_to_words_u__%CF%83,
        askg-data:Entity-u .

askg-data:Paper-ae04d54115630f9e-Section-7-Paragraph-74-Sentence-742 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "Thus, M!γ (n)(x) consists of the traces of x of length n, i.e."@en ;
    askg-onto:inSentence "Thus, M!γ (n)(x) consists of the traces of x of length n, i.e."^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-m%CE%B3_nx,
        askg-data:Entity-traces_of_x_of_length_n .

askg-data:Paper-ae04d54115630f9e-Section-7-Paragraph-74-Sentence-743 a askg-onto:Sentence ;
    rdfs:label "Sentence 3"@en ;
    domo:Text "M!γ (n)(x) = {(u, ∗) | xu→ , u ∈ Σn} (where, as usual, xu→ denotes ∃y.xu→ y)."@en ;
    askg-onto:inSentence "M!γ (n)(x) = {(u, ∗) | xu→ , u ∈ Σn} (where, as usual, xu→ denotes ∃y.xu→ y)."^^xsd:string ;
    askg-onto:index "3"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-m%CE%B3_nx,
        askg-data:Entity-u___xu__u__%CF%83n .

askg-data:Paper-ae04d54115630f9e-Section-7-Paragraph-74-Sentence-744 a askg-onto:Sentence ;
    rdfs:label "Sentence 4"@en ;
    domo:Text "Thus, states x and y are αtrace equivalent iff they are trace equivalent in the usual sense, i.e."@en ;
    askg-onto:inSentence "Thus, states x and y are αtrace equivalent iff they are trace equivalent in the usual sense, i.e."^^xsd:string ;
    askg-onto:index "4"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-%CE%B1trace_equivalent,
        askg-data:Entity-states_x_and_y,
        askg-data:Entity-trace_equivalent .

askg-data:Paper-ae04d54115630f9e-Section-7-Paragraph-74-Sentence-745 a askg-onto:Sentence ;
    rdfs:label "Sentence 5"@en ;
    domo:Text "iff {u ∈ Σ∗| x u→ } = {u ∈ Σ∗| yu→}."@en ;
    askg-onto:inSentence "iff {u ∈ Σ∗| x u→ } = {u ∈ Σ∗| yu→}."^^xsd:string ;
    askg-onto:index "5"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-%CF%83,
        askg-data:Entity-u,
        askg-data:Entity-x,
        askg-data:Entity-y .

askg-data:Paper-ae04d54115630f9e-Section-7-Paragraph-74-Sentence-746 a askg-onto:Sentence ;
    rdfs:label "Sentence 6"@en ;
    domo:Text "The entire scenario transfers verbatim to the case of finitely branching LTS, with G = Pω(Σ × ) and M = P<ω(Σ∗ × ), where P<ω denotes finite powerset."@en ;
    askg-onto:inSentence "The entire scenario transfers verbatim to the case of finitely branching LTS, with G = Pω(Σ × ) and M = P<ω(Σ∗ × ), where P<ω denotes finite powerset."^^xsd:string ;
    askg-onto:index "6"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-finite_powerset,
        askg-data:Entity-finitely_branching_lts,
        askg-data:Entity-g,
        askg-data:Entity-lts,
        askg-data:Entity-m,
        askg-data:Entity-p%CF%89,
        askg-data:Entity-p%CF%89%CF%82__ .

askg-data:Paper-ae04d54115630f9e-Section-7-Paragraph-75 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 5"@en ;
    domo:Text "LTS with explicit termination The leading example treated in related work on coalgebraic trace semantics [8,11,4] is a variant of LTS with explicit termination, described as coalgebras for the functor P(1 + Σ × ) ∼= 2 × PΣ."@en ;
    askg-onto:hasSentence askg-data:Paper-ae04d54115630f9e-Section-7-Paragraph-75-Sentence-751 ;
    askg-onto:index "5"^^xsd:int .

askg-data:Paper-ae04d54115630f9e-Section-7-Paragraph-75-Sentence-751 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "LTS with explicit termination The leading example treated in related work on coalgebraic trace semantics [8,11,4] is a variant of LTS with explicit termination, described as coalgebras for the functor P(1 + Σ × ) ∼= 2 × PΣ."@en ;
    askg-onto:inSentence "LTS with explicit termination The leading example treated in related work on coalgebraic trace semantics [8,11,4] is a variant of LTS with explicit termination, described as coalgebras for the functor P(1 + Σ × ) ∼= 2 × PΣ."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-coalgebraic_trace_semantics,
        askg-data:Entity-coalgebras,
        askg-data:Entity-functor_p1__%CF%83____2__p%CF%82,
        askg-data:Entity-lts,
        askg-data:Entity-lts_with_explicit_termination,
        askg-data:Entity-related_work .

askg-data:Paper-ae04d54115630f9e-Section-7-Paragraph-76 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 6"@en ;
    domo:Text "A state in an LTS with explicit termination can be seen as a non-deterministic automaton; this suggests that one might expect the traces of such a state to be the words accepted by the corresponding automaton, and this in fact the stance taken in previous work [8,11,4]; for the sake of distinction, let us call this form of trace semantics language semantics. Staring at the problem for a moment reveals that language semantics does not fit directly into our framework: Basically, our definition of trace sequence assembles the traces via successive iteration of the coalgebra structure, and remembers the traces reached in each iteration step. Contrastingly, language semantics will drop a word from the trace set if it turns out that upon complete execution of the word, no accepting state is reached - in α-trace semantics, on the other hand, we will have recorded prefixes of the word on the way, and our incremental approach does not foresee forgetting these prefixes. See Section 5 for a discussion of how α-trace sequences can be further quotiented to obtain language semantics."@en ;
    askg-onto:hasSentence askg-data:Paper-ae04d54115630f9e-Section-7-Paragraph-76-Sentence-761,
        askg-data:Paper-ae04d54115630f9e-Section-7-Paragraph-76-Sentence-762,
        askg-data:Paper-ae04d54115630f9e-Section-7-Paragraph-76-Sentence-763,
        askg-data:Paper-ae04d54115630f9e-Section-7-Paragraph-76-Sentence-764 ;
    askg-onto:index "6"^^xsd:int .

askg-data:Paper-ae04d54115630f9e-Section-7-Paragraph-76-Sentence-761 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "A state in an LTS with explicit termination can be seen as a non-deterministic automaton; this suggests that one might expect the traces of such a state to be the words accepted by the corresponding automaton, and this in fact the stance taken in previous work [8,11,4]; for the sake of distinction, let us call this form of trace semantics language semantics."@en ;
    askg-onto:inSentence "A state in an LTS with explicit termination can be seen as a non-deterministic automaton; this suggests that one might expect the traces of such a state to be the words accepted by the corresponding automaton, and this in fact the stance taken in previous work [8,11,4]; for the sake of distinction, let us call this form of trace semantics language semantics."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-corresponding_automaton,
        askg-data:Entity-explicit_termination,
        askg-data:Entity-language_semantics,
        askg-data:Entity-lts,
        askg-data:Entity-non-deterministic_automaton,
        askg-data:Entity-state,
        askg-data:Entity-trace_semantics,
        askg-data:Entity-traces .

askg-data:Paper-ae04d54115630f9e-Section-7-Paragraph-76-Sentence-762 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "Staring at the problem for a moment reveals that language semantics does not fit directly into our framework: Basically, our definition of trace sequence assembles the traces via successive iteration of the coalgebra structure, and remembers the traces reached in each iteration step."@en ;
    askg-onto:inSentence "Staring at the problem for a moment reveals that language semantics does not fit directly into our framework: Basically, our definition of trace sequence assembles the traces via successive iteration of the coalgebra structure, and remembers the traces reached in each iteration step."^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-coalgebra_structure,
        askg-data:Entity-framework,
        askg-data:Entity-iteration_step,
        askg-data:Entity-language_semantics,
        askg-data:Entity-trace_sequence,
        askg-data:Entity-traces .

askg-data:Paper-ae04d54115630f9e-Section-7-Paragraph-76-Sentence-763 a askg-onto:Sentence ;
    rdfs:label "Sentence 3"@en ;
    domo:Text "Contrastingly, language semantics will drop a word from the trace set if it turns out that upon complete execution of the word, no accepting state is reached - in α-trace semantics, on the other hand, we will have recorded prefixes of the word on the way, and our incremental approach does not foresee forgetting these prefixes."@en ;
    askg-onto:inSentence "Contrastingly, language semantics will drop a word from the trace set if it turns out that upon complete execution of the word, no accepting state is reached - in α-trace semantics, on the other hand, we will have recorded prefixes of the word on the way, and our incremental approach does not foresee forgetting these prefixes."^^xsd:string ;
    askg-onto:index "3"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-%CE%B1-trace_semantics,
        askg-data:Entity-forgetting_prefixes,
        askg-data:Entity-incremental_approach,
        askg-data:Entity-language_semantics,
        askg-data:Entity-prefixes_of_the_word,
        askg-data:Entity-word_from_the_trace_set .

askg-data:Paper-ae04d54115630f9e-Section-7-Paragraph-76-Sentence-764 a askg-onto:Sentence ;
    rdfs:label "Sentence 4"@en ;
    domo:Text "See Section 5 for a discussion of how α-trace sequences can be further quotiented to obtain language semantics."@en ;
    askg-onto:inSentence "See Section 5 for a discussion of how α-trace sequences can be further quotiented to obtain language semantics."^^xsd:string ;
    askg-onto:index "4"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-%CE%B1-trace_sequences,
        askg-data:Entity-language_semantics .

askg-data:Paper-ae04d54115630f9e-Section-7-Paragraph-77 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 7"@en ;
    domo:Text "Indeed one might contend that a more natural trace semantics of an LTS with explicit termination will distinguish two types of traces: those induced by the plain LTS structure, disregarding acceptance, and those that additionally end up in accepting states; this is related to the trace semantics of CSP [10], which distinguishes deadlock from successful termination X. Such a semantics is generated by our framework as follows. As the global monad, we take MX = P(Σ∗ × (X + 1)) (where we regard X and 1 = {X} as subsets of X + 1), with η(x) = {(**ǫ, x**)} and"@en ;
    askg-onto:hasSentence askg-data:Paper-ae04d54115630f9e-Section-7-Paragraph-77-Sentence-771,
        askg-data:Paper-ae04d54115630f9e-Section-7-Paragraph-77-Sentence-772,
        askg-data:Paper-ae04d54115630f9e-Section-7-Paragraph-77-Sentence-773 ;
    askg-onto:index "7"^^xsd:int .

askg-data:Paper-ae04d54115630f9e-Section-7-Paragraph-77-Sentence-771 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "Indeed one might contend that a more natural trace semantics of an LTS with explicit termination will distinguish two types of traces: those induced by the plain LTS structure, disregarding acceptance, and those that additionally end up in accepting states; this is related to the trace semantics of CSP [10], which distinguishes deadlock from successful termination X."@en ;
    askg-onto:inSentence "Indeed one might contend that a more natural trace semantics of an LTS with explicit termination will distinguish two types of traces: those induced by the plain LTS structure, disregarding acceptance, and those that additionally end up in accepting states; this is related to the trace semantics of CSP [10], which distinguishes deadlock from successful termination X."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-accepting_states,
        askg-data:Entity-csp,
        askg-data:Entity-lts,
        askg-data:Entity-lts_structure,
        askg-data:Entity-trace_semantics,
        askg-data:Entity-traces,
        askg-data:Entity-types_of_traces .

askg-data:Paper-ae04d54115630f9e-Section-7-Paragraph-77-Sentence-772 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "Such a semantics is generated by our framework as follows."@en ;
    askg-onto:inSentence "Such a semantics is generated by our framework as follows."^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-our_framework,
        askg-data:Entity-semantics .

askg-data:Paper-ae04d54115630f9e-Section-7-Paragraph-77-Sentence-773 a askg-onto:Sentence ;
    rdfs:label "Sentence 3"@en ;
    domo:Text "As the global monad, we take MX = P(Σ∗ × (X + 1)) (where we regard X and 1 = {X} as subsets of X + 1), with η(x) = {(**ǫ, x**)} and"@en ;
    askg-onto:inSentence "As the global monad, we take MX = P(Σ∗ × (X + 1)) (where we regard X and 1 = {X} as subsets of X + 1), with η(x) = {(**ǫ, x**)} and"^^xsd:string ;
    askg-onto:index "3"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-%C7%AB_x,
        askg-data:Entity-%CE%B7x,
        askg-data:Entity-concept,
        askg-data:Entity-mx,
        askg-data:Entity-p%CF%82__x__1 .

askg-data:Paper-ae04d54115630f9e-Section-7-Paragraph-78 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 8"@en ;
    domo:Text "$\\downarrow$ 4. f ∗(S) = {(uv, b) | ∃(**u, x**) ∈ S ∩ (Σ ∗ × X).(v, b) ∈ f(x)} ∪ (S ∩ (Σ"@en ;
    askg-onto:hasSentence askg-data:Paper-ae04d54115630f9e-Section-7-Paragraph-78-Sentence-781,
        askg-data:Paper-ae04d54115630f9e-Section-7-Paragraph-78-Sentence-782 ;
    askg-onto:index "8"^^xsd:int .

askg-data:Paper-ae04d54115630f9e-Section-7-Paragraph-78-Sentence-781 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "$\\downarrow$ 4."@en ;
    askg-onto:inSentence "$\\downarrow$ 4."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-concept,
        askg-data:Entity-dataset,
        askg-data:Entity-method,
        askg-data:Entity-research,
        askg-data:Entity-tool,
        askg-data:Entity-triple .

askg-data:Paper-ae04d54115630f9e-Section-7-Paragraph-78-Sentence-782 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "f ∗(S) = {(uv, b) | ∃(**u, x**) ∈ S ∩ (Σ ∗ × X).(v, b) ∈ f(x)} ∪ (S ∩ (Σ"@en ;
    askg-onto:inSentence "f ∗(S) = {(uv, b) | ∃(**u, x**) ∈ S ∩ (Σ ∗ × X).(v, b) ∈ f(x)} ∪ (S ∩ (Σ"^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-f_s,
        askg-data:Entity-uv_b__u_x__s__%CF%83___xv_b__fx__s__%CF%83 .

askg-data:Paper-ae04d54115630f9e-Section-7-Paragraph-79 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 9"@en ;
    domo:Text "$\\left(S\\cap\\left(\\Sigma^{\\star}\\times1\\right)\\right)$ for f : X → MY and S ∈ MY . This is exactly the monad induced by the distributive law λX : 1+Σ×P(X) → P(1+Σ×X) with λX(X) = {X} and λX (**a, S**) = a×S as used by Hasuo et al. [8]. We embed P(1 +Σ × ) into M by the natural transformation α given by αX (S) = {(ǫ, X) | X ∈ S} ∪ {(a, x) | (**a, x**) ∈ S} (implicitly converting letters into words in the second part). Then M1 ∼= P(Σ∗) 2 where the first components records accepted words and the second component non-blocked words; in α-trace sequences, the first component is always contained in the second one, and increases monotonically over the sequence as the Kleisli star as defined above always keeps traces that are already accepted. Two states are α-trace equivalent iff they generate the same traces and the same accepted traces, in the sense discussed above."@en ;
    askg-onto:hasSentence askg-data:Paper-ae04d54115630f9e-Section-7-Paragraph-79-Sentence-791,
        askg-data:Paper-ae04d54115630f9e-Section-7-Paragraph-79-Sentence-792,
        askg-data:Paper-ae04d54115630f9e-Section-7-Paragraph-79-Sentence-793,
        askg-data:Paper-ae04d54115630f9e-Section-7-Paragraph-79-Sentence-794,
        askg-data:Paper-ae04d54115630f9e-Section-7-Paragraph-79-Sentence-795,
        askg-data:Paper-ae04d54115630f9e-Section-7-Paragraph-79-Sentence-796 ;
    askg-onto:index "9"^^xsd:int .

askg-data:Paper-ae04d54115630f9e-Section-7-Paragraph-79-Sentence-791 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "$\\left(S\\cap\\left(\\Sigma^{\\star}\\times1\\right)\\right)$ for f : X → MY and S ∈ MY ."@en ;
    askg-onto:inSentence "$\\left(S\\cap\\left(\\Sigma^{\\star}\\times1\\right)\\right)$ for f : X → MY and S ∈ MY ."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-my,
        askg-data:Entity-s,
        askg-data:Entity-x .

askg-data:Paper-ae04d54115630f9e-Section-7-Paragraph-79-Sentence-792 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "This is exactly the monad induced by the distributive law λX : 1+Σ×P(X) → P(1+Σ×X) with λX(X) = {X} and λX (**a, S**) = a×S as used by Hasuo et al."@en ;
    askg-onto:inSentence "This is exactly the monad induced by the distributive law λX : 1+Σ×P(X) → P(1+Σ×X) with λX(X) = {X} and λX (**a, S**) = a×S as used by Hasuo et al."^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-hasuo_et_al,
        askg-data:Entity-monad_induced_by_the_distributive_law .

askg-data:Paper-ae04d54115630f9e-Section-7-Paragraph-79-Sentence-793 a askg-onto:Sentence ;
    rdfs:label "Sentence 3"@en ;
    domo:Text "[8]."@en ;
    askg-onto:inSentence "[8]."^^xsd:string ;
    askg-onto:index "3"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-8,
        askg-data:Entity-unknown .

askg-data:Paper-ae04d54115630f9e-Section-7-Paragraph-79-Sentence-794 a askg-onto:Sentence ;
    rdfs:label "Sentence 4"@en ;
    domo:Text "We embed P(1 +Σ × ) into M by the natural transformation α given by αX (S) = {(ǫ, X) | X ∈ S} ∪ {(a, x) | (**a, x**) ∈ S} (implicitly converting letters into words in the second part)."@en ;
    askg-onto:inSentence "We embed P(1 +Σ × ) into M by the natural transformation α given by αX (S) = {(ǫ, X) | X ∈ S} ∪ {(a, x) | (**a, x**) ∈ S} (implicitly converting letters into words in the second part)."^^xsd:string ;
    askg-onto:index "4"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-%CE%B1,
        askg-data:Entity-%CE%B1x_s__%C7%AB_x__x__s__a_x__a_x__s,
        askg-data:Entity-m,
        askg-data:Entity-p1_%CF%83__ .

askg-data:Paper-ae04d54115630f9e-Section-7-Paragraph-79-Sentence-795 a askg-onto:Sentence ;
    rdfs:label "Sentence 5"@en ;
    domo:Text "Then M1 ∼= P(Σ∗) 2 where the first components records accepted words and the second component non-blocked words; in α-trace sequences, the first component is always contained in the second one, and increases monotonically over the sequence as the Kleisli star as defined above always keeps traces that are already accepted."@en ;
    askg-onto:inSentence "Then M1 ∼= P(Σ∗) 2 where the first components records accepted words and the second component non-blocked words; in α-trace sequences, the first component is always contained in the second one, and increases monotonically over the sequence as the Kleisli star as defined above always keeps traces that are already accepted."^^xsd:string ;
    askg-onto:index "5"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-%CE%B1-trace_sequences,
        askg-data:Entity-accepted,
        askg-data:Entity-accepted_words,
        askg-data:Entity-kleisli_star,
        askg-data:Entity-m1,
        askg-data:Entity-non-blocked_words,
        askg-data:Entity-p%CF%82_2,
        askg-data:Entity-traces .

askg-data:Paper-ae04d54115630f9e-Section-7-Paragraph-79-Sentence-796 a askg-onto:Sentence ;
    rdfs:label "Sentence 6"@en ;
    domo:Text "Two states are α-trace equivalent iff they generate the same traces and the same accepted traces, in the sense discussed above."@en ;
    askg-onto:inSentence "Two states are α-trace equivalent iff they generate the same traces and the same accepted traces, in the sense discussed above."^^xsd:string ;
    askg-onto:index "6"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-%CE%B1-trace_equivalent,
        askg-data:Entity-accepted_traces,
        askg-data:Entity-states,
        askg-data:Entity-traces .

askg-data:Paper-ae04d54115630f9e-Section-8 a askg-onto:Section ;
    rdfs:label "Section 8"@en ;
    domo:Text "⊓⊔"@en ;
    askg-onto:index "8"^^xsd:int ;
    askg-onto:level "3"^^xsd:int .

askg-data:Paper-ae04d54115630f9e-Section-9 a askg-onto:Section ;
    rdfs:label "Section 9"@en ;
    domo:Text "5 Relation To Other Frameworks"@en ;
    askg-onto:hasParagraph askg-data:Paper-ae04d54115630f9e-Section-9-Paragraph-91,
        askg-data:Paper-ae04d54115630f9e-Section-9-Paragraph-910,
        askg-data:Paper-ae04d54115630f9e-Section-9-Paragraph-911,
        askg-data:Paper-ae04d54115630f9e-Section-9-Paragraph-912,
        askg-data:Paper-ae04d54115630f9e-Section-9-Paragraph-92,
        askg-data:Paper-ae04d54115630f9e-Section-9-Paragraph-93,
        askg-data:Paper-ae04d54115630f9e-Section-9-Paragraph-94,
        askg-data:Paper-ae04d54115630f9e-Section-9-Paragraph-95,
        askg-data:Paper-ae04d54115630f9e-Section-9-Paragraph-96,
        askg-data:Paper-ae04d54115630f9e-Section-9-Paragraph-97,
        askg-data:Paper-ae04d54115630f9e-Section-9-Paragraph-98,
        askg-data:Paper-ae04d54115630f9e-Section-9-Paragraph-99 ;
    askg-onto:index "9"^^xsd:int ;
    askg-onto:level "2"^^xsd:int .

askg-data:Paper-ae04d54115630f9e-Section-9-Paragraph-91 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 1"@en ;
    domo:Text "Kleisli Liftings Hasuo et al. [8] treat the case where the type functor G has the form T F for a monad T and a finitary endofunctor F on sets. They require that F lifts to a functor F¯ on the Kleisli category of T , which is equivalent to having a (functor-overmonad) distributive law λ : F T → **T F.** They impose further conditions that include a cppo structure on the hom-sets of the Kleisli category Kl(T ) of T and ensure that - T ∅ is a singleton, so that ∅ is a terminal object in Kl(T ) (unique Kleisli morphisms into ∅ of course being ⊥); and - the final sequence of F¯ coincides on objects with the initial sequence of F, and converges to the final F¯-coalgebra in ω steps."@en ;
    askg-onto:hasSentence askg-data:Paper-ae04d54115630f9e-Section-9-Paragraph-91-Sentence-911,
        askg-data:Paper-ae04d54115630f9e-Section-9-Paragraph-91-Sentence-912,
        askg-data:Paper-ae04d54115630f9e-Section-9-Paragraph-91-Sentence-913 ;
    askg-onto:index "1"^^xsd:int .

askg-data:Paper-ae04d54115630f9e-Section-9-Paragraph-91-Sentence-911 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "Kleisli Liftings Hasuo et al."@en ;
    askg-onto:inSentence "Kleisli Liftings Hasuo et al."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-hasuo_et_al,
        askg-data:Entity-kleisli_liftings .

askg-data:Paper-ae04d54115630f9e-Section-9-Paragraph-91-Sentence-912 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "[8] treat the case where the type functor G has the form T F for a monad T and a finitary endofunctor F on sets."@en ;
    askg-onto:inSentence "[8] treat the case where the type functor G has the form T F for a monad T and a finitary endofunctor F on sets."^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-endofunctor_f,
        askg-data:Entity-functor_g,
        askg-data:Entity-monad_t,
        askg-data:Entity-sets,
        askg-data:Entity-t_f .

askg-data:Paper-ae04d54115630f9e-Section-9-Paragraph-91-Sentence-913 a askg-onto:Sentence ;
    rdfs:label "Sentence 3"@en ;
    domo:Text "They require that F lifts to a functor F¯ on the Kleisli category of T , which is equivalent to having a (functor-overmonad) distributive law λ : F T → **T F.** They impose further conditions that include a cppo structure on the hom-sets of the Kleisli category Kl(T ) of T and ensure that - T ∅ is a singleton, so that ∅ is a terminal object in Kl(T ) (unique Kleisli morphisms into ∅ of course being ⊥); and - the final sequence of F¯ coincides on objects with the initial sequence of F, and converges to the final F¯-coalgebra in ω steps."@en ;
    askg-onto:inSentence "They require that F lifts to a functor F¯ on the Kleisli category of T , which is equivalent to having a (functor-overmonad) distributive law λ : F T → **T F.** They impose further conditions that include a cppo structure on the hom-sets of the Kleisli category Kl(T ) of T and ensure that - T ∅ is a singleton, so that ∅ is a terminal object in Kl(T ) (unique Kleisli morphisms into ∅ of course being ⊥); and - the final sequence of F¯ coincides on objects with the initial sequence of F, and converges to the final F¯-coalgebra in ω steps."^^xsd:string ;
    askg-onto:index "3"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-,
        askg-data:Entity-f,
        askg-data:Entity-final_f-coalgebra,
        askg-data:Entity-final_sequence_of_f,
        askg-data:Entity-functor-overmonad_distributive_law_%CE%BB__f_t__t_f,
        askg-data:Entity-in_%CF%89_steps,
        askg-data:Entity-initial_sequence_of_f,
        askg-data:Entity-kleisli_morphisms,
        askg-data:Entity-klt,
        askg-data:Entity-singleton,
        askg-data:Entity-t,
        askg-data:Entity-t_,
        askg-data:Entity-terminal_object_in_klt .

askg-data:Paper-ae04d54115630f9e-Section-9-Paragraph-910 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 10"@en ;
    domo:Text "we obtain"@en ;
    askg-onto:hasSentence askg-data:Paper-ae04d54115630f9e-Section-9-Paragraph-910-Sentence-9101 ;
    askg-onto:index "10"^^xsd:int .

askg-data:Paper-ae04d54115630f9e-Section-9-Paragraph-910-Sentence-9101 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "we obtain"@en ;
    askg-onto:inSentence "we obtain"^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-we .

askg-data:Paper-ae04d54115630f9e-Section-9-Paragraph-911 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 11"@en ;
    domo:Text "$\\bar{\\gamma}_n=\\perp^\\ast M!\\gamma^{(n)}$. (Kissig and Kurz [13] use a very similar definition in a more general setting that in particular, for non-commutative T , does not restrict T ∅ to be a singleton, and instead assume some distinguished element e ∈ T ∅. They then put γ˜0 = **λx. e**; the comparison with our framework is then entirely analogous.) Summing up, language equivalence is induced from α-trace equivalence by postcomposing α*-trace sequences with* ⊥∗: M1 → M0. Intuitively, this means that any information tied to poststates in a pretrace is erased in language equivalence, as opposed to just forgetting the poststate itself in α-trace equivalence. An example of this phenomenon are LTS with explicit termination as discussed in Section 4. Moreover, this observation elucidates why language equivalence becomes trivial in cases without explicit termination, such as standard LTS: here, all traces are tied to poststates and hence are erased when postcomposing with ⊥∗. (This is also easily seen directly [8]: without explicit termination, e.g. F = Σ × , one typically has F∅ = ∅ so that the final F¯-coalgebra is trivial in the Kleisli category of M.) Eilenberg-Moore Liftings An alternative route to final objects for trace semantics was first suggested by the generalized powerset construction of Silva et al. [16] and explicitly formulated in [4] (see also Jacobs et al. [11] where this is compared to the semantics given by Kleisli liftings). In this approach one considers liftings of functors to Eilenberg-Moore categories in lieu of Kleisli categories. The setup applies to functors of the form G = F T where F is an endofunctor and T is a monad on a base category C."@en ;
    askg-onto:hasSentence askg-data:Paper-ae04d54115630f9e-Section-9-Paragraph-911-Sentence-9111,
        askg-data:Paper-ae04d54115630f9e-Section-9-Paragraph-911-Sentence-91110,
        askg-data:Paper-ae04d54115630f9e-Section-9-Paragraph-911-Sentence-91111,
        askg-data:Paper-ae04d54115630f9e-Section-9-Paragraph-911-Sentence-91112,
        askg-data:Paper-ae04d54115630f9e-Section-9-Paragraph-911-Sentence-91113,
        askg-data:Paper-ae04d54115630f9e-Section-9-Paragraph-911-Sentence-9112,
        askg-data:Paper-ae04d54115630f9e-Section-9-Paragraph-911-Sentence-9113,
        askg-data:Paper-ae04d54115630f9e-Section-9-Paragraph-911-Sentence-9114,
        askg-data:Paper-ae04d54115630f9e-Section-9-Paragraph-911-Sentence-9115,
        askg-data:Paper-ae04d54115630f9e-Section-9-Paragraph-911-Sentence-9116,
        askg-data:Paper-ae04d54115630f9e-Section-9-Paragraph-911-Sentence-9117,
        askg-data:Paper-ae04d54115630f9e-Section-9-Paragraph-911-Sentence-9118,
        askg-data:Paper-ae04d54115630f9e-Section-9-Paragraph-911-Sentence-9119 ;
    askg-onto:index "11"^^xsd:int .

askg-data:Paper-ae04d54115630f9e-Section-9-Paragraph-911-Sentence-9111 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "$\\bar{\\gamma}_n=\\perp^\\ast M!\\gamma^{(n)}$."@en ;
    askg-onto:inSentence "$\\bar{\\gamma}_n=\\perp^\\ast M!\\gamma^{(n)}$."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-argamma_n,
        askg-data:Entity-argamma_n%09extperp_mgamman .

askg-data:Paper-ae04d54115630f9e-Section-9-Paragraph-911-Sentence-91110 a askg-onto:Sentence ;
    rdfs:label "Sentence 10"@en ;
    domo:Text "[16] and explicitly formulated in [4] (see also Jacobs et al."@en ;
    askg-onto:inSentence "[16] and explicitly formulated in [4] (see also Jacobs et al."^^xsd:string ;
    askg-onto:index "10"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-4,
        askg-data:Entity-jacobs_et_al .

askg-data:Paper-ae04d54115630f9e-Section-9-Paragraph-911-Sentence-91111 a askg-onto:Sentence ;
    rdfs:label "Sentence 11"@en ;
    domo:Text "[11] where this is compared to the semantics given by Kleisli liftings)."@en ;
    askg-onto:inSentence "[11] where this is compared to the semantics given by Kleisli liftings)."^^xsd:string ;
    askg-onto:index "11"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-kleisli_liftings,
        askg-data:Entity-semantics .

askg-data:Paper-ae04d54115630f9e-Section-9-Paragraph-911-Sentence-91112 a askg-onto:Sentence ;
    rdfs:label "Sentence 12"@en ;
    domo:Text "In this approach one considers liftings of functors to Eilenberg-Moore categories in lieu of Kleisli categories."@en ;
    askg-onto:inSentence "In this approach one considers liftings of functors to Eilenberg-Moore categories in lieu of Kleisli categories."^^xsd:string ;
    askg-onto:index "12"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-eilenberg-moore_categories,
        askg-data:Entity-kleisli_categories,
        askg-data:Entity-liftings_of_functors .

askg-data:Paper-ae04d54115630f9e-Section-9-Paragraph-911-Sentence-91113 a askg-onto:Sentence ;
    rdfs:label "Sentence 13"@en ;
    domo:Text "The setup applies to functors of the form G = F T where F is an endofunctor and T is a monad on a base category C."@en ;
    askg-onto:inSentence "The setup applies to functors of the form G = F T where F is an endofunctor and T is a monad on a base category C."^^xsd:string ;
    askg-onto:index "13"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-base_category,
        askg-data:Entity-c,
        askg-data:Entity-endofunctor,
        askg-data:Entity-f,
        askg-data:Entity-f_t,
        askg-data:Entity-g,
        askg-data:Entity-monad,
        askg-data:Entity-t .

askg-data:Paper-ae04d54115630f9e-Section-9-Paragraph-911-Sentence-9112 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "(Kissig and Kurz [13] use a very similar definition in a more general setting that in particular, for non-commutative T , does not restrict T ∅ to be a singleton, and instead assume some distinguished element e ∈ T ∅."@en ;
    askg-onto:inSentence "(Kissig and Kurz [13] use a very similar definition in a more general setting that in particular, for non-commutative T , does not restrict T ∅ to be a singleton, and instead assume some distinguished element e ∈ T ∅."^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-definition,
        askg-data:Entity-distinguished_element_e,
        askg-data:Entity-e,
        askg-data:Entity-general_setting,
        askg-data:Entity-kissig_and_kurz,
        askg-data:Entity-t,
        askg-data:Entity-t_ .

askg-data:Paper-ae04d54115630f9e-Section-9-Paragraph-911-Sentence-9113 a askg-onto:Sentence ;
    rdfs:label "Sentence 3"@en ;
    domo:Text "They then put γ˜0 = **λx."@en ;
    askg-onto:inSentence "They then put γ˜0 = **λx."^^xsd:string ;
    askg-onto:index "3"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-%CE%B30,
        askg-data:Entity-%CE%BBx .

askg-data:Paper-ae04d54115630f9e-Section-9-Paragraph-911-Sentence-9114 a askg-onto:Sentence ;
    rdfs:label "Sentence 4"@en ;
    domo:Text "e**; the comparison with our framework is then entirely analogous.) Summing up, language equivalence is induced from α-trace equivalence by postcomposing α*-trace sequences with* ⊥∗: M1 → M0."@en ;
    askg-onto:inSentence "e**; the comparison with our framework is then entirely analogous.) Summing up, language equivalence is induced from α-trace equivalence by postcomposing α*-trace sequences with* ⊥∗: M1 → M0."^^xsd:string ;
    askg-onto:index "4"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-%CE%B1-trace_equivalence,
        askg-data:Entity-%CE%B1-trace_sequences,
        askg-data:Entity-_m1__m0,
        askg-data:Entity-language_equivalence .

askg-data:Paper-ae04d54115630f9e-Section-9-Paragraph-911-Sentence-9115 a askg-onto:Sentence ;
    rdfs:label "Sentence 5"@en ;
    domo:Text "Intuitively, this means that any information tied to poststates in a pretrace is erased in language equivalence, as opposed to just forgetting the poststate itself in α-trace equivalence."@en ;
    askg-onto:inSentence "Intuitively, this means that any information tied to poststates in a pretrace is erased in language equivalence, as opposed to just forgetting the poststate itself in α-trace equivalence."^^xsd:string ;
    askg-onto:index "5"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-%CE%B1-trace_equivalence,
        askg-data:Entity-information,
        askg-data:Entity-language_equivalence,
        askg-data:Entity-poststate,
        askg-data:Entity-poststates,
        askg-data:Entity-pretrace .

askg-data:Paper-ae04d54115630f9e-Section-9-Paragraph-911-Sentence-9116 a askg-onto:Sentence ;
    rdfs:label "Sentence 6"@en ;
    domo:Text "An example of this phenomenon are LTS with explicit termination as discussed in Section 4."@en ;
    askg-onto:inSentence "An example of this phenomenon are LTS with explicit termination as discussed in Section 4."^^xsd:string ;
    askg-onto:index "6"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-explicit_termination,
        askg-data:Entity-lts .

askg-data:Paper-ae04d54115630f9e-Section-9-Paragraph-911-Sentence-9117 a askg-onto:Sentence ;
    rdfs:label "Sentence 7"@en ;
    domo:Text "Moreover, this observation elucidates why language equivalence becomes trivial in cases without explicit termination, such as standard LTS: here, all traces are tied to poststates and hence are erased when postcomposing with ⊥∗."@en ;
    askg-onto:inSentence "Moreover, this observation elucidates why language equivalence becomes trivial in cases without explicit termination, such as standard LTS: here, all traces are tied to poststates and hence are erased when postcomposing with ⊥∗."^^xsd:string ;
    askg-onto:index "7"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-,
        askg-data:Entity-all_traces,
        askg-data:Entity-language_equivalence,
        askg-data:Entity-poststates,
        askg-data:Entity-standard_lts .

askg-data:Paper-ae04d54115630f9e-Section-9-Paragraph-911-Sentence-9118 a askg-onto:Sentence ;
    rdfs:label "Sentence 8"@en ;
    domo:Text "(This is also easily seen directly [8]: without explicit termination, e.g."@en ;
    askg-onto:inSentence "(This is also easily seen directly [8]: without explicit termination, e.g."^^xsd:string ;
    askg-onto:index "8"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-explicit_termination,
        askg-data:Entity-termination .

askg-data:Paper-ae04d54115630f9e-Section-9-Paragraph-911-Sentence-9119 a askg-onto:Sentence ;
    rdfs:label "Sentence 9"@en ;
    domo:Text "F = Σ × , one typically has F∅ = ∅ so that the final F¯-coalgebra is trivial in the Kleisli category of M.) Eilenberg-Moore Liftings An alternative route to final objects for trace semantics was first suggested by the generalized powerset construction of Silva et al."@en ;
    askg-onto:inSentence "F = Σ × , one typically has F∅ = ∅ so that the final F¯-coalgebra is trivial in the Kleisli category of M.) Eilenberg-Moore Liftings An alternative route to final objects for trace semantics was first suggested by the generalized powerset construction of Silva et al."^^xsd:string ;
    askg-onto:index "9"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-author,
        askg-data:Entity-concept,
        askg-data:Entity-eilenberg-moore_liftings,
        askg-data:Entity-generalized_powerset_construction,
        askg-data:Entity-method,
        askg-data:Entity-silva_et_al .

askg-data:Paper-ae04d54115630f9e-Section-9-Paragraph-912 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 12"@en ;
    domo:Text "It is based on assuming a final F-coalgebra Z and a (functor-over-monad) distributive law"@en ;
    askg-onto:hasSentence askg-data:Paper-ae04d54115630f9e-Section-9-Paragraph-912-Sentence-9121 ;
    askg-onto:index "12"^^xsd:int .

askg-data:Paper-ae04d54115630f9e-Section-9-Paragraph-912-Sentence-9121 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "It is based on assuming a final F-coalgebra Z and a (functor-over-monad) distributive law"@en ;
    askg-onto:inSentence "It is based on assuming a final F-coalgebra Z and a (functor-over-monad) distributive law"^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-f-coalgebra_z,
        askg-data:Entity-functor-over-monad_distributive_law .

askg-data:Paper-ae04d54115630f9e-Section-9-Paragraph-92 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 2"@en ;
    domo:Text "The trace semantics of a T F-coalgebra is then defined as the unique Kleisli morphism into the final F¯-coalgebra; in keeping with distinguishing terminology used in Section 4, we refer to this as language semantics. Thus, two states in a T F-coalgebra are language equivalent, i.e. trace equivalent in the sense of Hasuo et al., iff they map to the same values in the final sequence of F¯ under the cones induced by the respective coalgebras. Explicitly: the underlying sets of the final sequence of F¯ have the form T F n∅, **n < ω**, and given a coalgebra γ : X → **T F X**, the canonical cone (¯γn : X → T F n∅)n<ω is defined recursively by γ0 = ⊥ and"@en ;
    askg-onto:hasSentence askg-data:Paper-ae04d54115630f9e-Section-9-Paragraph-92-Sentence-921,
        askg-data:Paper-ae04d54115630f9e-Section-9-Paragraph-92-Sentence-922,
        askg-data:Paper-ae04d54115630f9e-Section-9-Paragraph-92-Sentence-923,
        askg-data:Paper-ae04d54115630f9e-Section-9-Paragraph-92-Sentence-924 ;
    askg-onto:index "2"^^xsd:int .

askg-data:Paper-ae04d54115630f9e-Section-9-Paragraph-92-Sentence-921 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "The trace semantics of a T F-coalgebra is then defined as the unique Kleisli morphism into the final F¯-coalgebra; in keeping with distinguishing terminology used in Section 4, we refer to this as language semantics."@en ;
    askg-onto:inSentence "The trace semantics of a T F-coalgebra is then defined as the unique Kleisli morphism into the final F¯-coalgebra; in keeping with distinguishing terminology used in Section 4, we refer to this as language semantics."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-final_f-coalgebra,
        askg-data:Entity-kleisli_morphism,
        askg-data:Entity-language_semantics,
        askg-data:Entity-t_f-coalgebra,
        askg-data:Entity-trace_semantics .

askg-data:Paper-ae04d54115630f9e-Section-9-Paragraph-92-Sentence-922 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "Thus, two states in a T F-coalgebra are language equivalent, i.e."@en ;
    askg-onto:inSentence "Thus, two states in a T F-coalgebra are language equivalent, i.e."^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-language_equivalent,
        askg-data:Entity-t_f-coalgebra .

askg-data:Paper-ae04d54115630f9e-Section-9-Paragraph-92-Sentence-923 a askg-onto:Sentence ;
    rdfs:label "Sentence 3"@en ;
    domo:Text "trace equivalent in the sense of Hasuo et al., iff they map to the same values in the final sequence of F¯ under the cones induced by the respective coalgebras."@en ;
    askg-onto:inSentence "trace equivalent in the sense of Hasuo et al., iff they map to the same values in the final sequence of F¯ under the cones induced by the respective coalgebras."^^xsd:string ;
    askg-onto:index "3"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-cones_induced_by_the_respective_coalgebras,
        askg-data:Entity-f .

askg-data:Paper-ae04d54115630f9e-Section-9-Paragraph-92-Sentence-924 a askg-onto:Sentence ;
    rdfs:label "Sentence 4"@en ;
    domo:Text "Explicitly: the underlying sets of the final sequence of F¯ have the form T F n∅, **n < ω**, and given a coalgebra γ : X → **T F X**, the canonical cone (¯γn : X → T F n∅)n<ω is defined recursively by γ0 = ⊥ and"@en ;
    askg-onto:inSentence "Explicitly: the underlying sets of the final sequence of F¯ have the form T F n∅, **n < ω**, and given a coalgebra γ : X → **T F X**, the canonical cone (¯γn : X → T F n∅)n<ω is defined recursively by γ0 = ⊥ and"^^xsd:string ;
    askg-onto:index "4"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-%CE%B3,
        askg-data:Entity-%CE%B30__,
        askg-data:Entity-%CE%B3n__x__t_f_nn%CF%89,
        askg-data:Entity-n__%CF%89,
        askg-data:Entity-t_f_n,
        askg-data:Entity-x__t_f_x .

askg-data:Paper-ae04d54115630f9e-Section-9-Paragraph-93 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 3"@en ;
    domo:Text "$\\bar{\\gamma}_{n+1}=\\ X\\xrightarrow{\\gamma}TFX\\xrightarrow{TF\\bar{\\gamma}_{n}}TFTF^{n}\\emptyset\\xrightarrow{T\\lambda}TTF^{n+1}\\emptyset\\xrightarrow{\\mu}TF^{n+1}\\emptyset$. $\\eqref{eq:walpha}$."@en ;
    askg-onto:hasSentence askg-data:Paper-ae04d54115630f9e-Section-9-Paragraph-93-Sentence-931,
        askg-data:Paper-ae04d54115630f9e-Section-9-Paragraph-93-Sentence-932 ;
    askg-onto:index "3"^^xsd:int .

askg-data:Paper-ae04d54115630f9e-Section-9-Paragraph-93-Sentence-931 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "$\\bar{\\gamma}_{n+1}=\\ X\\xrightarrow{\\gamma}TFX\\xrightarrow{TF\\bar{\\gamma}_{n}}TFTF^{n}\\emptyset\\xrightarrow{T\\lambda}TTF^{n+1}\\emptyset\\xrightarrow{\\mu}TF^{n+1}\\emptyset$."@en ;
    askg-onto:inSentence "$\\bar{\\gamma}_{n+1}=\\ X\\xrightarrow{\\gamma}TFX\\xrightarrow{TF\\bar{\\gamma}_{n}}TFTF^{n}\\emptyset\\xrightarrow{T\\lambda}TTF^{n+1}\\emptyset\\xrightarrow{\\mu}TF^{n+1}\\emptyset$."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-tfn1emptyset,
        askg-data:Entity-tftfnemptyset,
        askg-data:Entity-tfx,
        askg-data:Entity-ttfn1emptyset .

askg-data:Paper-ae04d54115630f9e-Section-9-Paragraph-93-Sentence-932 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "$\\eqref{eq:walpha}$."@en ;
    askg-onto:inSentence "$\\eqref{eq:walpha}$."^^xsd:string ;
    askg-onto:index "2"^^xsd:int .

askg-data:Paper-ae04d54115630f9e-Section-9-Paragraph-94 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 4"@en ;
    domo:Text "Now the distributive law λ induces a monad structure on the functor"@en ;
    askg-onto:hasSentence askg-data:Paper-ae04d54115630f9e-Section-9-Paragraph-94-Sentence-941 ;
    askg-onto:index "4"^^xsd:int .

askg-data:Paper-ae04d54115630f9e-Section-9-Paragraph-94-Sentence-941 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "Now the distributive law λ induces a monad structure on the functor"@en ;
    askg-onto:inSentence "Now the distributive law λ induces a monad structure on the functor"^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-distributive_law_%CE%BB,
        askg-data:Entity-functor,
        askg-data:Entity-monad_structure .

askg-data:Paper-ae04d54115630f9e-Section-9-Paragraph-95 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 5"@en ;
    domo:Text "$$M=T F^{*},$$ M = T F∗, (2) where F ∗ denotes the (algebraically-)free monad on F (cf. Section 4), and we have a natural transformation α : T F → M, so that the situation fits our current framework."@en ;
    askg-onto:hasSentence askg-data:Paper-ae04d54115630f9e-Section-9-Paragraph-95-Sentence-951,
        askg-data:Paper-ae04d54115630f9e-Section-9-Paragraph-95-Sentence-952 ;
    askg-onto:index "5"^^xsd:int .

askg-data:Paper-ae04d54115630f9e-Section-9-Paragraph-95-Sentence-951 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "$$M=T F^{*},$$ M = T F∗, (2) where F ∗ denotes the (algebraically-)free monad on F (cf."@en ;
    askg-onto:inSentence "$$M=T F^{*},$$ M = T F∗, (2) where F ∗ denotes the (algebraically-)free monad on F (cf."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-algebraically-free_monad_on_f,
        askg-data:Entity-f,
        askg-data:Entity-m,
        askg-data:Entity-tf .

askg-data:Paper-ae04d54115630f9e-Section-9-Paragraph-95-Sentence-952 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "Section 4), and we have a natural transformation α : T F → M, so that the situation fits our current framework."@en ;
    askg-onto:inSentence "Section 4), and we have a natural transformation α : T F → M, so that the situation fits our current framework."^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-concept,
        askg-data:Entity-m,
        askg-data:Entity-natural_transformation,
        askg-data:Entity-t_f .

askg-data:Paper-ae04d54115630f9e-Section-9-Paragraph-96 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 6"@en ;
    domo:Text "The sets T F nX embed into MX, so that the objects in the final sequence of F¯ can be seen as living in M0. The definition of γ¯n+1 is then seen to be just an explicit form of Kleisli composition in M; that is, we can, for purposes of language equivalence, replace the γ¯n with maps γ˜n : X → M0 defined recursively by"@en ;
    askg-onto:hasSentence askg-data:Paper-ae04d54115630f9e-Section-9-Paragraph-96-Sentence-961,
        askg-data:Paper-ae04d54115630f9e-Section-9-Paragraph-96-Sentence-962 ;
    askg-onto:index "6"^^xsd:int .

askg-data:Paper-ae04d54115630f9e-Section-9-Paragraph-96-Sentence-961 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "The sets T F nX embed into MX, so that the objects in the final sequence of F¯ can be seen as living in M0."@en ;
    askg-onto:inSentence "The sets T F nX embed into MX, so that the objects in the final sequence of F¯ can be seen as living in M0."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-f,
        askg-data:Entity-m0,
        askg-data:Entity-mx,
        askg-data:Entity-t_f_nx .

askg-data:Paper-ae04d54115630f9e-Section-9-Paragraph-96-Sentence-962 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "The definition of γ¯n+1 is then seen to be just an explicit form of Kleisli composition in M; that is, we can, for purposes of language equivalence, replace the γ¯n with maps γ˜n : X → M0 defined recursively by"@en ;
    askg-onto:inSentence "The definition of γ¯n+1 is then seen to be just an explicit form of Kleisli composition in M; that is, we can, for purposes of language equivalence, replace the γ¯n with maps γ˜n : X → M0 defined recursively by"^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-%CE%B3n,
        askg-data:Entity-%CE%B3n1,
        askg-data:Entity-kleisli_composition,
        askg-data:Entity-maps_%CE%B3n__x__m0 .

askg-data:Paper-ae04d54115630f9e-Section-9-Paragraph-97 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 7"@en ;
    domo:Text "$$\\tilde{\\gamma}_{0}=\\perp\\qquad\\tilde{\\gamma}_{n+1}=\\tilde{\\gamma}_{n}^{*}\\alpha\\gamma$$"@en ;
    askg-onto:hasSentence askg-data:Paper-ae04d54115630f9e-Section-9-Paragraph-97-Sentence-971 ;
    askg-onto:index "7"^^xsd:int .

askg-data:Paper-ae04d54115630f9e-Section-9-Paragraph-97-Sentence-971 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "$$\\tilde{\\gamma}_{0}=\\perp\\qquad\\tilde{\\gamma}_{n+1}=\\tilde{\\gamma}_{n}^{*}\\alpha\\gamma$$"@en ;
    askg-onto:inSentence "$$\\tilde{\\gamma}_{0}=\\perp\\qquad\\tilde{\\gamma}_{n+1}=\\tilde{\\gamma}_{n}^{*}\\alpha\\gamma$$"^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-%09ildeeta_n,
        askg-data:Entity-%09ildeeta_n1 .

askg-data:Paper-ae04d54115630f9e-Section-9-Paragraph-98 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 8"@en ;
    domo:Text "where the Kleisli star is that of M. Comparing with (1), we see that the only difference with the definition of γ (n)is in the base of the recursion: γ (0) = ηX . Noting moreover that"@en ;
    askg-onto:hasSentence askg-data:Paper-ae04d54115630f9e-Section-9-Paragraph-98-Sentence-981,
        askg-data:Paper-ae04d54115630f9e-Section-9-Paragraph-98-Sentence-982,
        askg-data:Paper-ae04d54115630f9e-Section-9-Paragraph-98-Sentence-983 ;
    askg-onto:index "8"^^xsd:int .

askg-data:Paper-ae04d54115630f9e-Section-9-Paragraph-98-Sentence-981 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "where the Kleisli star is that of M."@en ;
    askg-onto:inSentence "where the Kleisli star is that of M."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-kleisli_star,
        askg-data:Entity-m .

askg-data:Paper-ae04d54115630f9e-Section-9-Paragraph-98-Sentence-982 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "Comparing with (1), we see that the only difference with the definition of γ (n)is in the base of the recursion: γ (0) = ηX ."@en ;
    askg-onto:inSentence "Comparing with (1), we see that the only difference with the definition of γ (n)is in the base of the recursion: γ (0) = ηX ."^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-%CE%B3_0__%CE%B7x,
        askg-data:Entity-%CE%B3_n .

askg-data:Paper-ae04d54115630f9e-Section-9-Paragraph-98-Sentence-983 a askg-onto:Sentence ;
    rdfs:label "Sentence 3"@en ;
    domo:Text "Noting moreover that"@en ;
    askg-onto:inSentence "Noting moreover that"^^xsd:string ;
    askg-onto:index "3"^^xsd:int .

askg-data:Paper-ae04d54115630f9e-Section-9-Paragraph-99 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 9"@en ;
    domo:Text "$$\\perp^{*}M!\\eta_{X}=\\perp^{*}\\eta!=\\perp!=\\perp,$$"@en ;
    askg-onto:hasSentence askg-data:Paper-ae04d54115630f9e-Section-9-Paragraph-99-Sentence-991 ;
    askg-onto:index "9"^^xsd:int .

askg-data:Paper-ae04d54115630f9e-Section-9-Paragraph-99-Sentence-991 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "$$\\perp^{*}M!\\eta_{X}=\\perp^{*}\\eta!=\\perp!=\\perp,$$"@en ;
    askg-onto:inSentence "$$\\perp^{*}M!\\eta_{X}=\\perp^{*}\\eta!=\\perp!=\\perp,$$"^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-%0Aperpm%0A,
        askg-data:Entity-eta_x,
        askg-data:Entity-m,
        askg-data:Entity-perp,
        askg-data:Entity-perpeta .

askg-data:Entity-%CE%B1n1 rdfs:label "αn+1"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-%CE%B1x rdfs:label "αX"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-%CE%B3_ rdfs:label "γ ′"@en,
        "γ ♯"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-%CE%B4 rdfs:label "δ"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-%CF%81 rdfs:label "ρ"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-1974 rdfs:label "1974"@en ;
    askg-onto:entityType "Concept"@en,
        "Publication"@en .

askg-data:Entity-1985 rdfs:label "1985"@en ;
    askg-onto:entityType "Publication"@en .

askg-data:Entity-a_researcher rdfs:label "a researcher"@en ;
    askg-onto:entityType "Researcher"@en .

askg-data:Entity-ab rdfs:label "ab"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-ac rdfs:label "ac"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-aczel rdfs:label "Aczel"@en ;
    askg-onto:entityType "Author"@en,
        "Person"@en .

askg-data:Entity-adjunction rdfs:label "adjunction"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-algebraically-free_monad rdfs:label "(algebraically-)free monad"@en,
        "algebraically-free monad"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-argamma_n rdfs:label "$ar{\\gamma}_n$"@en,
        "${ar{\\gamma}}_{n}"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-b rdfs:label "B."@en,
        "b"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-base_category rdfs:label "base category"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-behavioural_equivalence rdfs:label "Behavioural equivalence"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-bonchi_m rdfs:label "Bonchi, M."@en ;
    askg-onto:entityType "Person"@en .

askg-data:Entity-bonsangue rdfs:label "Bonsangue"@en ;
    askg-onto:entityType "Person"@en .

askg-data:Entity-category_c rdfs:label "category C"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-coalgebraic_approach rdfs:label "coalgebraic approach"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-coalgebraic_methods_in_computer_science rdfs:label "Coalgebraic Methods in Computer Science"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-company rdfs:label "Company"@en ;
    askg-onto:entityType "Company"@en .

askg-data:Entity-comput rdfs:label "Comput."@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-conference rdfs:label "Conference"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-coproduct_injections rdfs:label "coproduct injections"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-deadlock rdfs:label "deadlock"@en ;
    askg-onto:entityType "Concept"@en,
        "Condition"@en .

askg-data:Entity-definitions rdfs:label "definitions"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-determinization rdfs:label "determinization"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-e rdfs:label "e"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-endofunctor_g rdfs:label "endofunctor G"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-f%CB%86%CE%B7%CB%86tx rdfs:label "FˆηˆTX"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-f%CB%86t_x rdfs:label "Fˆ∗T !X"@en,
        "Fˆ∗T X"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-f_ rdfs:label "f ∗"@en,
        "f ♯"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-f_t rdfs:label "F T"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-final_f-coalgebra rdfs:label "final F¯-coalgebra"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-final_sequence_of_f rdfs:label "final sequence of F"@en,
        "final sequence of F¯"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-finitary_endofunctor rdfs:label "finitary endofunctor"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-finitary_monad rdfs:label "finitary monad"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-finite-depth_behavioural_equivalence rdfs:label "finite-depth behavioural equivalence"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-finite_traces rdfs:label "finite traces"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-finite_unfoldings rdfs:label "finite unfoldings"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-free_f%CB%86-algebras rdfs:label "free Fˆ-algebras"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-functor-over-monad_distributive_law rdfs:label "(functor-over-monad) distributive law"@en,
        "functor-over-monad distributive law"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-functor_f rdfs:label "functor F"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-functor_g rdfs:label "functor G"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-g-coalgebras rdfs:label "G-coalgebras"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-g1 rdfs:label "G1"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-generalized_powerset_construction rdfs:label "generalized powerset construction"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-gimona rdfs:label "Gimona"@en ;
    askg-onto:entityType "Author"@en,
        "Person"@en .

askg-data:Entity-global_element rdfs:label "global element"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-gn rdfs:label "Gn"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-induction rdfs:label "Induction"@en,
        "induction"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-induction_hypothesis rdfs:label "induction hypothesis"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-information rdfs:label "information"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-initial_algebra_semantics rdfs:label "Initial algebra semantics"@en,
        "initial algebra semantics"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-institution rdfs:label "Institution"@en,
        "institution"@en ;
    askg-onto:entityType "Institution"@en .

askg-data:Entity-isomorphism rdfs:label "isomorphism"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-kleisli_category rdfs:label "Kleisli category"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-kleisli_liftings rdfs:label "Kleisli Liftings"@en,
        "Kleisli liftings"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-lemma_2 rdfs:label "Lemma 2"@en ;
    askg-onto:entityType "Concept"@en,
        "Publication"@en .

askg-data:Entity-linear-time_logics rdfs:label "linear-time logics"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-locally_finitely_presentable rdfs:label "locally finitely presentable"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-lts_with_explicit_termination rdfs:label "LTS with explicit termination"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-m%CE%B3_n rdfs:label "M!(γ (n))"@en,
        "M!γ (n)"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-m1 rdfs:label "M1"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-methods rdfs:label "Methods"@en,
        "methods"@en ;
    askg-onto:entityType "Concept"@en,
        "Domain"@en .

askg-data:Entity-montanari rdfs:label "Montanari"@en ;
    askg-onto:entityType "Author"@en,
        "Person"@en .

askg-data:Entity-natural_transformation_%CE%B1 rdfs:label "natural transformation α"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-non-blocked_words rdfs:label "non-blocked words"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-non-deterministic_automata rdfs:label "non-deterministic automata"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-non-deterministic_automaton rdfs:label "non-deterministic automaton"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-non-empty rdfs:label "non-empty"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-non-empty_powerset rdfs:label "non-empty powerset"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-our_approach rdfs:label "our approach"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-p%CF%82__ rdfs:label "P(Σ × )"@en,
        "P(Σ∗ × )"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-p%CF%89 rdfs:label "P<ω"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-p_ rdfs:label "P ∗"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-paradigm rdfs:label "Paradigm"@en ;
    askg-onto:entityType "Paradigm"@en .

askg-data:Entity-platform rdfs:label "Platform"@en ;
    askg-onto:entityType "Platform"@en .

askg-data:Entity-plotkin rdfs:label "Plotkin"@en ;
    askg-onto:entityType "Author"@en,
        "Person"@en .

askg-data:Entity-poststates rdfs:label "poststates"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-power rdfs:label "Power"@en ;
    askg-onto:entityType "Author"@en,
        "Concept"@en .

askg-data:Entity-pretrace rdfs:label "pretrace"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-pretraces rdfs:label "pretraces"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-reichel rdfs:label "Reichel"@en ;
    askg-onto:entityType "Author"@en,
        "Person"@en .

askg-data:Entity-research_concepts rdfs:label "Research concepts"@en,
        "research concepts"@en ;
    askg-onto:entityType "Concept"@en,
        "Domain"@en .

askg-data:Entity-rutten rdfs:label "Rutten"@en ;
    askg-onto:entityType "Person"@en .

askg-data:Entity-s20 rdfs:label "s20"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-s21 rdfs:label "s21"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-semantics rdfs:label "semantics"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-semantics_of_finite_traces rdfs:label "semantics of finite traces"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-sett rdfs:label "SetT"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-silva rdfs:label "Silva"@en ;
    askg-onto:entityType "Author"@en,
        "Person"@en .

askg-data:Entity-silva_f rdfs:label "Silva, F."@en ;
    askg-onto:entityType "Person"@en .

askg-data:Entity-sokolova rdfs:label "Sokolova"@en ;
    askg-onto:entityType "Author"@en,
        "Person"@en .

askg-data:Entity-standard_lts rdfs:label "standard LTS"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-strong_bisimulation rdfs:label "strong bisimulation"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-t_ rdfs:label "T ∅"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-t_f-coalgebra rdfs:label "T F-coalgebra"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-termination rdfs:label "termination"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-theorem_9 rdfs:label "Theorem 9"@en ;
    askg-onto:entityType "Concept"@en,
        "Publication"@en .

askg-data:Entity-theory rdfs:label "Theory"@en ;
    askg-onto:entityType "Theory"@en .

askg-data:Entity-tool rdfs:label "Tool"@en,
        "tool"@en ;
    askg-onto:entityType "Tool"@en .

askg-data:Entity-trace rdfs:label "trace"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-trace_equivalent rdfs:label "trace equivalent"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-trace_sequence rdfs:label "trace sequence"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-university rdfs:label "University"@en ;
    askg-onto:entityType "University"@en .

askg-data:Entity-van_glabbeek rdfs:label "van Glabbeek"@en ;
    askg-onto:entityType "Author"@en,
        "Person"@en .

askg-data:Entity-wlog rdfs:label "w.l.o.g."@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-x__t_f_x rdfs:label "X → T F X"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-%CE%B1-trace_equivalent rdfs:label "α*-trace equivalent"@en,
        "α-trace equivalent"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-%CE%B1-trace_sequence rdfs:label "α*-trace sequence"@en,
        "α-trace sequence"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-%CE%B3_n rdfs:label "γ (n)"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-%CF%89 rdfs:label "ω"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-accepted_words rdfs:label "accepted words"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-artificial_intelligence rdfs:label "Artificial Intelligence"@en ;
    askg-onto:entityType "Concept"@en,
        "Domain"@en .

askg-data:Entity-automaton rdfs:label "automaton"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-data rdfs:label "Data"@en,
        "data"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-definition rdfs:label "definition"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-endofunctor rdfs:label "endofunctor"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-experiment rdfs:label "Experiment"@en,
        "experiment"@en ;
    askg-onto:entityType "Experiment"@en .

askg-data:Entity-f_t_x rdfs:label "F T X"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-hasuo_et_al rdfs:label "Hasuo et al"@en,
        "Hasuo et al."@en ;
    askg-onto:entityType "Author"@en .

askg-data:Entity-kleisli_extension rdfs:label "Kleisli extension"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-kleisli_star rdfs:label "Kleisli star"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-log rdfs:label "Log"@en,
        "Log.*"@en ;
    askg-onto:entityType "Concept"@en,
        "Publication"@en .

askg-data:Entity-m%CE%B3_nx rdfs:label "M!γ (n)(x)"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-machine_learning rdfs:label "Machine Learning"@en ;
    askg-onto:entityType "Concept"@en,
        "Domain"@en,
        "Research Area"@en .

askg-data:Entity-math rdfs:label "Math"@en ;
    askg-onto:entityType "Concept"@en,
        "Domain"@en .

askg-data:Entity-mathematics rdfs:label "Mathematics"@en,
        "mathematics"@en ;
    askg-onto:entityType "Concept"@en,
        "Domain"@en .

askg-data:Entity-monad_t rdfs:label "monad T"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-n__%CF%89 rdfs:label "n < ω"@en ;
    askg-onto:entityType "Concept"@en,
        "Condition"@en .

askg-data:Entity-natural_language_processing rdfs:label "Natural Language Processing"@en ;
    askg-onto:entityType "Concept"@en,
        "Research Area"@en .

askg-data:Entity-research_group rdfs:label "Research Group"@en ;
    askg-onto:entityType "Research Group"@en .

askg-data:Entity-result rdfs:label "Result"@en,
        "result"@en ;
    askg-onto:entityType "Result"@en .

askg-data:Entity-sci rdfs:label "Sci*"@en,
        "Sci."@en ;
    askg-onto:entityType "Concept"@en,
        "Publication"@en .

askg-data:Entity-states rdfs:label "states"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-t_f rdfs:label "T F"@en,
        "T F∗"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-turi rdfs:label "Turi"@en ;
    askg-onto:entityType "Author"@en,
        "Organization"@en,
        "Person"@en .

askg-data:Entity-two_states rdfs:label "two states"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-v rdfs:label "V"@en,
        "v"@en,
        "v↑"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-x__gx rdfs:label "X → GX"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-y rdfs:label "Y"@en,
        "y"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-z rdfs:label "Z"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-%CE%B1n rdfs:label "αn"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-1 rdfs:label "1"@en ;
    askg-onto:entityType "Concept"@en,
        "Score"@en .

askg-data:Entity-bisimilarity rdfs:label "bisimilarity"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-category rdfs:label "category"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-computer_science rdfs:label "Computer Science"@en,
        "computer science"@en ;
    askg-onto:entityType "Domain"@en .

askg-data:Entity-d%CE%B3 rdfs:label "D(γ)"@en,
        "Dγ"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-extension_semantics rdfs:label "extension semantics"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-f%CB%86 rdfs:label "Fˆ"@en,
        "Fˆ∗"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-framework rdfs:label "framework"@en ;
    askg-onto:entityType "Framework"@en .

askg-data:Entity-labelled_transition_systems rdfs:label "Labelled Transition Systems"@en,
        "labelled transition systems"@en ;
    askg-onto:entityType "Concept"@en,
        "System"@en .

askg-data:Entity-language_equivalence rdfs:label "language equivalence"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-lncs rdfs:label "LNCS"@en ;
    askg-onto:entityType "Publication"@en .

askg-data:Entity-my rdfs:label "MY"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-organization rdfs:label "Organization"@en,
        "organization"@en ;
    askg-onto:entityType "Organization"@en .

askg-data:Entity-r rdfs:label "R"@en,
        "R."@en ;
    askg-onto:entityType "Author"@en,
        "Concept"@en,
        "Person"@en .

askg-data:Entity-research rdfs:label "Research"@en,
        "research"@en ;
    askg-onto:entityType "Concept"@en,
        "Research Area"@en .

askg-data:Entity-t_x rdfs:label "T X"@en,
        "{T!_{X}"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-%C2%B5 rdfs:label "µ"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-%CE%B30 rdfs:label "γ0"@en,
        "γ^{(0)}"@en,
        "γ¯0"@en,
        "γ˜0"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-%CE%B3n rdfs:label "γ(n)"@en,
        "γ^{(n)}"@en,
        "γ¯n"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-coalgebra rdfs:label "coalgebra"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-d rdfs:label "D"@en,
        "D."@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-dataset rdfs:label "Dataset"@en,
        "dataset"@en ;
    askg-onto:entityType "Dataset"@en .

askg-data:Entity-device rdfs:label "Device"@en ;
    askg-onto:entityType "Device"@en .

askg-data:Entity-explicit_termination rdfs:label "explicit termination"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-f%CB%86t1 rdfs:label "Fˆ∗!T1"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-g-coalgebra rdfs:label "G-*coalgebra*"@en,
        "G-coalgebra"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-proof rdfs:label "Proof"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-springer rdfs:label "Springer"@en ;
    askg-onto:entityType "Organization"@en .

askg-data:Entity-state rdfs:label "state"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-text rdfs:label "Text"@en,
        "text"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-u rdfs:label "U"@en,
        "u"@en,
        "u→"@en ;
    askg-onto:entityType "Concept"@en,
        "Person"@en .

askg-data:Entity- rdfs:label "*"@en,
        "∅"@en,
        "∗"@en,
        "⊥∗"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-%CE%B1-trace_equivalence rdfs:label "α-trace equivalence"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-%CE%B1-trace_sequences rdfs:label "α*-trace sequences"@en,
        "α-trace sequences"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-%CF%83 rdfs:label "Σ"@en,
        "Σ∗"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-algorithm rdfs:label "Algorithm"@en,
        "algorithm"@en ;
    askg-onto:entityType "Algorithm"@en .

askg-data:Entity-coalgebras rdfs:label "coalgebras"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-functor rdfs:label "Functor"@en,
        "functor"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-monad_m rdfs:label "Monad M"@en,
        "monad M"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-mx rdfs:label "MX"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-set rdfs:label "Set"@en,
        "set"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-technology rdfs:label "Technology"@en ;
    askg-onto:entityType "Concept"@en,
        "Technology"@en .

askg-data:Entity-unknown rdfs:label "unknown"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-%CE%B3n1 rdfs:label "γ^{(n+1)}"@en,
        "γn+1"@en,
        "γ¯n+1"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-c rdfs:label "C"@en,
        "C."@en,
        "c"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-gx rdfs:label "GX"@en,
        "GX′"@en,
        "G∗X"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-j rdfs:label "J."@en ;
    askg-onto:entityType "Author"@en,
        "Person"@en .

askg-data:Entity-language_semantics rdfs:label "language semantics"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-lts rdfs:label "LTS"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-natural_transformation rdfs:label "natural transformation"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-%CE%B1 rdfs:label "α"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-study rdfs:label "Study"@en,
        "study"@en ;
    askg-onto:entityType "Concept"@en,
        "Study"@en .

askg-data:Entity-%CE%B7 rdfs:label "η"@en,
        "η!"@en,
        "η̂"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-a rdfs:label "A"@en,
        "A."@en,
        "a"@en ;
    askg-onto:entityType "Concept"@en,
        "Person"@en .

askg-data:Entity-monad rdfs:label "monad"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-researcher rdfs:label "Researcher"@en,
        "researcher"@en ;
    askg-onto:entityType "Researcher"@en .

askg-data:Entity-research_area rdfs:label "Research Area"@en,
        "research area"@en ;
    askg-onto:entityType "Research Area"@en .

askg-data:Entity-trace_equivalence rdfs:label "trace equivalence"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-traces rdfs:label "traces"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-n rdfs:label "n"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-t rdfs:label "T"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-%CE%B3 rdfs:label "γ"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-trace_semantics rdfs:label "Trace semantics"@en,
        "trace semantics"@en ;
    askg-onto:entityType "Concept"@en,
        "Method"@en .

askg-data:Entity-method rdfs:label "Method"@en,
        "method"@en ;
    askg-onto:entityType "Method"@en .

askg-data:Entity-triple rdfs:label "triple"@en ;
    askg-onto:entityType "Concept"@en,
        "Method"@en,
        "Researcher"@en,
        "Result"@en,
        "Study"@en .

askg-data:Entity-g rdfs:label "G"@en,
        "G."@en,
        "G∗"@en ;
    askg-onto:entityType "Concept"@en,
        "Person"@en .

askg-data:Entity-person rdfs:label "Person"@en ;
    askg-onto:entityType "Concept"@en,
        "Person"@en .

askg-data:Entity-x rdfs:label "X"@en,
        "X′"@en,
        "x"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-publication rdfs:label "Publication"@en ;
    askg-onto:entityType "Concept"@en,
        "Publication"@en .

askg-data:Entity-f rdfs:label "F"@en,
        "F*"@en,
        "F¯"@en,
        "F∗"@en,
        "f"@en,
        "f^{*}"@en,
        "f∗"@en,
        "f♯"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-author rdfs:label "Author"@en ;
    askg-onto:entityType "Author"@en .

askg-data:Entity-m rdfs:label "M"@en,
        "M!"@en,
        "M."@en ;
    askg-onto:entityType "Concept"@en,
        "Person"@en .

askg-data:Entity-concept rdfs:label "Concept"@en,
        "concept"@en ;
    askg-onto:entityType "Concept"@en .

