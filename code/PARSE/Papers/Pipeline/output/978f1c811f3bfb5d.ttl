@prefix askg-data: <https://www.anu.edu.au/data/scholarly/> .
@prefix askg-onto: <https://www.anu.edu.au/onto/scholarly#> .
@prefix dc: <http://purl.org/dc/elements/1.1/> .
@prefix domo: <http://example.org/domo/> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

askg-data:Paper-978f1c811f3bfb5d a askg-onto:Paper ;
    rdfs:label "978f1c811f3bfb5d"@en ;
    dc:title "978f1c811f3bfb5d"^^xsd:string ;
    askg-onto:hasSection askg-data:Paper-978f1c811f3bfb5d-Section-1,
        askg-data:Paper-978f1c811f3bfb5d-Section-2,
        askg-data:Paper-978f1c811f3bfb5d-Section-3,
        askg-data:Paper-978f1c811f3bfb5d-Section-4,
        askg-data:Paper-978f1c811f3bfb5d-Section-5,
        askg-data:Paper-978f1c811f3bfb5d-Section-6,
        askg-data:Paper-978f1c811f3bfb5d-Section-7,
        askg-data:Paper-978f1c811f3bfb5d-Section-8 .

askg-data:Entity-%09au rdfs:label "	au"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-%09au%09ext%CF%95_%09ext rdfs:label "$	au	ext{ϕ}_{	ext{∞}}$"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-%09aua%09heta%0Dightarrow_b%09heta rdfs:label "	au:(A^{	heta}\rightarrow B^{	heta})"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-%09extget%09ext%09ext%CE%BBa%09ext%0Dho%09ext%09ext%CF%86af%09exta%09ext%0Aatural%09ext rdfs:label """	ext{Get}	ext{(}	ext{λ}a	ext{)}\rho	ext{<}	ext{φ}a,f	ext{·}(a	ext{·}
atural)	ext{>"""@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-%09extlambdaalphalangle_balpharangle rdfs:label "(	ext{lambda}\\,\\alpha)\\,\\langle b,\\alpha\\rangle"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-%09extlambdaalphatextletlangle_ialphaprimeranglemalphatextinfialphaprime rdfs:label "(	ext{lambda}\\,\\alpha)\\,\\text{let}\\,\\langle i,\\alpha^{\\prime}\\rangle=m\\alpha\\,\\text{in}\\,f(i,\\alpha^{\\prime})"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-%09extret%09extbf%09ext rdfs:label "	ext{Ret}	ext{<}b,f	ext{>"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-%09extunfold%0Dhoullet%09au rdfs:label "$	ext{unfold}(\rhoullet	au)$"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-%0A%09%09%09%09extget%09ext%CE%BBa rdfs:label """
				ext{Get}(	ext{λ}a)"""@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-%0A%09%09%09%09extout%09imes_p_b_c rdfs:label """
				ext{out}	imes p_{b c}"""@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-%0A%09%09%09%09extt_b_c rdfs:label """
				ext{t}_{b c}"""@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-%0At_bctimes_p_bc rdfs:label """
T_{B}(C\\times P_{B}C)"""@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-%0Dho rdfs:label "\rho"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-%0Dho%09extget rdfs:label "\rho	ext{Get}"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-%0Dho%09extret rdfs:label "\rho	ext{Ret}"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-%C2%B5-calculus rdfs:label "µ-calculus"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-%C2%B5_x_1__a__x rdfs:label "(µ X) 1 + A × X"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-%C2%B5f rdfs:label "µ(F)"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-%CE%B10%0A%CE%B1n rdfs:label """α(0)
#(α′)(n)"""@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-%CE%B10%CE%B11%CE%B12 rdfs:label "(α0,α1,α2,...)"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-%CE%B1_%CE%B2 rdfs:label "α, β"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-%CE%B1__h%CE%B10%CE%B1i rdfs:label "α = hα0,α′i"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-%CE%B1n rdfs:label "αn"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-%CE%B1n1 rdfs:label "αn−1"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-%CE%B1n1i rdfs:label "α**n−1i"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-%CE%B1n__1 rdfs:label "α(n + 1)"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-%CE%B3__f_%CE%B4 rdfs:label "γ · F δ"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-%CE%B4 rdfs:label "δ"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-%CE%B5 rdfs:label "ε"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-%CE%B7 rdfs:label "η"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-%CE%B7b rdfs:label "η(b)"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-%CE%BB_hbpabi_rethchout_pbc_rethbpabiii rdfs:label "(λ hb,pabi) Rethc,hout pbc, Rethb,pabiii"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-%CE%BBa rdfs:label "(λa)"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-%CE%BD_x_tab__x rdfs:label "(ν X) TA(B × X**)"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-%CE%BD_y__tab_y rdfs:label "(ν Y ) TA(B ×Y)"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-%CE%BDta__f rdfs:label "ν(TA · F)"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-%CF%800__assoc__eatoutrep_f%CE%B1 rdfs:label "(π0 · assoc · eat)(out(rep∞ f),α)"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-%CF%800__eat rdfs:label "π0 · eat"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-%CF%800__eatrephd__f%CE%B1 rdfs:label "(π0 · eat)(rep(hd · f),α)"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-%CF%81 rdfs:label "ρ"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-%CF%81__%CF%84 rdfs:label "ρ · τ"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-%CF%86%CE%B1_n rdfs:label "φ(α, n)"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-%CF%86__%CF%88 rdfs:label "φ · ψ"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-%CF%86b rdfs:label "φb"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-%CF%87_at_%CF%86b rdfs:label "χ at φb"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-%CF%87_at_get_%CF%86 rdfs:label "χ at Get φ"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-%CF%88_a rdfs:label "ψ a"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-0 rdfs:label "0**"@en ;
    askg-onto:entityType "Result"@en .

askg-data:Entity-1 rdfs:label "1**"@en ;
    askg-onto:entityType "Result"@en .

askg-data:Entity-1-3 rdfs:label "1-3"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-107751768 rdfs:label "10(7):751–768"@en ;
    askg-onto:entityType "Publication"@en .

askg-data:Entity-10_1978 rdfs:label "10, 1978"@en ;
    askg-onto:entityType "Publication"@en .

askg-data:Entity-11 rdfs:label "1.1"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-12 rdfs:label "1.2"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-1361-27590_2005 rdfs:label "136(1-2):75–90, 2005"@en ;
    askg-onto:entityType "Publication"@en .

askg-data:Entity-158219236 rdfs:label "158:219–236"@en ;
    askg-onto:entityType "Publication"@en .

askg-data:Entity-1594 rdfs:label "1594"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-18 rdfs:label "[18]"@en ;
    askg-onto:entityType "Publication"@en .

askg-data:Entity-1988 rdfs:label "1988"@en ;
    askg-onto:entityType "Publication"@en .

askg-data:Entity-1994 rdfs:label "1994"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-1999 rdfs:label "1999"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-1_image_0png rdfs:label "1_image_0.png"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-2%CF%89 rdfs:label "2ω"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-2000 rdfs:label "2000"@en ;
    askg-onto:entityType "Publication"@en .

askg-data:Entity-2003 rdfs:label "2003"@en ;
    askg-onto:entityType "Publication"@en .

askg-data:Entity-2004 rdfs:label "2004"@en ;
    askg-onto:entityType "Publication"@en .

askg-data:Entity-2007 rdfs:label "2007"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-21 rdfs:label "2.1"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-22 rdfs:label "2.2"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-2536 rdfs:label "25–36"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-2638 rdfs:label "2638"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-2_volumes rdfs:label "2 volumes"@en ;
    askg-onto:entityType "Publication"@en .

askg-data:Entity-2nd_edition rdfs:label "2nd edition"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-313325358_1966 rdfs:label "31(3):325–358, 1966."@en ;
    askg-onto:entityType "Publication"@en .

askg-data:Entity-32 rdfs:label "3.2"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-322162_174_1989 rdfs:label "32(2):162–** 174, 1989"@en ;
    askg-onto:entityType "Publication"@en .

askg-data:Entity-37 rdfs:label "37"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-3as rdfs:label "3As"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-41 rdfs:label "4.1"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-42 rdfs:label "4.2"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-8289101_1965 rdfs:label "8(2):89–101, 1965"@en ;
    askg-onto:entityType "Publication"@en .

askg-data:Entity-_c rdfs:label "⊗ c"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-_c__ rdfs:label "{⊗ c , ⊗′}"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-a%CF%89__a__a%CF%89 rdfs:label "Aω ∼= A × Aω"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-a%CF%89__b%CF%89rep rdfs:label "(Aω ⇒ Bω)rep∞"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-a%CF%89__b__a%CF%89 rdfs:label "Aω → (B × Aω**)"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-a%CF%89__b__tab rdfs:label "(Aω ⇒ B) → TAB"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-a%CF%89__c rdfs:label "Aω ⇒ C"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-a_ rdfs:label "(A →)"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-a__a%CF%89 rdfs:label "A × Aω"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-a_a rdfs:label "A A"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-a_calculus_for_writing_recursive_stream_processing_functions rdfs:label "a calculus for writing (recursive) stream processing functions"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-a_functional_programming_language rdfs:label "a functional programming language"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-a_language_for_asynchronous_stream_processing rdfs:label "a language for asynchronous stream processing"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-a_notable_figure rdfs:label "a notable figure"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-a_notable_figure_in_philosophy rdfs:label "a notable figure in philosophy"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-a_polymorphic_function rdfs:label "a polymorphic function"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-a_single_sorted_signature_of_finite_arity_operators rdfs:label "a single sorted signature of finite arity operators"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-a_stream_of_natural_numbers rdfs:label "a stream of natural numbers"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-a_subsequent_publication rdfs:label "a subsequent publication"@en ;
    askg-onto:entityType "Publication"@en .

askg-data:Entity-a_topology rdfs:label "a topology"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-a_useful_class_of_functors rdfs:label "a useful class of functors"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-acknowledgments rdfs:label "Acknowledgments"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-acknowledgments_section rdfs:label "Acknowledgments Section"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-acm_sigplan_workshop_on_haskell rdfs:label "ACM SIGPLAN Workshop on Haskell"@en ;
    askg-onto:entityType "Organization"@en .

askg-data:Entity-advantages rdfs:label "advantages"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-agda rdfs:label "Agda"@en ;
    askg-onto:entityType "System"@en .

askg-data:Entity-ai rdfs:label "AI"@en ;
    askg-onto:entityType "Research Area"@en .

askg-data:Entity-ai_tools rdfs:label "AI Tools"@en ;
    askg-onto:entityType "Tool"@en .

askg-data:Entity-algebra_c rdfs:label "algebra C"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-algebraic_methodology_and_software_technology rdfs:label "Algebraic Methodology and Software Technology"@en ;
    askg-onto:entityType "Publication"@en .

askg-data:Entity-algebras rdfs:label "algebras"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-algol_60 rdfs:label "algol 60"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-algorithmic_game_theory rdfs:label "algorithmic game theory"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-alpha_0alphaprime rdfs:label "<\\alpha_{0},\\alpha^{\\prime}>"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-alternating_fixpoint_construction rdfs:label "alternating fixpoint construction"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-an_experimental_operating_system_for_a_small_computer rdfs:label "an experimental operating system for a small computer"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-analysis rdfs:label "Analysis"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-ann rdfs:label "Ann"@en ;
    askg-onto:entityType "Person"@en .

askg-data:Entity-appl rdfs:label "Appl."@en ;
    askg-onto:entityType "Publication"@en .

askg-data:Entity-approach rdfs:label "approach"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-approach_to_systems_design rdfs:label "approach to systems design"@en ;
    askg-onto:entityType "Paradigm"@en .

askg-data:Entity-apr rdfs:label "Apr."@en ;
    askg-onto:entityType "Publication"@en .

askg-data:Entity-argument_%CE%B1 rdfs:label "argument α"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-arrival_of_data rdfs:label "arrival of data"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-artificial_intelligence rdfs:label "Artificial Intelligence"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-as rdfs:label "A**'s"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-assoc__app__eat__out__1 rdfs:label "assoc · app · ((eat · out) × 1)"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-associative_function rdfs:label "associative function"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-asynchronous_interfaces rdfs:label "asynchronous interfaces"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-awkward_squad rdfs:label "awkward squad"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-axiom_of_dependent_choices rdfs:label "axiom of dependent choices"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-b%09o_m_ac%09o_m_ac rdfs:label "(B	o M_{A}C)	o M_{A}C"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-b__c_a__c rdfs:label "(B + C A) → C"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-banachs_fixed_point_theorem rdfs:label "Banach's fixed point theorem"@en ;
    askg-onto:entityType "Theory"@en .

askg-data:Entity-bar rdfs:label "bar"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-bar_induction_of_types_zero_and_one rdfs:label "bar induction of types zero and one"@en ;
    askg-onto:entityType "Method"@en .

askg-data:Entity-basic_lemma rdfs:label "basic lemma"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-beauty_in_the_beast rdfs:label "Beauty in the beast"@en ;
    askg-onto:entityType "Article"@en .

askg-data:Entity-bh%CE%B10 rdfs:label "Bhα0"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-bifunctors rdfs:label "bifunctors"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-binary_digits rdfs:label "binary digits"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-bisimulations rdfs:label "bisimulations"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-black_inner_nodes rdfs:label "black inner nodes"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-brotherston rdfs:label "Brotherston"@en ;
    askg-onto:entityType "Person"@en .

askg-data:Entity-brotherston_and_simpson rdfs:label "Brotherston and Simpson"@en ;
    askg-onto:entityType "Author"@en .

askg-data:Entity-brouwers_argument rdfs:label "Brouwer's argument"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-brouwers_argument_for_bar-induction rdfs:label "Brouwer's argument for bar-induction"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-brouwers_bar_theorem rdfs:label "Brouwer's 'Bar Theorem'"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-brouwers_representations rdfs:label "Brouwer's representations"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-c_%CF%89 rdfs:label "C ω"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-c__a rdfs:label "c : A∗"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-c_p rdfs:label "C P"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-c_u_r_r_y rdfs:label "c u r r y"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-calculus rdfs:label "calculus"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-cambridge_university_press rdfs:label "Cambridge University Press"@en ;
    askg-onto:entityType "Organization"@en .

askg-data:Entity-cantor_space rdfs:label "Cantor space"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-carlsson rdfs:label "Carlsson"@en ;
    askg-onto:entityType "Person"@en .

askg-data:Entity-carrier rdfs:label "Carrier"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-case_tab rdfs:label "Case tab"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-categorical_notions rdfs:label "categorical notions"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-category_of_sets rdfs:label "category of sets"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-certain_rank_2_functors rdfs:label "certain rank 2 functors"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-chiprime rdfs:label "\\chi^{\\prime}"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-choice-sequences rdfs:label "choice-sequences"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-churchs_lambda-notation rdfs:label "church's lambda-notation"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-churchs_thesis rdfs:label "Church's thesis"@en ;
    askg-onto:entityType "Theory"@en .

askg-data:Entity-clarendon_press rdfs:label "Clarendon Press"@en ;
    askg-onto:entityType "Organization"@en .

askg-data:Entity-classical_control_theory rdfs:label "classical control theory"@en ;
    askg-onto:entityType "Theory"@en .

askg-data:Entity-co-recursive_definitions rdfs:label "(co-)recursive definitions"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-coalgebra_%CF%87 rdfs:label "coalgebra χ"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-coalgebra_c rdfs:label "coalgebra C"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-coalgebra_for_the_same_functor_with_carrier_a%CF%89__b%CF%89 rdfs:label "coalgebra for the same functor with carrier Aω ⇒ Bω"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-coalgebra_morphism_%CE%B4 rdfs:label "coalgebra morphism δ"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-coalgebra_morphism_from_a_coalgebra_for_the_same_functor_with_carrier_a%CF%89__b%CF%89 rdfs:label "coalgebra morphism from a coalgebra for the same functor with carrier Aω ⇒ Bω"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-code rdfs:label "code"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-code_for_robots rdfs:label "code for robots"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-coding rdfs:label "coding"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-codomain_%CE%BDf rdfs:label "codomain νF"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-coinductive_datatypes rdfs:label "coinductive datatypes"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-coinductive_definitions rdfs:label "coinductive definitions"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-coinductive_fashion rdfs:label "coinductive fashion"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-coinductive_structures rdfs:label "coinductive structures"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-coinductive_trees rdfs:label "coinductive trees"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-coinductive_types rdfs:label "coinductive types"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-coiteration rdfs:label "coiteration"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-combining_data rdfs:label "combining data"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-commun rdfs:label "Commun"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-communication rdfs:label "communication"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-company rdfs:label "Company"@en ;
    askg-onto:entityType "Company"@en .

askg-data:Entity-complete_sequent_calculi rdfs:label "Complete sequent calculi"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-completeness_in_research rdfs:label "Completeness in research"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-completeness_in_the_discrete-valued_case rdfs:label "Completeness in the discrete-valued case"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-components rdfs:label "components"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-composite_eattbc__eatpab rdfs:label "composite eat∞(tbc) · eat∞(pab)"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-composition_of_stream_processing_functions rdfs:label "composition of stream processing functions"@en ;
    askg-onto:entityType "Method"@en .

askg-data:Entity-composition_of_those_functions rdfs:label "composition of those functions"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-composition_operators rdfs:label "composition operators"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-compositional_infrastructure rdfs:label "compositional infrastructure"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-compositions rdfs:label "compositions"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-computation rdfs:label "computation"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-computationally_different_behaviour rdfs:label "computationally different behaviour"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-computer_and_information_sciences_university_of_strathclyde rdfs:label "Computer and Information Sciences, University of Strathclyde"@en ;
    askg-onto:entityType "University"@en .

askg-data:Entity-computer_vision rdfs:label "Computer Vision"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-conclusion rdfs:label "Conclusion"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-constant rdfs:label "constant"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-constructive rdfs:label "constructive"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-constructively_illicit_forms_of_contraposition rdfs:label "constructively illicit forms of contraposition"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-constructivism rdfs:label "Constructivism"@en ;
    askg-onto:entityType "Paradigm"@en .

askg-data:Entity-constructor_form rdfs:label "constructor form"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-constructors rdfs:label "constructors"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-continuous_function_in_a%CF%89__b%CF%89 rdfs:label "continuous function in Aω ⇒ Bω"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-continuous_functions_from_a%CF%89_to_x rdfs:label "continuous functions from Aω to X"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-continuous_in_the_strong_inductive_sense rdfs:label "continuous in the strong inductive sense"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-continuous_in_the_weak_%C7%AB%CE%B4_sense rdfs:label "continuous in the weak ǫ−δ sense"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-contractors rdfs:label "contractors"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-conversations rdfs:label "conversations"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-convolutional_neural_networks rdfs:label "Convolutional Neural Networks"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-coordination_99 rdfs:label "Coordination '99"@en ;
    askg-onto:entityType "Publication"@en .

askg-data:Entity-coproduct rdfs:label "coproduct"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-coroutines rdfs:label "coroutines"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-corpus rdfs:label "Corpus"@en ;
    askg-onto:entityType "Corpus"@en .

askg-data:Entity-correctness rdfs:label "Correctness"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-countably_infinite_streams_%CF%89sequences rdfs:label "countably infinite streams (ωsequences)"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-courtney_h rdfs:label "Courtney, H."@en ;
    askg-onto:entityType "Person"@en .

askg-data:Entity-cp_bct_abp_abt_acs rdfs:label "(C×P_{B}C)→T_{A}(B×P_{A}B)→T_{A}(C×S)"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-current_systems rdfs:label "current systems"@en ;
    askg-onto:entityType "System"@en .

askg-data:Entity-data_driven rdfs:label "data driven"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-data_integration rdfs:label "data integration"@en ;
    askg-onto:entityType "Method"@en .

askg-data:Entity-data_items rdfs:label "data items"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-data_processing rdfs:label "Data Processing"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-data_structure rdfs:label "data structure"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-data_type rdfs:label "data type"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-datatype rdfs:label "datatype"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-datatype_pab rdfs:label "datatype PAB"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-datatype_tab rdfs:label "datatype TAB"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-datatypes rdfs:label "datatypes"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-define rdfs:label "define"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-definition_of_the_function_eat rdfs:label "definition of the function eat"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-demand_driven rdfs:label "demand driven"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-department_of_computing_imperial_college_london rdfs:label "Department of Computing, Imperial College London"@en ;
    askg-onto:entityType "University"@en .

askg-data:Entity-dependently_typed_programming rdfs:label "dependently typed programming"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-destructor_of_streams rdfs:label "destructor of streams"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-destructors rdfs:label "destructors"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-developing_dependently_typed_programs rdfs:label "developing dependently typed programs"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-different_representations rdfs:label "different representations"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-difficult_to_depict rdfs:label "difficult to depict"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-dirk_pattinson rdfs:label "DIRK PATTINSON"@en ;
    askg-onto:entityType "Person"@en .

askg-data:Entity-discrete rdfs:label "discrete"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-discrete-valued_case rdfs:label "discrete-valued case"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-discrete_space rdfs:label "discrete space"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-discrete_space_b rdfs:label "discrete space B"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-discrete_space_d rdfs:label "discrete space D"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-discrete_valued_continuous_functions rdfs:label "discrete valued continuous functions"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-discrete_values rdfs:label "discrete values"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-discussion_of_bar_induction rdfs:label "discussion of bar induction"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-distance_between_streams rdfs:label "distance between streams"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-domain rdfs:label "domain"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-downward rdfs:label "downward"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-e_a_t rdfs:label "e a t"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-e_a_t_%0Ainfty rdfs:label """e a t_{
\\infty}"""@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-e_a_tmathbfgetphi rdfs:label "e a t(\\mathbf{Get}\\,\\phi)"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-e_a_tmathbfretb rdfs:label "e a t(\\mathbf{Ret}\\,b)"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-e_a_tt_ab rdfs:label "e a t:T_{A}B"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-each_such_continuous_function rdfs:label "each such continuous function"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-eat__%CF%801__assoc__eatta__brep__%CF%81%CF%86%CE%B10f_%CE%B10_%CE%B1 rdfs:label "(eat∞ · π1 · assoc · eat)((TA · (B×))rep∞ · ρ)(φ(α0),f′· (α0 #),α′)"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-eat__%CF%801__assoc__eatta__brep__%CF%81rephd__ftl__f%CE%B1 rdfs:label "(eat∞ · π1 · assoc · eat)((TA · (B×))rep∞ · ρ)(rep(hd · f),tl · f),α)"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-eatp__eatq rdfs:label "eat∞p · eat∞q"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-eatp__q rdfs:label "eat∞(p ⊗ q)"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-eatpbcc_tab rdfs:label "eat∞(pbcc tab)"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-eatpbcc_tab%CE%B1 rdfs:label "eat∞(pbcc tab,α)"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-eatr rdfs:label "eat(r)"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-eatrep_f%CE%B1 rdfs:label "eat∞(rep∞ f,α)"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-eatrepf_%CE%B1 rdfs:label "eat∞(rep∞(f ′),α)"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-eattab%CE%B1 rdfs:label "eat∞(tab,α)"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-eattbc__eatpab rdfs:label "eat∞tbc · eat∞pab"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-electronic_notes_in_theoretical_computer_science rdfs:label "Electronic Notes in Theoretical Computer Science"@en ;
    askg-onto:entityType "Publication"@en .

askg-data:Entity-element rdfs:label "element"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-element_of rdfs:label "element of"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-elements_of_intuitionism rdfs:label "Elements of intuitionism"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-elimination_of_choice_sequences rdfs:label "elimination of choice sequences"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-embedded_coordination_language rdfs:label "embedded coordination language"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-endofunctor_f rdfs:label "endofunctor F"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-ensuring rdfs:label "Ensuring"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-ensuring_liveness rdfs:label "ensuring liveness"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-ensuring_streams_flow rdfs:label "Ensuring streams flow"@en ;
    askg-onto:entityType "Publication"@en .

askg-data:Entity-entirely_constructive rdfs:label "entirely constructive"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-ep_ab%09imes_a%0Dightarrow%09o_b%0Dightarrow rdfs:label "e:P_{A}B	imes A^{\rightarrow}	o B^{\rightarrow}"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-epigram rdfs:label "Epigram"@en ;
    askg-onto:entityType "System"@en .

askg-data:Entity-epsilon-delta_definition rdfs:label "epsilon-delta definition"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-equality_relation rdfs:label "equality relation"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-erratic_fudgets rdfs:label "Erratic Fudgets"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-error rdfs:label "error"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-etab rdfs:label "\\eta\\,b"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-executable_program rdfs:label "executable program"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-exponential rdfs:label "exponential"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-extensional_equality rdfs:label "(extensional) equality"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-extensionally_the_same_function rdfs:label "extensionally the same function"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-f%C2%B5_f rdfs:label "F(µ F)"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-f%CE%BDf rdfs:label "F(νF)"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-f0 rdfs:label "f(0,...**)"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-f110%09ext rdfs:label "$f(1,1,0,	ext{...})$"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-f1_0 rdfs:label "f(1, 0,...**)"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-f__%CE%B10_ rdfs:label "(f ′· (α0 #))"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-f__%CF%89_%CF%89__b rdfs:label "f : ω ω → B"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-f__a%CF%89__b rdfs:label "f : Aω → B"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-f__a_%CF%89__x rdfs:label "f : A ω ⇒ X"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-f_is_not_continuous rdfs:label "f is not continuous"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-f_x__y__fx__y rdfs:label "F X × Y → F(X × Y)"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-facilities_for_coinductive_definition_and_reasoning rdfs:label "facilities for coinductive definition and reasoning"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-facilities_for_inductive-recursive_definition rdfs:label "facilities for inductive-recursive definition"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-fair_merging rdfs:label "fair merging"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-fairness rdfs:label "fairness"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-fast-forward_operation rdfs:label "fast-forward operation"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-feedback rdfs:label "feedback"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-fin rdfs:label "Fin"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-final rdfs:label "final"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-final_coalgebra_for_the_functor_tab_ rdfs:label "final coalgebra for the functor TA(B× )"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-finding rdfs:label "Finding"@en ;
    askg-onto:entityType "Finding"@en .

askg-data:Entity-findings_on_data_privacy rdfs:label "Findings on Data Privacy"@en ;
    askg-onto:entityType "Finding"@en .

askg-data:Entity-finitary_indexed_containers rdfs:label "finitary indexed containers"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-finite_amount_of_information rdfs:label "finite amount of information"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-finite_information rdfs:label "finite information"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-finite_information_concerning_its_input rdfs:label "finite information concerning its input"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-finite_investigations rdfs:label "Finite investigations"@en ;
    askg-onto:entityType "Study"@en .

askg-data:Entity-finite_lists rdfs:label "finite lists"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-finite_sequences_lists_of_elements_of_a rdfs:label "finite sequences (lists) of elements of A"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-finitepath_trees rdfs:label "finitepath trees"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-fixed_points rdfs:label "fixed points"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-fixpoints rdfs:label "fixpoints"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-fn__%CE%B1 rdfs:label "f(n # α)"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-fold%CE%BBbp_abf_b_out_p_ab rdfs:label "fold((λ⟨b,p_ab⟩)f b (out p_ab))"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-form rdfs:label "form"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-forms_of_composition rdfs:label "forms of composition"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-fout rdfs:label "Fout"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-freeness rdfs:label "freeness"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-function_e rdfs:label "function e"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-function_eat rdfs:label "function eat"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-function_f_a_ rdfs:label "function f ·(a #**)"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-function_of_type_a%CF%89__b rdfs:label "function of type Aω → B"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-function_rep rdfs:label "function rep∞"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-functional_operating_systems rdfs:label "functional operating systems"@en ;
    askg-onto:entityType "System"@en .

askg-data:Entity-functional_program rdfs:label "functional program"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-functional_programming_style rdfs:label "functional programming style"@en ;
    askg-onto:entityType "Paradigm"@en .

askg-data:Entity-functional_reactive_programming rdfs:label "functional reactive programming"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-functional_semantics rdfs:label "functional semantics"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-functions_are_contractive_where_required rdfs:label "functions are contractive where required"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-functions_f0__ff1__f0__%CE%B10_f2__f1__%CE%B11___f__%CE%B10___%CE%B11_ rdfs:label "functions f0 = f,f1 = f0 · (α0 #),f2 = f1 · (α1 #) = f · (α0 #) · (α1 #)..."@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-functions_on_coinductive_types rdfs:label "functions on coinductive types"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-functions_on_finitary_inductive_types rdfs:label "functions on finitary inductive types"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-functions_on_inductive_types rdfs:label "functions on inductive types"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-functor_1 rdfs:label "functor (+1)"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-functor_a rdfs:label "functor (×A)"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-functor_f rdfs:label "functor F"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-functor_ta_c rdfs:label "functor TA ·(C×**)"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-functors_ta rdfs:label "functors TA"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-functors_tb rdfs:label "functors TB"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-g_e_t rdfs:label "G e t"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-g_e_te_a_tcdotphi rdfs:label "g e t>=(e a t\\cdot\\phi)"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-games rdfs:label "Games"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-general_principles rdfs:label "general principles"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-general_representation rdfs:label "general representation"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-generalisation rdfs:label "generalisation"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-get_%CE%BBa rdfs:label "Get (λa)"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-get_%CF%86_in_case_c__ rdfs:label "Get φ in case c = ⊗"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-getphi rdfs:label "Get\\phi"@en ;
    askg-onto:entityType "Method"@en .

askg-data:Entity-getpsi rdfs:label "Get\\psi"@en ;
    askg-onto:entityType "Method"@en .

askg-data:Entity-gordon rdfs:label "Gordon"@en ;
    askg-onto:entityType "Person"@en .

askg-data:Entity-greedier_form rdfs:label "greedier form"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-greedy_desire_to_read_input rdfs:label "'greedy' desire to read input"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-greedy_form_of_composition rdfs:label "greedy form of composition"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-greedy_forms_of_composition rdfs:label "greedy forms of composition"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-greek_letters rdfs:label "Greek letters"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-hancock rdfs:label "Hancock"@en ;
    askg-onto:entityType "Person"@en .

askg-data:Entity-haskell_07 rdfs:label "Haskell '07"@en ;
    askg-onto:entityType "Publication"@en .

askg-data:Entity-haskell_encoding rdfs:label "Haskell encoding"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-hd_%CE%B1tl_%CE%B1 rdfs:label "(hd α)#(tl α)"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-hdeatpbc_eattab%CE%B1 rdfs:label "hd(eat∞(pbc, eat∞(tab,α)))"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-hdf%CE%B1 rdfs:label "hd(fα)"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-hdf_%CE%B1 rdfs:label "hd(f α)"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-heunen rdfs:label "Heunen"@en ;
    askg-onto:entityType "Author"@en .

askg-data:Entity-hhdtli rdfs:label "hhd,tli"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-hout rdfs:label "hout"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-howard rdfs:label "Howard"@en ;
    askg-onto:entityType "Person"@en .

askg-data:Entity-howard_and_kreisel rdfs:label "Howard and Kreisel"@en ;
    askg-onto:entityType "Person"@en .

askg-data:Entity-httppersonalcisstrathacukngeatinghs rdfs:label "http://personal.cis.strath.ac.uk/∼ng/eating.hs"@en ;
    askg-onto:entityType "Platform"@en .

askg-data:Entity-hudak_a rdfs:label "Hudak, A."@en ;
    askg-onto:entityType "Person"@en .

askg-data:Entity-hyperarithmetic rdfs:label "hyperarithmetic"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-i rdfs:label "I"@en ;
    askg-onto:entityType "Person"@en .

askg-data:Entity-idea rdfs:label "idea"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-identities rdfs:label "identities"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-ieee_computer_society rdfs:label "IEEE Computer Society"@en ;
    askg-onto:entityType "Organization"@en .

askg-data:Entity-image rdfs:label "Image"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-image_f_%CE%B1_n rdfs:label "image f (α n)"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-in1 rdfs:label "in−1"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-indexed_families_of_sets rdfs:label "indexed families of sets"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-induction_and_coinduction rdfs:label "induction and coinduction"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-induction_hypothesis rdfs:label "induction hypothesis"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-inductive-recursive_construction rdfs:label "inductive-recursive construction"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-inductive_content rdfs:label "inductive content"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-inductive_definition rdfs:label "inductive definition"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-inductive_definitions rdfs:label "inductive definitions"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-infinitary_proof_trees rdfs:label "infinitary proof trees"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-infinite_descent rdfs:label "infinite descent"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-infinite_non-wellfounded_trees rdfs:label "infinite, non-wellfounded trees"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-infinite_sequences rdfs:label "infinite sequences"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-infinite_streams_of_discrete_values rdfs:label "infinite streams of discrete values"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-infinitely_many rdfs:label "infinitely many"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-infinitely_many_nodes rdfs:label "infinitely many nodes"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-infix_notation rdfs:label "infix notation"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-infix_operator_ rdfs:label "infix operator (#)"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-information rdfs:label "information"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-initial rdfs:label "initial"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-initial_algebra_construction rdfs:label "initial algebra construction"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-initial_and_final_coalgebras rdfs:label "initial and final coalgebras"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-initiality rdfs:label "initiality"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-inner_induction rdfs:label "inner induction"@en ;
    askg-onto:entityType "Method"@en .

askg-data:Entity-input rdfs:label "input"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-inputoutput rdfs:label "input/output"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-institution rdfs:label "Institution"@en ;
    askg-onto:entityType "Institution"@en .

askg-data:Entity-internal_actions rdfs:label "internal actions"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-intuitionistic_analysis rdfs:label "intuitionistic analysis"@en ;
    askg-onto:entityType "Domain"@en .

askg-data:Entity-inverse_of_structure_map rdfs:label "Inverse of Structure Map"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-inverse_of_the_structure_map rdfs:label "inverse of the structure map"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-io rdfs:label "IO"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-io_interfaces rdfs:label "IO interfaces"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-it rdfs:label "it"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-its_output rdfs:label "its output"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-j_152117124_1972 rdfs:label "J.**, 15(2):117–124, 1972."@en ;
    askg-onto:entityType "Publication"@en .

askg-data:Entity-jacobs rdfs:label "Jacobs"@en ;
    askg-onto:entityType "Person"@en .

askg-data:Entity-jeuring rdfs:label "Jeuring"@en ;
    askg-onto:entityType "Person"@en .

askg-data:Entity-jones rdfs:label "Jones"@en ;
    askg-onto:entityType "Person"@en .

askg-data:Entity-journal_of_universal_computer_science rdfs:label "Journal of Universal Computer Science"@en ;
    askg-onto:entityType "Publication"@en .

askg-data:Entity-july_2007 rdfs:label "July 2007"@en ;
    askg-onto:entityType "Publication"@en .

askg-data:Entity-kf rdfs:label "kf"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-kleisli_morphisms rdfs:label "Kleisli morphisms"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-knowledge_graph rdfs:label "knowledge graph"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-kreisel_and_troelstra rdfs:label "Kreisel and Troelstra"@en ;
    askg-onto:entityType "Author"@en .

askg-data:Entity-laborious rdfs:label "laborious"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-lambda rdfs:label "lambda"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-landin rdfs:label "Landin"@en ;
    askg-onto:entityType "Person"@en .

askg-data:Entity-laws rdfs:label "laws"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-lazy_composition rdfs:label "lazy composition"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-lazy_forms_of_composition rdfs:label "lazy forms of composition"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-lemma_42 rdfs:label "Lemma 4.2"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-lics-22 rdfs:label "LICS-22"@en ;
    askg-onto:entityType "Publication"@en .

askg-data:Entity-lists rdfs:label "lists"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-literature rdfs:label "literature"@en ;
    askg-onto:entityType "Corpus"@en .

askg-data:Entity-liveness rdfs:label "liveness"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-log rdfs:label "Log."@en ;
    askg-onto:entityType "Publication"@en .

askg-data:Entity-logic rdfs:label "Logic"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-logic_methodology_and_philosophy_of_science_iii rdfs:label "Logic, Methodology and Philosophy of Science III"@en ;
    askg-onto:entityType "Publication"@en .

askg-data:Entity-looping rdfs:label "looping"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-ma rdfs:label "MA"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-maa rdfs:label "MAA"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-mab rdfs:label "MAB"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-math rdfs:label "Math.**"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-mathematical_machinery rdfs:label "mathematical machinery"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-mathematical_stream rdfs:label "mathematical stream"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-mathematical_structure rdfs:label "mathematical structure"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-mathematical_techniques rdfs:label "mathematical techniques"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-mathfrakh rdfs:label "${\\mathfrak{H}}$"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-may_2000 rdfs:label "May 2000"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-mcilroy rdfs:label "McIlroy"@en ;
    askg-onto:entityType "Person"@en .

askg-data:Entity-memo_functions rdfs:label "Memo functions"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-mggf rdfs:label "(m\\gg=f)"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-mints rdfs:label "Mints"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-mints_continuous_cut-elimination rdfs:label "Mints' continuous cut-elimination"@en ;
    askg-onto:entityType "Method"@en .

askg-data:Entity-mixed_inductive-coinductive_types rdfs:label "mixed inductive-coinductive types"@en ;
    askg-onto:entityType "Method"@en .

askg-data:Entity-model rdfs:label "model"@en ;
    askg-onto:entityType "Model"@en .

askg-data:Entity-model_non-wellfounded_proofs rdfs:label "model non-wellfounded proofs"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-model_of_teletype_io rdfs:label "model of teletype IO"@en ;
    askg-onto:entityType "Model"@en .

askg-data:Entity-modelling_impure_phenomena rdfs:label "modelling impure phenomena"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-monoid rdfs:label "monoid"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-monoids rdfs:label "monoids"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-monotone_bar-induction rdfs:label "monotone bar-induction"@en ;
    askg-onto:entityType "Method"@en .

askg-data:Entity-monotone_subset_of_a rdfs:label "monotone subset of A∗**"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-moran_d rdfs:label "Moran, D."@en ;
    askg-onto:entityType "Person"@en .

askg-data:Entity-multithreading rdfs:label "multithreading"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-mutable_heap_variables rdfs:label "mutable heap variables"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-n rdfs:label "n"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-n-1 rdfs:label "n-1"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-n_c__a%CF%89 rdfs:label "N c ⊆ Aω**"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-natural_language_processing rdfs:label "Natural Language Processing"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-natural_transformation_strength rdfs:label "natural transformation strength"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-nature rdfs:label "nature"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-needed_again rdfs:label "needed again"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-neighbourhood_%CE%B1_n rdfs:label "neighbourhood α n"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-neighbourhood_functions rdfs:label "neighbourhood functions"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-neighbourhood_of_%CE%B1 rdfs:label "neighbourhood of α"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-neighbourhoods_in_coinductive_types rdfs:label "neighbourhoods in coinductive types"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-neil_ghani rdfs:label "NEIL GHANI"@en ;
    askg-onto:entityType "Person"@en .

askg-data:Entity-nested_fixed_point rdfs:label "nested fixed point"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-nested_recursion rdfs:label "nested recursion"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-nested_recursions rdfs:label "nested recursions"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-nested_structural_recursion rdfs:label "nested structural recursion"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-nesting rdfs:label "nesting"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-nilsson rdfs:label "Nilsson"@en ;
    askg-onto:entityType "Author"@en .

askg-data:Entity-no_originality rdfs:label "no originality"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-node rdfs:label "node"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-nodes rdfs:label "nodes"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-non-wellfounded_proof_systems rdfs:label "non-wellfounded proof systems"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-non-wellfounded_trees rdfs:label "non-wellfounded trees"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-not_completely_straightforward rdfs:label "not completely straightforward"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-not_decidable rdfs:label "not decidable"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-notion_of_continuity rdfs:label "notion of continuity"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-once rdfs:label "once"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-one_step rdfs:label "one step"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-operating_systems rdfs:label "operating systems"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-operation_ rdfs:label "operation ('⊗')"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-operations rdfs:label "operations"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-operators rdfs:label "operators"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-os6 rdfs:label "Os6"@en ;
    askg-onto:entityType "System"@en .

askg-data:Entity-os6_operating_system rdfs:label "OS6 operating system"@en ;
    askg-onto:entityType "System"@en .

askg-data:Entity-other_multi-input_combinators rdfs:label "other multi-input combinators"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-our_work rdfs:label "our work"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-out rdfs:label "out"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-outer_induction rdfs:label "outer induction"@en ;
    askg-onto:entityType "Method"@en .

askg-data:Entity-output rdfs:label "output"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-output_of_the_function rdfs:label "output of the function"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-oxford rdfs:label "Oxford"@en ;
    askg-onto:entityType "Organization"@en .

askg-data:Entity-oxford_university rdfs:label "Oxford University"@en ;
    askg-onto:entityType "University"@en .

askg-data:Entity-p__c__pbc__tab__pab__tac__s rdfs:label "p : (C × PBC) → TA(B × PAB) → TA(C × S)"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-p_ab%09o_aomega%0Arightarrow_bomega rdfs:label """P_{A}B	o A^{\\omega}
\\Rightarrow B^{\\omega}"""@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-p_ac rdfs:label "P_{A}C"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-p_bc rdfs:label "P_{B}C"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-pab__tab__pab rdfs:label "PAB ∼= TA(B × PAB**)"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-paba%CF%89 rdfs:label "PAB×Aω"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-paba%CF%89__b%CF%89 rdfs:label "(PAB)×Aω → Bω"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-pabi rdfs:label "pabi"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-pages_159187 rdfs:label "pages 159–187"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-pages_1732 rdfs:label "pages 17–32"@en ;
    askg-onto:entityType "Index"@en .

askg-data:Entity-parameter rdfs:label "Parameter"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-pattern-matching_definitions rdfs:label "pattern-matching definitions"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-pattern-matching_format rdfs:label "pattern-matching format"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-pbc__pab rdfs:label "PBC × PAB"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-pbcitab rdfs:label "pbcitab"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-perspective rdfs:label "perspective"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-peter_hancock rdfs:label "PETER HANCOCK"@en ;
    askg-onto:entityType "Person"@en .

askg-data:Entity-peterson rdfs:label "Peterson"@en ;
    askg-onto:entityType "Person"@en .

askg-data:Entity-pg rdfs:label "p/g"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-phenomenon rdfs:label "phenomenon"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-phi rdfs:label "phi"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-pipeline rdfs:label "pipeline"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-pipes rdfs:label "pipes"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-polytypically rdfs:label "polytypically"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-preliminary_investigations rdfs:label "preliminary investigations"@en ;
    askg-onto:entityType "Study"@en .

askg-data:Entity-proceedings rdfs:label "Proceedings"@en ;
    askg-onto:entityType "Corpus"@en .

askg-data:Entity-proceedings_of_the_2nd_workshop_on_generic_programming rdfs:label "Proceedings of the 2nd Workshop on Generic Programming"@en ;
    askg-onto:entityType "Publication"@en .

askg-data:Entity-product rdfs:label "product"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-product_topology rdfs:label "product topology"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-productivity rdfs:label "Productivity"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-productivity_requirement rdfs:label "productivity requirement"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-program_or_machine rdfs:label "program or machine"@en ;
    askg-onto:entityType "Device"@en .

askg-data:Entity-programming_paradigm rdfs:label "programming paradigm"@en ;
    askg-onto:entityType "Paradigm"@en .

askg-data:Entity-programs rdfs:label "programs"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-proof_of_a_%CF%8011_statement rdfs:label "proof of a Π11 statement"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-proof_of_completeness rdfs:label "proof of completeness"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-proof_structure rdfs:label "proof structure"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-proof_system rdfs:label "proof system"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-proof_theory rdfs:label "proof theory"@en ;
    askg-onto:entityType "Theory"@en .

askg-data:Entity-properties rdfs:label "properties"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-pure rdfs:label "Pure"@en ;
    askg-onto:entityType "Publication"@en .

askg-data:Entity-python rdfs:label "Python"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-qbc rdfs:label "qbc"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-qbcc_tab rdfs:label "qbcc tab"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-quantification rdfs:label "quantification"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-question rdfs:label "question"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-r_e_t rdfs:label "R e t"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-range rdfs:label "range"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-reader rdfs:label "reader"@en ;
    askg-onto:entityType "Person"@en .

askg-data:Entity-reading_one_input rdfs:label "reading one input"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-reasonable_laws rdfs:label "reasonable laws"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-reasoning rdfs:label "Reasoning"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-recurrent_neural_networks rdfs:label "Recurrent Neural Networks"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-recursion rdfs:label "recursion"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-recursion_on_list_c rdfs:label "recursion on list c"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-recursive_definitions rdfs:label "recursive definitions"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-referees rdfs:label "referees"@en ;
    askg-onto:entityType "Person"@en .

askg-data:Entity-reference_6 rdfs:label "reference [6]"@en ;
    askg-onto:entityType "Publication"@en .

askg-data:Entity-relation rdfs:label "relation"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-relation_%CE%B1 rdfs:label "relation α"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-relation_r rdfs:label "relation R"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-rep_%0Ainfty rdfs:label """$rep_{
\\infty}$"""@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-repf_%CE%B1 rdfs:label "(rep∞(f ′),α**)"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-representation_of_continuous_functions_by_well-founded_trees rdfs:label "representation of continuous functions by well-founded trees"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-representation_of_continuous_functions_with_discrete_codomain rdfs:label "representation of continuous functions with discrete codomain"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-representation_of_stream_processors rdfs:label "representation of stream processors"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-representations_of_continuous_functions rdfs:label "representations of continuous functions"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-representations_of_first_order_function_types rdfs:label "Representations of first order function types"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-representations_of_uniformly_continuous_functions rdfs:label "representations of uniformly continuous functions"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-representative rdfs:label "representative"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-representatives rdfs:label "representatives"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-request_streams rdfs:label "request streams"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-research_concept rdfs:label "Research Concept"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-research_papers rdfs:label "research papers"@en ;
    askg-onto:entityType "Corpus"@en .

askg-data:Entity-response_streams rdfs:label "response streams"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-results rdfs:label "results"@en ;
    askg-onto:entityType "Result"@en .

askg-data:Entity-results_later rdfs:label "results later"@en ;
    askg-onto:entityType "Result"@en .

askg-data:Entity-ret_b rdfs:label "Ret b**"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-retbtab rdfs:label "Ret(b,tab)"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-retcqbc rdfs:label "Ret(c,qbc)"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-retget rdfs:label "[Ret|Get]"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-rethc rdfs:label "Rethc"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-right-inverse_rep rdfs:label "right-inverse rep∞"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-robots rdfs:label "robots"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-root rdfs:label "root"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-rootselaar rdfs:label "Rootselaar"@en ;
    askg-onto:entityType "Author"@en .

askg-data:Entity-rot rdfs:label "Rot"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-sands rdfs:label "Sands"@en ;
    askg-onto:entityType "Person"@en .

askg-data:Entity-school_of_computer_science_university_of_nottingham rdfs:label "School of Computer Science, University of Nottingham"@en ;
    askg-onto:entityType "University"@en .

askg-data:Entity-sci_1631-299116_1996 rdfs:label "Sci.**, 163(1-2):99–116, 1996."@en ;
    askg-onto:entityType "Publication"@en .

askg-data:Entity-science rdfs:label "science"@en ;
    askg-onto:entityType "Domain"@en .

askg-data:Entity-science_of_computer_programming rdfs:label "Science of Computer Programming"@en ;
    askg-onto:entityType "Publication"@en .

askg-data:Entity-scientist rdfs:label "Scientist"@en ;
    askg-onto:entityType "Scientist"@en .

askg-data:Entity-section rdfs:label "Section"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-section_3 rdfs:label "section 3"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-section_4 rdfs:label "section 4"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-set_a%CF%89 rdfs:label "set Aω"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-set_of_finite_lists rdfs:label "set of finite lists"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-set_of_natural_numbers rdfs:label "set of natural numbers"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-sets_of_infinite_values rdfs:label "sets of 'infinite' values"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-shape_or_first_coordinate_of_data rdfs:label "shape, or first coordinate of data"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-signal_processors rdfs:label "signal processors"@en ;
    askg-onto:entityType "Device"@en .

askg-data:Entity-simpson rdfs:label "Simpson"@en ;
    askg-onto:entityType "Person"@en .

askg-data:Entity-sinclair rdfs:label "Sinclair"@en ;
    askg-onto:entityType "Person"@en .

askg-data:Entity-slice_categories rdfs:label "slice categories"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-soe rdfs:label "Soe"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-software rdfs:label "software"@en ;
    askg-onto:entityType "Software"@en .

askg-data:Entity-some_path rdfs:label "some path"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-some_ubiquity rdfs:label "some ubiquity"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-something_extrinsic rdfs:label "something extrinsic"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-sov rdfs:label "Sov"@en ;
    askg-onto:entityType "Organization"@en .

askg-data:Entity-space_d%CF%89 rdfs:label "space Dω"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-space_of_streams_b%CF%89 rdfs:label "space of streams Bω"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-spaces_of_infinite_sequences_or_streams rdfs:label "spaces of infinite sequences or streams"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-springer-verlag rdfs:label "Springer-Verlag"@en ;
    askg-onto:entityType "Organization"@en .

askg-data:Entity-springer-verlag_2003 rdfs:label "Springer-Verlag, 2003"@en ;
    askg-onto:entityType "Publication"@en .

askg-data:Entity-springer-verlags rdfs:label "Springer-Verlags"@en ;
    askg-onto:entityType "Organization"@en .

askg-data:Entity-staal rdfs:label "Staal"@en ;
    askg-onto:entityType "Person"@en .

askg-data:Entity-standard_notations rdfs:label "standard notations"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-statistical_analysis rdfs:label "Statistical Analysis"@en ;
    askg-onto:entityType "Method"@en .

askg-data:Entity-storage_communication_and_other_evolving_devices rdfs:label "storage, communication and other evolving devices"@en ;
    askg-onto:entityType "Device"@en .

askg-data:Entity-stoy rdfs:label "Stoy"@en ;
    askg-onto:entityType "Author"@en .

askg-data:Entity-stoy_and_strachey rdfs:label "Stoy and Strachey"@en ;
    askg-onto:entityType "Person"@en .

askg-data:Entity-strachey rdfs:label "Strachey"@en ;
    askg-onto:entityType "Person"@en .

askg-data:Entity-stream rdfs:label "stream"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-stream-valued_continuous_functions rdfs:label "stream-valued continuous functions"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-stream-valued_function rdfs:label "stream-valued function"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-stream_based rdfs:label "stream based"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-stream_case rdfs:label "stream case"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-stream_facility rdfs:label "stream facility"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-stream_functions rdfs:label "stream functions"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-stream_input-output rdfs:label "stream input-output"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-stream_io rdfs:label "stream IO"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-stream_of_finite_prefixes rdfs:label "stream of finite prefixes"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-stream_processor rdfs:label "stream processor"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-stream_types rdfs:label "stream types"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-streamlike_data_structures rdfs:label "streamlike data structures"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-streams_a%CF%89 rdfs:label "streams Aω"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-streams_and_nonempty_lists rdfs:label "streams and nonempty lists"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-streams_of_elements_of_a rdfs:label "streams of elements of A"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-streams_of_representations_of_a%CF%89__b rdfs:label "streams of representations of Aω ⇒ B"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-strong rdfs:label "strong"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-strong_functor rdfs:label "strong functor"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-structural_order rdfs:label "structural order"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-structure rdfs:label "structure"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-structure_of_the_preponent rdfs:label "structure of the preponent"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-structure_t rdfs:label "structure t"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-structures_of_other_coinductive_types rdfs:label "structures of other coinductive types"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-studies_in_logic_and_the_foundations_of_mathematics rdfs:label "Studies in Logic and the Foundations of Mathematics"@en ;
    askg-onto:entityType "Publication"@en .

askg-data:Entity-study rdfs:label "Study"@en ;
    askg-onto:entityType "Study"@en .

askg-data:Entity-study_on_neural_networks rdfs:label "Study on Neural Networks"@en ;
    askg-onto:entityType "Study"@en .

askg-data:Entity-subordinate_recursions rdfs:label "subordinate recursions"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-surjective rdfs:label "surjective"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-symb rdfs:label "Symb."@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-symbol_ rdfs:label "symbol ⇒"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-synchronous_dataflow_metaphor rdfs:label "synchronous dataflow metaphor"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-synchronous_processing rdfs:label "synchronous processing"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-system_processes rdfs:label "system processes"@en ;
    askg-onto:entityType "System"@en .

askg-data:Entity-systems rdfs:label "systems"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-t_a%09imesb%09imes rdfs:label "T_{A}	imes(B	imes)"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-t_a1%09imes_rep_%09ext rdfs:label "$T_{A}(1	imes rep_{	ext{∞}})$"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-t_ab%09imes_p_ab rdfs:label "$T_{A}(B	imes P_{A}B)$"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-t_ab%09imesa%09ext%CF%89%0Dightarrow_b%09ext%CF%89 rdfs:label "$T_{A}(B	imes(A^{	ext{ω}}\rightarrow B^{	ext{ω}}))$"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-t_ab%09imesaeta%09o_c rdfs:label "T_{A}(B	imes(A^{eta}	o C))"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-t_actimes_s rdfs:label "T_{A}(C\\times S)"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-tab__a%CF%89__b__a%CF%89 rdfs:label "TAB → Aω → B × Aω"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-tab__pab__tac__s rdfs:label "TA(B × PAB) → TA(C × S**)"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-tabii rdfs:label "tabii"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-tac__s rdfs:label "TA(C × S)"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-taits_paper rdfs:label "Tait's paper"@en ;
    askg-onto:entityType "Publication"@en .

askg-data:Entity-tbc rdfs:label "tbc"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-tbc__pab rdfs:label "tbc ⊗ pab"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-tbc__pbc rdfs:label "TB(C × PBC**)"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-tbc__pbc__tab__pab rdfs:label "TB(C × PBC) × TA(B × PAB)"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-teletype_io rdfs:label "teletype IO"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-tensor_combinator rdfs:label "tensor combinator"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-tensorflow rdfs:label "TensorFlow"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-terminal_coalgebras rdfs:label "terminal coalgebras"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-text_analysis rdfs:label "text analysis"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-text_to_analyze rdfs:label "Text to analyze"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-tf rdfs:label "t,f'"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-that_expounded_in_this_paper rdfs:label "that expounded in this paper"@en ;
    askg-onto:entityType "Article"@en .

askg-data:Entity-the_algebra_of_the_outer_recursion rdfs:label "the algebra of the outer recursion"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-the_argument_for_completeness rdfs:label "the argument for completeness"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-the_curried_form_of_a_function_e_of_type_paba%CF%89__b%CF%89 rdfs:label "the curried form of a function e of type (PAB)×Aω → Bω"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-the_design_of_formalisms rdfs:label "the design of formalisms"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-the_diagonal rdfs:label "the diagonal"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-the_free_monad rdfs:label "the free monad"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-the_functions_%CE%B10__ rdfs:label "the functions (α0 # **)"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-the_functor_a rdfs:label "the functor A"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-the_inner_recursion rdfs:label "the inner recursion"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-the_most_straightforward rdfs:label "The most straightforward"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-the_neighbourhoods rdfs:label "the neighbourhoods"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-the_paper rdfs:label "the paper"@en ;
    askg-onto:entityType "Publication"@en .

askg-data:Entity-the_reader_monad rdfs:label "the reader monad"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-the_same rdfs:label "the same"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-the_same_function_as_the_one_above rdfs:label "the same function as the one above"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-the_structure_map rdfs:label "the structure map"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-the_structure_of_the_postponent rdfs:label "the structure of the postponent"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-the_structure_of_the_preponent rdfs:label "the structure of the preponent"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-the_tree rdfs:label "the tree"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-the_tree_monad rdfs:label "the tree monad"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-their_values rdfs:label "their values"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-then rdfs:label "Then"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-theor rdfs:label "Theor"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-theorem_21 rdfs:label "Theorem 2.1"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-theorem_31 rdfs:label "Theorem 3.1"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-theory_of_partial_functions rdfs:label "theory of partial functions"@en ;
    askg-onto:entityType "Theory"@en .

askg-data:Entity-this_case rdfs:label "this case"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-this_code rdfs:label "this code"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-this_part_of_the_paper rdfs:label "This part of the paper"@en ;
    askg-onto:entityType "Article"@en .

askg-data:Entity-this_remark rdfs:label "this remark"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-this_unfold rdfs:label "this unfold"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-this_way rdfs:label "this way"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-three_articles rdfs:label "three articles"@en ;
    askg-onto:entityType "Article"@en .

askg-data:Entity-thus rdfs:label "Thus"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-tlca_2001 rdfs:label "TLCA 2001"@en ;
    askg-onto:entityType "Publication"@en .

askg-data:Entity-tleatpbcc_tab%CE%B1 rdfs:label "tl(eat∞(pbcc tab,α))"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-tlf_%CE%B1 rdfs:label "tl(f α)"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-tool rdfs:label "tool"@en ;
    askg-onto:entityType "Tool"@en .

askg-data:Entity-total_functional_programming rdfs:label "Total functional programming"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-totality rdfs:label "Totality"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-transfinite_derivations rdfs:label "transfinite derivations"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-transfinite_induction rdfs:label "Transfinite induction"@en ;
    askg-onto:entityType "Method"@en .

askg-data:Entity-triple_a rdfs:label "triple A"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-triple_b rdfs:label "triple B"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-troelstra_and_van_dalen rdfs:label "Troelstra and van Dalen"@en ;
    askg-onto:entityType "Author"@en .

askg-data:Entity-two_functions rdfs:label "two functions"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-two_notions_of_barred-ness rdfs:label "two notions of barred-ness"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-type rdfs:label "Type"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-typed_lambda_calculi rdfs:label "Typed Lambda Calculi"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-u_e_d_c_a_s_e rdfs:label "u e d c a s e"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-u_n_f_o_l_d__chilangle_o_u_t__po_u_t__qrangle rdfs:label "(u n f o l d \\, \\chi)\\langle o u t \\, p,o u t \\, q\\rangle"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-uncountably_many_representatives rdfs:label "uncountably many representatives"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-unfold_%CE%B3 rdfs:label "unfold γ"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-unfold_%CF%87 rdfs:label "unfold χ"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-unfoldc_%CE%B3 rdfs:label "unfold(C; γ)"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-uniformly_continuous_functions rdfs:label "uniformly continuous functions"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-unique_fixed_points rdfs:label "unique fixed points"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-unique_morphism_%CE%B4 rdfs:label "unique morphism δ"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-unique_solutions_of_recursion_equations rdfs:label "unique solutions of recursion equations"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-uniqueness_property rdfs:label "uniqueness property"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-unit_and_bind_operators rdfs:label "unit and bind operators"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-universal_maps rdfs:label "universal maps"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-universal_properties_of_the_functors_tb_and_ta rdfs:label "universal properties of the functors TB and TA"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-universiteit_utrecht rdfs:label "Universiteit Utrecht"@en ;
    askg-onto:entityType "University"@en .

askg-data:Entity-university rdfs:label "University"@en ;
    askg-onto:entityType "University"@en .

askg-data:Entity-unix_piping_system rdfs:label "Unix piping system"@en ;
    askg-onto:entityType "System"@en .

askg-data:Entity-unknown_entity rdfs:label "unknown entity"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-unpublished_work rdfs:label "unpublished work"@en ;
    askg-onto:entityType "Publication"@en .

askg-data:Entity-user_interaction_interfaces rdfs:label "user interaction interfaces"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-uu-cs-2000-19 rdfs:label "UU-CS-2000-19"@en ;
    askg-onto:entityType "Publication"@en .

askg-data:Entity-v rdfs:label "V"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-value_of_a_function rdfs:label "value of a function"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-values rdfs:label "values"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-van_dalen rdfs:label "van Dalen"@en ;
    askg-onto:entityType "Person"@en .

askg-data:Entity-variable rdfs:label "Variable"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-variables rdfs:label "variables"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-weak rdfs:label "weak"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-well-founded_tree rdfs:label "well-founded tree"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-well_known_result rdfs:label "well known result"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-wellfounded_derivation_trees rdfs:label "wellfounded derivation trees"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-wellfounded_structure rdfs:label "wellfounded structure"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-work rdfs:label "work"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-worthwhile rdfs:label "worthwhile"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-yampa rdfs:label "Yampa"@en ;
    askg-onto:entityType "System"@en .

askg-data:Entity-year rdfs:label "Year"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-yes rdfs:label "Yes"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Paper-978f1c811f3bfb5d-Section-1 a askg-onto:Section ;
    rdfs:label "Section 1"@en ;
    domo:Text "Representations Of Stream Processors Using Nested Fixed Points"@en ;
    askg-onto:hasParagraph askg-data:Paper-978f1c811f3bfb5d-Section-1-Paragraph-11,
        askg-data:Paper-978f1c811f3bfb5d-Section-1-Paragraph-12 ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:level "1"^^xsd:int .

askg-data:Paper-978f1c811f3bfb5d-Section-1-Paragraph-11 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 1"@en ;
    domo:Text "PETER HANCOCK a, DIRK PATTINSON b**, AND NEIL GHANI** c a **School of Computer Science, University of Nottingham, Jubilee Campus, Nottingham, NG8 1BB** e-mail address**: hancock@spamcop.net** b **Department of Computing, Imperial College London, 180 Queen's Gate, London SW7 2AZ** e-mail address**: dirk@doc.ic.ac.uk** c **Computer and Information Sciences, University of Strathclyde, Livingstone Tower, 26 Richmond** St, Glasgow G1 1XH e-mail address**: neil.ghani@cis.strath.ac.uk** Abstract. We define representations of continuous functions on infinite streams of discrete values, both in the case of discrete-valued functions, and in the case of stream-valued functions. We define also an operation on the representations of two continuous functions between streams that yields a representation of their composite."@en ;
    askg-onto:hasSentence askg-data:Paper-978f1c811f3bfb5d-Section-1-Paragraph-11-Sentence-111,
        askg-data:Paper-978f1c811f3bfb5d-Section-1-Paragraph-11-Sentence-112,
        askg-data:Paper-978f1c811f3bfb5d-Section-1-Paragraph-11-Sentence-113 ;
    askg-onto:index "1"^^xsd:int .

askg-data:Paper-978f1c811f3bfb5d-Section-1-Paragraph-11-Sentence-111 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "PETER HANCOCK a, DIRK PATTINSON b**, AND NEIL GHANI** c a **School of Computer Science, University of Nottingham, Jubilee Campus, Nottingham, NG8 1BB** e-mail address**: hancock@spamcop.net** b **Department of Computing, Imperial College London, 180 Queen's Gate, London SW7 2AZ** e-mail address**: dirk@doc.ic.ac.uk** c **Computer and Information Sciences, University of Strathclyde, Livingstone Tower, 26 Richmond** St, Glasgow G1 1XH e-mail address**: neil.ghani@cis.strath.ac.uk** Abstract."@en ;
    askg-onto:inSentence "PETER HANCOCK a, DIRK PATTINSON b**, AND NEIL GHANI** c a **School of Computer Science, University of Nottingham, Jubilee Campus, Nottingham, NG8 1BB** e-mail address**: hancock@spamcop.net** b **Department of Computing, Imperial College London, 180 Queen's Gate, London SW7 2AZ** e-mail address**: dirk@doc.ic.ac.uk** c **Computer and Information Sciences, University of Strathclyde, Livingstone Tower, 26 Richmond** St, Glasgow G1 1XH e-mail address**: neil.ghani@cis.strath.ac.uk** Abstract."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-author,
        askg-data:Entity-computer_and_information_sciences_university_of_strathclyde,
        askg-data:Entity-department_of_computing_imperial_college_london,
        askg-data:Entity-dirk_pattinson,
        askg-data:Entity-neil_ghani,
        askg-data:Entity-organization,
        askg-data:Entity-peter_hancock,
        askg-data:Entity-school_of_computer_science_university_of_nottingham .

askg-data:Paper-978f1c811f3bfb5d-Section-1-Paragraph-11-Sentence-112 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "We define representations of continuous functions on infinite streams of discrete values, both in the case of discrete-valued functions, and in the case of stream-valued functions."@en ;
    askg-onto:inSentence "We define representations of continuous functions on infinite streams of discrete values, both in the case of discrete-valued functions, and in the case of stream-valued functions."^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-discrete-valued_functions,
        askg-data:Entity-infinite_streams_of_discrete_values,
        askg-data:Entity-representations_of_continuous_functions,
        askg-data:Entity-stream-valued_functions .

askg-data:Paper-978f1c811f3bfb5d-Section-1-Paragraph-11-Sentence-113 a askg-onto:Sentence ;
    rdfs:label "Sentence 3"@en ;
    domo:Text "We define also an operation on the representations of two continuous functions between streams that yields a representation of their composite."@en ;
    askg-onto:inSentence "We define also an operation on the representations of two continuous functions between streams that yields a representation of their composite."^^xsd:string ;
    askg-onto:index "3"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-composite,
        askg-data:Entity-continuous_functions,
        askg-data:Entity-operation,
        askg-data:Entity-representations,
        askg-data:Entity-streams .

askg-data:Paper-978f1c811f3bfb5d-Section-1-Paragraph-12 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 2"@en ;
    domo:Text "In the case of discrete-valued functions, the representatives are well-founded (finitepath) trees of a certain kind. The underlying idea can be traced back to Brouwer's justification of bar-induction, or to Kreisel and Troelstra's elimination of choice-sequences. In the case of stream-valued functions, the representatives are non-wellfounded trees pieced together in a coinductive fashion from well-founded trees. The definition requires an alternating fixpoint construction of some ubiquity."@en ;
    askg-onto:hasSentence askg-data:Paper-978f1c811f3bfb5d-Section-1-Paragraph-12-Sentence-121,
        askg-data:Paper-978f1c811f3bfb5d-Section-1-Paragraph-12-Sentence-122,
        askg-data:Paper-978f1c811f3bfb5d-Section-1-Paragraph-12-Sentence-123,
        askg-data:Paper-978f1c811f3bfb5d-Section-1-Paragraph-12-Sentence-124 ;
    askg-onto:index "2"^^xsd:int .

askg-data:Paper-978f1c811f3bfb5d-Section-1-Paragraph-12-Sentence-121 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "In the case of discrete-valued functions, the representatives are well-founded (finitepath) trees of a certain kind."@en ;
    askg-onto:inSentence "In the case of discrete-valued functions, the representatives are well-founded (finitepath) trees of a certain kind."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-discrete-valued_functions,
        askg-data:Entity-finitepath_trees,
        askg-data:Entity-well-founded_trees .

askg-data:Paper-978f1c811f3bfb5d-Section-1-Paragraph-12-Sentence-122 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "The underlying idea can be traced back to Brouwer's justification of bar-induction, or to Kreisel and Troelstra's elimination of choice-sequences."@en ;
    askg-onto:inSentence "The underlying idea can be traced back to Brouwer's justification of bar-induction, or to Kreisel and Troelstra's elimination of choice-sequences."^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-bar-induction,
        askg-data:Entity-brouwer,
        askg-data:Entity-choice-sequences,
        askg-data:Entity-kreisel_and_troelstra .

askg-data:Paper-978f1c811f3bfb5d-Section-1-Paragraph-12-Sentence-123 a askg-onto:Sentence ;
    rdfs:label "Sentence 3"@en ;
    domo:Text "In the case of stream-valued functions, the representatives are non-wellfounded trees pieced together in a coinductive fashion from well-founded trees."@en ;
    askg-onto:inSentence "In the case of stream-valued functions, the representatives are non-wellfounded trees pieced together in a coinductive fashion from well-founded trees."^^xsd:string ;
    askg-onto:index "3"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-coinductive_fashion,
        askg-data:Entity-non-wellfounded_trees,
        askg-data:Entity-stream-valued_functions,
        askg-data:Entity-well-founded_trees .

askg-data:Paper-978f1c811f3bfb5d-Section-1-Paragraph-12-Sentence-124 a askg-onto:Sentence ;
    rdfs:label "Sentence 4"@en ;
    domo:Text "The definition requires an alternating fixpoint construction of some ubiquity."@en ;
    askg-onto:inSentence "The definition requires an alternating fixpoint construction of some ubiquity."^^xsd:string ;
    askg-onto:index "4"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-alternating_fixpoint_construction,
        askg-data:Entity-some_ubiquity .

askg-data:Paper-978f1c811f3bfb5d-Section-2 a askg-onto:Section ;
    rdfs:label "Section 2"@en ;
    domo:Text "Introduction"@en ;
    askg-onto:hasParagraph askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-21,
        askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-210,
        askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-211,
        askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-212,
        askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-213,
        askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-214,
        askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-215,
        askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-216,
        askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-217,
        askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-218,
        askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-219,
        askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-22,
        askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-220,
        askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-221,
        askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-222,
        askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-223,
        askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-224,
        askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-225,
        askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-23,
        askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-24,
        askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-25,
        askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-26,
        askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-27,
        askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-28,
        askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-29 ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:level "2"^^xsd:int .

askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-21 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 1"@en ;
    domo:Text "This paper is concerned with the representation and implementation of continuous functions on spaces of infinite sequences or streams **of discrete values, such as binary digits** (Cantor space), or natural numbers (Baire space). That is to **say, we will look at functions** of type f : A ω ⇒ X where A is a discrete space, Aωis the space of streams of elements of A **with the product** topology, and X is either a discrete space B, or itself a space of streams Bω**. We use the** symbol ⇒ **for the continuous function space. Functions of this kind and closely related** kinds arise in many contexts in mathematics and are pervasive in programming, as with pipes, stream input-output and coroutines."@en ;
    askg-onto:hasSentence askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-21-Sentence-211,
        askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-21-Sentence-212,
        askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-21-Sentence-213,
        askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-21-Sentence-214 ;
    askg-onto:index "1"^^xsd:int .

askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-21-Sentence-211 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "This paper is concerned with the representation and implementation of continuous functions on spaces of infinite sequences or streams **of discrete values, such as binary digits** (Cantor space), or natural numbers (Baire space)."@en ;
    askg-onto:inSentence "This paper is concerned with the representation and implementation of continuous functions on spaces of infinite sequences or streams **of discrete values, such as binary digits** (Cantor space), or natural numbers (Baire space)."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-baire_space,
        askg-data:Entity-binary_digits,
        askg-data:Entity-cantor_space,
        askg-data:Entity-continuous_functions,
        askg-data:Entity-natural_numbers,
        askg-data:Entity-spaces_of_infinite_sequences_or_streams .

askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-21-Sentence-212 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "That is to **say, we will look at functions** of type f : A ω ⇒ X where A is a discrete space, Aωis the space of streams of elements of A **with the product** topology, and X is either a discrete space B, or itself a space of streams Bω**."@en ;
    askg-onto:inSentence "That is to **say, we will look at functions** of type f : A ω ⇒ X where A is a discrete space, Aωis the space of streams of elements of A **with the product** topology, and X is either a discrete space B, or itself a space of streams Bω**."^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-a,
        askg-data:Entity-a%CF%89,
        askg-data:Entity-discrete_space,
        askg-data:Entity-discrete_space_b,
        askg-data:Entity-f__a_%CF%89__x,
        askg-data:Entity-functions,
        askg-data:Entity-product_topology,
        askg-data:Entity-space_of_streams_b%CF%89,
        askg-data:Entity-streams_of_elements_of_a,
        askg-data:Entity-x .

askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-21-Sentence-213 a askg-onto:Sentence ;
    rdfs:label "Sentence 3"@en ;
    domo:Text "We use the** symbol ⇒ **for the continuous function space."@en ;
    askg-onto:inSentence "We use the** symbol ⇒ **for the continuous function space."^^xsd:string ;
    askg-onto:index "3"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-continuous_function_space,
        askg-data:Entity-symbol_ .

askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-21-Sentence-214 a askg-onto:Sentence ;
    rdfs:label "Sentence 4"@en ;
    domo:Text "Functions of this kind and closely related** kinds arise in many contexts in mathematics and are pervasive in programming, as with pipes, stream input-output and coroutines."@en ;
    askg-onto:inSentence "Functions of this kind and closely related** kinds arise in many contexts in mathematics and are pervasive in programming, as with pipes, stream input-output and coroutines."^^xsd:string ;
    askg-onto:index "4"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-coroutines,
        askg-data:Entity-functions,
        askg-data:Entity-mathematics,
        askg-data:Entity-pipes,
        askg-data:Entity-programming,
        askg-data:Entity-stream_input-output .

askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-210 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 10"@en ;
    domo:Text "![1_image_1.png](1_image_1.png)"@en ;
    askg-onto:hasSentence askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-210-Sentence-2101 ;
    askg-onto:index "10"^^xsd:int .

askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-210-Sentence-2101 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "![1_image_1.png](1_image_1.png)"@en ;
    askg-onto:inSentence "![1_image_1.png](1_image_1.png)"^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-ai,
        askg-data:Entity-concept,
        askg-data:Entity-dataset,
        askg-data:Entity-deep_learning,
        askg-data:Entity-machine_learning,
        askg-data:Entity-method,
        askg-data:Entity-neural_networks,
        askg-data:Entity-person,
        askg-data:Entity-python,
        askg-data:Entity-research,
        askg-data:Entity-researcher,
        askg-data:Entity-software,
        askg-data:Entity-technology,
        askg-data:Entity-tensorflow,
        askg-data:Entity-tool .

askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-211 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 11"@en ;
    domo:Text "It is perhaps a little less obvious that the representation sketched above is complete: any continuous function f : Aω ⇒ B is representable in this way. The most straightforward"@en ;
    askg-onto:hasSentence askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-211-Sentence-2111,
        askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-211-Sentence-2112 ;
    askg-onto:index "11"^^xsd:int .

askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-211-Sentence-2111 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "It is perhaps a little less obvious that the representation sketched above is complete: any continuous function f : Aω ⇒ B is representable in this way."@en ;
    askg-onto:inSentence "It is perhaps a little less obvious that the representation sketched above is complete: any continuous function f : Aω ⇒ B is representable in this way."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-a%CF%89,
        askg-data:Entity-b,
        askg-data:Entity-function_f,
        askg-data:Entity-this_way .

askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-211-Sentence-2112 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "The most straightforward"@en ;
    askg-onto:inSentence "The most straightforward"^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-concept,
        askg-data:Entity-the_most_straightforward .

askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-212 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 12"@en ;
    domo:Text "argument is irredeemably classical: suppose the function has no representation, and derive from this supposition a stream at which it is not continuous. **However the completeness** of the representation can be established constructively, given only the validity of a certain principle of called 'bar induction', asserting the equivalence of two notions of barred-ness, or covering in Baire space. Here a 'bar' is a monotone subset of A∗**, the set of finite lists** of A**'s. One notion of barred-ness is weak, having the form of a quantification over infinite** sequences (∀α : A ω)(∃n : ω) Bhα0**,... ,α**n−1i ."@en ;
    askg-onto:hasSentence askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-212-Sentence-2121,
        askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-212-Sentence-2122,
        askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-212-Sentence-2123,
        askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-212-Sentence-2124,
        askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-212-Sentence-2125 ;
    askg-onto:index "12"^^xsd:int .

askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-212-Sentence-2121 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "argument is irredeemably classical: suppose the function has no representation, and derive from this supposition a stream at which it is not continuous."@en ;
    askg-onto:inSentence "argument is irredeemably classical: suppose the function has no representation, and derive from this supposition a stream at which it is not continuous."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-function,
        askg-data:Entity-none,
        askg-data:Entity-stream .

askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-212-Sentence-2122 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "**However the completeness** of the representation can be established constructively, given only the validity of a certain principle of called 'bar induction', asserting the equivalence of two notions of barred-ness, or covering in Baire space."@en ;
    askg-onto:inSentence "**However the completeness** of the representation can be established constructively, given only the validity of a certain principle of called 'bar induction', asserting the equivalence of two notions of barred-ness, or covering in Baire space."^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-baire_space,
        askg-data:Entity-bar_induction,
        askg-data:Entity-two_notions_of_barred-ness .

askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-212-Sentence-2123 a askg-onto:Sentence ;
    rdfs:label "Sentence 3"@en ;
    domo:Text "Here a 'bar' is a monotone subset of A∗**, the set of finite lists** of A**'s."@en ;
    askg-onto:inSentence "Here a 'bar' is a monotone subset of A∗**, the set of finite lists** of A**'s."^^xsd:string ;
    askg-onto:index "3"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-a,
        askg-data:Entity-as,
        askg-data:Entity-bar,
        askg-data:Entity-finite_lists,
        askg-data:Entity-monotone_subset_of_a,
        askg-data:Entity-set,
        askg-data:Entity-set_of_finite_lists .

askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-212-Sentence-2124 a askg-onto:Sentence ;
    rdfs:label "Sentence 4"@en ;
    domo:Text "One notion of barred-ness is weak, having the form of a quantification over infinite** sequences (∀α : A ω)(∃n : ω) Bhα0**,..."@en ;
    askg-onto:inSentence "One notion of barred-ness is weak, having the form of a quantification over infinite** sequences (∀α : A ω)(∃n : ω) Bhα0**,..."^^xsd:string ;
    askg-onto:index "4"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-barred-ness,
        askg-data:Entity-bh%CE%B10,
        askg-data:Entity-infinite_sequences,
        askg-data:Entity-n,
        askg-data:Entity-quantification,
        askg-data:Entity-weak .

askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-212-Sentence-2125 a askg-onto:Sentence ;
    rdfs:label "Sentence 5"@en ;
    domo:Text ",α**n−1i ."@en ;
    askg-onto:inSentence ",α**n−1i ."^^xsd:string ;
    askg-onto:index "5"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-%CE%B1n1i,
        askg-data:Entity-n-1 .

askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-213 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 13"@en ;
    domo:Text "The other notion of barred-ness is strong, being inductively defined, and so having essentially the form of a quantification over subsets of A∗ (∀U ⊆ A ∗)B ∪ { c : A ∗|(∀a : A)U(c ⌢ a) } ⊆ U → Uhi where hi denotes the empty list, and c ⌢ a the list c with a further entry a **at the end.** Using a variant of this principle, one can show that the two notions of continuity on Baire space (one the usual epsilon-delta definition, the other defined inductively) coincide. This principle is closely related to Brouwer's 'Bar Theorem', for which he presented a fascinating but fallacious1**argument in three articles. There is an extensive discussion of Brouwer's** argument by Dummett in [4, pp 68–75], and a more formal analysis of bar induction by Howard and Kreisel in [8]. A very penetrating discussion of bar induction that is closely related to our representation of continuous functions by well-founded trees is given by Tait in [18]."@en ;
    askg-onto:hasSentence askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-213-Sentence-2131,
        askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-213-Sentence-2132,
        askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-213-Sentence-2133,
        askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-213-Sentence-2134 ;
    askg-onto:index "13"^^xsd:int .

askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-213-Sentence-2131 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "The other notion of barred-ness is strong, being inductively defined, and so having essentially the form of a quantification over subsets of A∗ (∀U ⊆ A ∗)B ∪ { c : A ∗|(∀a : A)U(c ⌢ a) } ⊆ U → Uhi where hi denotes the empty list, and c ⌢ a the list c with a further entry a **at the end.** Using a variant of this principle, one can show that the two notions of continuity on Baire space (one the usual epsilon-delta definition, the other defined inductively) coincide."@en ;
    askg-onto:inSentence "The other notion of barred-ness is strong, being inductively defined, and so having essentially the form of a quantification over subsets of A∗ (∀U ⊆ A ∗)B ∪ { c : A ∗|(∀a : A)U(c ⌢ a) } ⊆ U → Uhi where hi denotes the empty list, and c ⌢ a the list c with a further entry a **at the end.** Using a variant of this principle, one can show that the two notions of continuity on Baire space (one the usual epsilon-delta definition, the other defined inductively) coincide."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-baire_space,
        askg-data:Entity-barred-ness,
        askg-data:Entity-continuity,
        askg-data:Entity-epsilon-delta_definition,
        askg-data:Entity-inductive_definition,
        askg-data:Entity-principle,
        askg-data:Entity-strong .

askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-213-Sentence-2132 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "This principle is closely related to Brouwer's 'Bar Theorem', for which he presented a fascinating but fallacious1**argument in three articles."@en ;
    askg-onto:inSentence "This principle is closely related to Brouwer's 'Bar Theorem', for which he presented a fascinating but fallacious1**argument in three articles."^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-brouwer,
        askg-data:Entity-brouwers_bar_theorem,
        askg-data:Entity-principle,
        askg-data:Entity-three_articles .

askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-213-Sentence-2133 a askg-onto:Sentence ;
    rdfs:label "Sentence 3"@en ;
    domo:Text "There is an extensive discussion of Brouwer's** argument by Dummett in [4, pp 68–75], and a more formal analysis of bar induction by Howard and Kreisel in [8]."@en ;
    askg-onto:inSentence "There is an extensive discussion of Brouwer's** argument by Dummett in [4, pp 68–75], and a more formal analysis of bar induction by Howard and Kreisel in [8]."^^xsd:string ;
    askg-onto:index "3"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-bar_induction,
        askg-data:Entity-brouwers_argument,
        askg-data:Entity-dummett,
        askg-data:Entity-howard_and_kreisel .

askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-213-Sentence-2134 a askg-onto:Sentence ;
    rdfs:label "Sentence 4"@en ;
    domo:Text "A very penetrating discussion of bar induction that is closely related to our representation of continuous functions by well-founded trees is given by Tait in [18]."@en ;
    askg-onto:inSentence "A very penetrating discussion of bar induction that is closely related to our representation of continuous functions by well-founded trees is given by Tait in [18]."^^xsd:string ;
    askg-onto:index "4"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-18,
        askg-data:Entity-discussion_of_bar_induction,
        askg-data:Entity-representation_of_continuous_functions_by_well-founded_trees,
        askg-data:Entity-tait .

askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-214 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 14"@en ;
    domo:Text "The inspiration for our representation of continuous functions with discrete codomain was in fact Brouwer's argument for bar-induction, that conjures an inductive structure from a proof of a Π11statement ∀α ∃n ...**. This inductive content was made explicit by Kreisel** and Troelstra [20, 8.4, p225] in the form of the class 'K' of neighbourhood functions central to their so-called elimination of choice sequences, discussed in [4, pp 75–81] and [18]. In this paper, we put this inductive structure into a datatype. **In fact the paper of Tait's just** cited contains (at the bottom of p.195) a definition of what amounts to the function eat in section 2.1 below, differing only in notation. We claim no originality for this insight."@en ;
    askg-onto:hasSentence askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-214-Sentence-2141,
        askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-214-Sentence-2142,
        askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-214-Sentence-2143,
        askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-214-Sentence-2144,
        askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-214-Sentence-2145 ;
    askg-onto:index "14"^^xsd:int .

askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-214-Sentence-2141 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "The inspiration for our representation of continuous functions with discrete codomain was in fact Brouwer's argument for bar-induction, that conjures an inductive structure from a proof of a Π11statement ∀α ∃n ...**."@en ;
    askg-onto:inSentence "The inspiration for our representation of continuous functions with discrete codomain was in fact Brouwer's argument for bar-induction, that conjures an inductive structure from a proof of a Π11statement ∀α ∃n ...**."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-bar-induction,
        askg-data:Entity-brouwers_argument_for_bar-induction,
        askg-data:Entity-inductive_structure,
        askg-data:Entity-proof_of_a_%CF%8011_statement,
        askg-data:Entity-representation_of_continuous_functions_with_discrete_codomain .

askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-214-Sentence-2142 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "This inductive content was made explicit by Kreisel** and Troelstra [20, 8.4, p225] in the form of the class 'K' of neighbourhood functions central to their so-called elimination of choice sequences, discussed in [4, pp 75–81] and [18]."@en ;
    askg-onto:inSentence "This inductive content was made explicit by Kreisel** and Troelstra [20, 8.4, p225] in the form of the class 'K' of neighbourhood functions central to their so-called elimination of choice sequences, discussed in [4, pp 75–81] and [18]."^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-elimination_of_choice_sequences,
        askg-data:Entity-inductive_content,
        askg-data:Entity-k,
        askg-data:Entity-kreisel,
        askg-data:Entity-neighbourhood_functions,
        askg-data:Entity-troelstra .

askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-214-Sentence-2143 a askg-onto:Sentence ;
    rdfs:label "Sentence 3"@en ;
    domo:Text "In this paper, we put this inductive structure into a datatype."@en ;
    askg-onto:inSentence "In this paper, we put this inductive structure into a datatype."^^xsd:string ;
    askg-onto:index "3"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-datatype,
        askg-data:Entity-inductive_structure .

askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-214-Sentence-2144 a askg-onto:Sentence ;
    rdfs:label "Sentence 4"@en ;
    domo:Text "**In fact the paper of Tait's just** cited contains (at the bottom of p.195) a definition of what amounts to the function eat in section 2.1 below, differing only in notation."@en ;
    askg-onto:inSentence "**In fact the paper of Tait's just** cited contains (at the bottom of p.195) a definition of what amounts to the function eat in section 2.1 below, differing only in notation."^^xsd:string ;
    askg-onto:index "4"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-definition_of_the_function_eat,
        askg-data:Entity-taits_paper .

askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-214-Sentence-2145 a askg-onto:Sentence ;
    rdfs:label "Sentence 5"@en ;
    domo:Text "We claim no originality for this insight."@en ;
    askg-onto:inSentence "We claim no originality for this insight."^^xsd:string ;
    askg-onto:index "5"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-no_originality,
        askg-data:Entity-we .

askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-215 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 15"@en ;
    domo:Text "Now what about stream-valued continuous functions on Aω with values in Bω**? The** idea is again quite simple, though as far as we know, new. It is **also difficult to depict. What** we want is a non-wellfounded tree, branching over A**, along every path of which there are** infinitely many nodes labelled with an element of B**. Start at the root, then use successive** entries in the argument stream to steer your way along some path. Whenever you arrive at a node labelled with an element of B**, as you will inevitably do infinitely often, emit** that element as the next entry in the output stream. It turns out to be straightforward to express the type of trees we need as a nested fixed point, in which one forms the final coalgebra of a functor that is defined using an initial algebra construction."@en ;
    askg-onto:hasSentence askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-215-Sentence-2151,
        askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-215-Sentence-2152,
        askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-215-Sentence-2153,
        askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-215-Sentence-2154,
        askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-215-Sentence-2155,
        askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-215-Sentence-2156,
        askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-215-Sentence-2157 ;
    askg-onto:index "15"^^xsd:int .

askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-215-Sentence-2151 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "Now what about stream-valued continuous functions on Aω with values in Bω**?"@en ;
    askg-onto:inSentence "Now what about stream-valued continuous functions on Aω with values in Bω**?"^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-a%CF%89,
        askg-data:Entity-b%CF%89,
        askg-data:Entity-stream-valued_continuous_functions .

askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-215-Sentence-2152 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "The** idea is again quite simple, though as far as we know, new."@en ;
    askg-onto:inSentence "The** idea is again quite simple, though as far as we know, new."^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-idea,
        askg-data:Entity-new .

askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-215-Sentence-2153 a askg-onto:Sentence ;
    rdfs:label "Sentence 3"@en ;
    domo:Text "It is **also difficult to depict."@en ;
    askg-onto:inSentence "It is **also difficult to depict."^^xsd:string ;
    askg-onto:index "3"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-,
        askg-data:Entity-difficult_to_depict .

askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-215-Sentence-2154 a askg-onto:Sentence ;
    rdfs:label "Sentence 4"@en ;
    domo:Text "What** we want is a non-wellfounded tree, branching over A**, along every path of which there are** infinitely many nodes labelled with an element of B**."@en ;
    askg-onto:inSentence "What** we want is a non-wellfounded tree, branching over A**, along every path of which there are** infinitely many nodes labelled with an element of B**."^^xsd:string ;
    askg-onto:index "4"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-a,
        askg-data:Entity-element_of_b,
        askg-data:Entity-infinitely_many_nodes,
        askg-data:Entity-nodes,
        askg-data:Entity-non-wellfounded_tree,
        askg-data:Entity-path .

askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-215-Sentence-2155 a askg-onto:Sentence ;
    rdfs:label "Sentence 5"@en ;
    domo:Text "Start at the root, then use successive** entries in the argument stream to steer your way along some path."@en ;
    askg-onto:inSentence "Start at the root, then use successive** entries in the argument stream to steer your way along some path."^^xsd:string ;
    askg-onto:index "5"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-argument_stream,
        askg-data:Entity-some_path .

askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-215-Sentence-2156 a askg-onto:Sentence ;
    rdfs:label "Sentence 6"@en ;
    domo:Text "Whenever you arrive at a node labelled with an element of B**, as you will inevitably do infinitely often, emit** that element as the next entry in the output stream."@en ;
    askg-onto:inSentence "Whenever you arrive at a node labelled with an element of B**, as you will inevitably do infinitely often, emit** that element as the next entry in the output stream."^^xsd:string ;
    askg-onto:index "6"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-element,
        askg-data:Entity-element_of_b,
        askg-data:Entity-node,
        askg-data:Entity-output_stream .

askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-215-Sentence-2157 a askg-onto:Sentence ;
    rdfs:label "Sentence 7"@en ;
    domo:Text "It turns out to be straightforward to express the type of trees we need as a nested fixed point, in which one forms the final coalgebra of a functor that is defined using an initial algebra construction."@en ;
    askg-onto:inSentence "It turns out to be straightforward to express the type of trees we need as a nested fixed point, in which one forms the final coalgebra of a functor that is defined using an initial algebra construction."^^xsd:string ;
    askg-onto:index "7"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-final_coalgebra,
        askg-data:Entity-functor,
        askg-data:Entity-initial_algebra_construction,
        askg-data:Entity-nested_fixed_point,
        askg-data:Entity-trees .

askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-216 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 16"@en ;
    domo:Text "Is this representation complete? It turns out that every stream-valued function on streams is representable by a non-wellfounded tree of the kind we have described, though the argument is perhaps a little intricate."@en ;
    askg-onto:hasSentence askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-216-Sentence-2161,
        askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-216-Sentence-2162 ;
    askg-onto:index "16"^^xsd:int .

askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-216-Sentence-2161 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "Is this representation complete?"@en ;
    askg-onto:inSentence "Is this representation complete?"^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-complete,
        askg-data:Entity-representation .

askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-216-Sentence-2162 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "It turns out that every stream-valued function on streams is representable by a non-wellfounded tree of the kind we have described, though the argument is perhaps a little intricate."@en ;
    askg-onto:inSentence "It turns out that every stream-valued function on streams is representable by a non-wellfounded tree of the kind we have described, though the argument is perhaps a little intricate."^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-non-wellfounded_tree,
        askg-data:Entity-stream-valued_function .

askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-217 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 17"@en ;
    domo:Text "Our main contribution, non-trivially extending the state of the art in the 1960's, is to formulate a represention of stream processing components (continuous functions between"@en ;
    askg-onto:hasSentence askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-217-Sentence-2171 ;
    askg-onto:index "17"^^xsd:int .

askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-217-Sentence-2171 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "Our main contribution, non-trivially extending the state of the art in the 1960's, is to formulate a represention of stream processing components (continuous functions between"@en ;
    askg-onto:inSentence "Our main contribution, non-trivially extending the state of the art in the 1960's, is to formulate a represention of stream processing components (continuous functions between"^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-representation,
        askg-data:Entity-stream_processing_components .

askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-218 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 18"@en ;
    domo:Text "1Brouwer did not place any restriction such as monotonicity on B**. As explained by Dummett [4, pp** 68–75] this is definitely an error. streams, including their composition), different from that customary in the logical literature2**, that fits better with practical implementation of stream computation.** The datatype of representations provides a convenient basis for writing stream processing components in a functional programming language such as **Haskell. Nevertheless, the** coding in Haskell is not entirely satisfying. The chief advantage of using our data type to program stream processing components is that it ensures liveness, through the use of mixed inductive-coinductive types. The foundations of Haskell are located in a theory of **partial** functions, and not functions in the standard mathematical sense. Totality is something extrinsic, beyond the scope of the type system. Our approach **guarantees that the stream** processors are total. So it might be better expressed in a language for total **functional** programming, as advocated by Turner [21], and approximated **in systems such as Epigram** and Agda. This means that evaluation of the constructor form **of the value of a function at** an argument in its domain must terminate, in our opinion something to be striven for in a practical programming language."@en ;
    askg-onto:hasSentence askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-218-Sentence-2181,
        askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-218-Sentence-21810,
        askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-218-Sentence-2182,
        askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-218-Sentence-2183,
        askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-218-Sentence-2184,
        askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-218-Sentence-2185,
        askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-218-Sentence-2186,
        askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-218-Sentence-2187,
        askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-218-Sentence-2188,
        askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-218-Sentence-2189 ;
    askg-onto:index "18"^^xsd:int .

askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-218-Sentence-2181 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "1Brouwer did not place any restriction such as monotonicity on B**."@en ;
    askg-onto:inSentence "1Brouwer did not place any restriction such as monotonicity on B**."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-b,
        askg-data:Entity-brouwer .

askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-218-Sentence-21810 a askg-onto:Sentence ;
    rdfs:label "Sentence 10"@en ;
    domo:Text "This means that evaluation of the constructor form **of the value of a function at** an argument in its domain must terminate, in our opinion something to be striven for in a practical programming language."@en ;
    askg-onto:inSentence "This means that evaluation of the constructor form **of the value of a function at** an argument in its domain must terminate, in our opinion something to be striven for in a practical programming language."^^xsd:string ;
    askg-onto:index "10"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-argument,
        askg-data:Entity-constructor_form,
        askg-data:Entity-function,
        askg-data:Entity-value_of_a_function .

askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-218-Sentence-2182 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "As explained by Dummett [4, pp** 68–75] this is definitely an error."@en ;
    askg-onto:inSentence "As explained by Dummett [4, pp** 68–75] this is definitely an error."^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-dummett,
        askg-data:Entity-error .

askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-218-Sentence-2183 a askg-onto:Sentence ;
    rdfs:label "Sentence 3"@en ;
    domo:Text "streams, including their composition), different from that customary in the logical literature2**, that fits better with practical implementation of stream computation.** The datatype of representations provides a convenient basis for writing stream processing components in a functional programming language such as **Haskell."@en ;
    askg-onto:inSentence "streams, including their composition), different from that customary in the logical literature2**, that fits better with practical implementation of stream computation.** The datatype of representations provides a convenient basis for writing stream processing components in a functional programming language such as **Haskell."^^xsd:string ;
    askg-onto:index "3"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-haskell,
        askg-data:Entity-stream_processing_components .

askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-218-Sentence-2184 a askg-onto:Sentence ;
    rdfs:label "Sentence 4"@en ;
    domo:Text "Nevertheless, the** coding in Haskell is not entirely satisfying."@en ;
    askg-onto:inSentence "Nevertheless, the** coding in Haskell is not entirely satisfying."^^xsd:string ;
    askg-onto:index "4"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-coding,
        askg-data:Entity-haskell .

askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-218-Sentence-2185 a askg-onto:Sentence ;
    rdfs:label "Sentence 5"@en ;
    domo:Text "The chief advantage of using our data type to program stream processing components is that it ensures liveness, through the use of mixed inductive-coinductive types."@en ;
    askg-onto:inSentence "The chief advantage of using our data type to program stream processing components is that it ensures liveness, through the use of mixed inductive-coinductive types."^^xsd:string ;
    askg-onto:index "5"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-data_type,
        askg-data:Entity-ensuring_liveness,
        askg-data:Entity-liveness,
        askg-data:Entity-mixed_inductive-coinductive_types,
        askg-data:Entity-stream_processing_components .

askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-218-Sentence-2186 a askg-onto:Sentence ;
    rdfs:label "Sentence 6"@en ;
    domo:Text "The foundations of Haskell are located in a theory of **partial** functions, and not functions in the standard mathematical sense."@en ;
    askg-onto:inSentence "The foundations of Haskell are located in a theory of **partial** functions, and not functions in the standard mathematical sense."^^xsd:string ;
    askg-onto:index "6"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-haskell,
        askg-data:Entity-theory_of_partial_functions .

askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-218-Sentence-2187 a askg-onto:Sentence ;
    rdfs:label "Sentence 7"@en ;
    domo:Text "Totality is something extrinsic, beyond the scope of the type system."@en ;
    askg-onto:inSentence "Totality is something extrinsic, beyond the scope of the type system."^^xsd:string ;
    askg-onto:index "7"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-something_extrinsic,
        askg-data:Entity-totality .

askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-218-Sentence-2188 a askg-onto:Sentence ;
    rdfs:label "Sentence 8"@en ;
    domo:Text "Our approach **guarantees that the stream** processors are total."@en ;
    askg-onto:inSentence "Our approach **guarantees that the stream** processors are total."^^xsd:string ;
    askg-onto:index "8"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-approach,
        askg-data:Entity-stream_processors .

askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-218-Sentence-2189 a askg-onto:Sentence ;
    rdfs:label "Sentence 9"@en ;
    domo:Text "So it might be better expressed in a language for total **functional** programming, as advocated by Turner [21], and approximated **in systems such as Epigram** and Agda."@en ;
    askg-onto:inSentence "So it might be better expressed in a language for total **functional** programming, as advocated by Turner [21], and approximated **in systems such as Epigram** and Agda."^^xsd:string ;
    askg-onto:index "9"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-agda,
        askg-data:Entity-epigram,
        askg-data:Entity-functional_programming,
        askg-data:Entity-turner .

askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-219 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 19"@en ;
    domo:Text "It seems that there are lessons to be learnt from this work for **the design of formalisms** and systems for developing dependently typed programs. It is not yet entirely clear what facilities for coinductive definition and reasoning such systems need to provide, and in what form. It seems firstly that facilities for inductive-recursive definition may be needed in connection with coinductive structures: the neighbourhoods in coinductive types have an inductive-recursive construction. (Admittedly, this structure does not become fully evident until we consider more general coinductive datatypes than streams.) Secondly, inductive and coinductive definitions are sometimes nested within each other (as in (ν X) (µ Y ) B × X +Y A**). Coding our constructions in current systems for dependently typed programming** has revealed a number of deficiencies and errors in these systems. Dealing with recursive definitions in which induction and coinduction are combined **needs careful analysis, that** in our opinion should be based on the universal properties of **initial algebras and final** coalgebras."@en ;
    askg-onto:hasSentence askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-219-Sentence-2191,
        askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-219-Sentence-2192,
        askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-219-Sentence-2193,
        askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-219-Sentence-2194,
        askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-219-Sentence-2195,
        askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-219-Sentence-2196 ;
    askg-onto:index "19"^^xsd:int .

askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-219-Sentence-2191 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "It seems that there are lessons to be learnt from this work for **the design of formalisms** and systems for developing dependently typed programs."@en ;
    askg-onto:inSentence "It seems that there are lessons to be learnt from this work for **the design of formalisms** and systems for developing dependently typed programs."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-developing_dependently_typed_programs,
        askg-data:Entity-the_design_of_formalisms .

askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-219-Sentence-2192 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "It is not yet entirely clear what facilities for coinductive definition and reasoning such systems need to provide, and in what form."@en ;
    askg-onto:inSentence "It is not yet entirely clear what facilities for coinductive definition and reasoning such systems need to provide, and in what form."^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-facilities_for_coinductive_definition_and_reasoning,
        askg-data:Entity-systems .

askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-219-Sentence-2193 a askg-onto:Sentence ;
    rdfs:label "Sentence 3"@en ;
    domo:Text "It seems firstly that facilities for inductive-recursive definition may be needed in connection with coinductive structures: the neighbourhoods in coinductive types have an inductive-recursive construction."@en ;
    askg-onto:inSentence "It seems firstly that facilities for inductive-recursive definition may be needed in connection with coinductive structures: the neighbourhoods in coinductive types have an inductive-recursive construction."^^xsd:string ;
    askg-onto:index "3"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-coinductive_structures,
        askg-data:Entity-facilities_for_inductive-recursive_definition,
        askg-data:Entity-inductive-recursive_construction,
        askg-data:Entity-neighbourhoods_in_coinductive_types .

askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-219-Sentence-2194 a askg-onto:Sentence ;
    rdfs:label "Sentence 4"@en ;
    domo:Text "(Admittedly, this structure does not become fully evident until we consider more general coinductive datatypes than streams.) Secondly, inductive and coinductive definitions are sometimes nested within each other (as in (ν X) (µ Y ) B × X +Y A**)."@en ;
    askg-onto:inSentence "(Admittedly, this structure does not become fully evident until we consider more general coinductive datatypes than streams.) Secondly, inductive and coinductive definitions are sometimes nested within each other (as in (ν X) (µ Y ) B × X +Y A**)."^^xsd:string ;
    askg-onto:index "4"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-coinductive_datatypes,
        askg-data:Entity-coinductive_definitions,
        askg-data:Entity-datatypes,
        askg-data:Entity-inductive_definitions .

askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-219-Sentence-2195 a askg-onto:Sentence ;
    rdfs:label "Sentence 5"@en ;
    domo:Text "Coding our constructions in current systems for dependently typed programming** has revealed a number of deficiencies and errors in these systems."@en ;
    askg-onto:inSentence "Coding our constructions in current systems for dependently typed programming** has revealed a number of deficiencies and errors in these systems."^^xsd:string ;
    askg-onto:index "5"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-current_systems,
        askg-data:Entity-dependently_typed_programming .

askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-219-Sentence-2196 a askg-onto:Sentence ;
    rdfs:label "Sentence 6"@en ;
    domo:Text "Dealing with recursive definitions in which induction and coinduction are combined **needs careful analysis, that** in our opinion should be based on the universal properties of **initial algebras and final** coalgebras."@en ;
    askg-onto:inSentence "Dealing with recursive definitions in which induction and coinduction are combined **needs careful analysis, that** in our opinion should be based on the universal properties of **initial algebras and final** coalgebras."^^xsd:string ;
    askg-onto:index "6"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-final_coalgebras,
        askg-data:Entity-induction_and_coinduction,
        askg-data:Entity-initial_algebras,
        askg-data:Entity-recursive_definitions .

askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-22 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 2"@en ;
    domo:Text "![0_image_0.png](0_image_0.png)"@en ;
    askg-onto:hasSentence askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-22-Sentence-221 ;
    askg-onto:index "2"^^xsd:int .

askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-22-Sentence-221 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "![0_image_0.png](0_image_0.png)"@en ;
    askg-onto:inSentence "![0_image_0.png](0_image_0.png)"^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-concept .

askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-220 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 20"@en ;
    domo:Text "The paper is organised as follows."@en ;
    askg-onto:hasSentence askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-220-Sentence-2201 ;
    askg-onto:index "20"^^xsd:int .

askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-220-Sentence-2201 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "The paper is organised as follows."@en ;
    askg-onto:inSentence "The paper is organised as follows."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-follows,
        askg-data:Entity-paper .

askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-221 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 21"@en ;
    domo:Text "- **Section 1: preliminaries.** - Section 2: we define the representation of the continuous function space Aω ⇒ B **by the** datatype TAB = (µ X) B + XA of wellfounded trees branching over A **and terminating** in B**, and show it is complete in the sense that each such continuous function has a** representative (in fact many) in TAB**. This part of the paper is in essence fairly well** known."@en ;
    askg-onto:hasSentence askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-221-Sentence-2211,
        askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-221-Sentence-2212 ;
    askg-onto:index "21"^^xsd:int .

askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-221-Sentence-2211 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "- **Section 1: preliminaries.** - Section 2: we define the representation of the continuous function space Aω ⇒ B **by the** datatype TAB = (µ X) B + XA of wellfounded trees branching over A **and terminating** in B**, and show it is complete in the sense that each such continuous function has a** representative (in fact many) in TAB**."@en ;
    askg-onto:inSentence "- **Section 1: preliminaries.** - Section 2: we define the representation of the continuous function space Aω ⇒ B **by the** datatype TAB = (µ X) B + XA of wellfounded trees branching over A **and terminating** in B**, and show it is complete in the sense that each such continuous function has a** representative (in fact many) in TAB**."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-%C2%B5_x_b__xa,
        askg-data:Entity-a,
        askg-data:Entity-b,
        askg-data:Entity-continuous_function,
        askg-data:Entity-continuous_function_space,
        askg-data:Entity-datatype_tab,
        askg-data:Entity-each_such_continuous_function,
        askg-data:Entity-tab,
        askg-data:Entity-wellfounded_trees .

askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-221-Sentence-2212 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "This part of the paper is in essence fairly well** known."@en ;
    askg-onto:inSentence "This part of the paper is in essence fairly well** known."^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-this_part_of_the_paper .

askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-222 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 22"@en ;
    domo:Text "- **Section 3: we define the representation of the continuous function space** Aω ⇒ Bω by PAB = (ν Y ) TA(B ×Y **). The main contribution here is the proof of completeness, which** is not completely straightforward. The proof is constructive, given completeness in the discrete-valued case."@en ;
    askg-onto:hasSentence askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-222-Sentence-2221,
        askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-222-Sentence-2222,
        askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-222-Sentence-2223 ;
    askg-onto:index "22"^^xsd:int .

askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-222-Sentence-2221 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "- **Section 3: we define the representation of the continuous function space** Aω ⇒ Bω by PAB = (ν Y ) TA(B ×Y **)."@en ;
    askg-onto:inSentence "- **Section 3: we define the representation of the continuous function space** Aω ⇒ Bω by PAB = (ν Y ) TA(B ×Y **)."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-%CE%BD_y__tab_y,
        askg-data:Entity-a%CF%89__b%CF%89,
        askg-data:Entity-continuous_function_space,
        askg-data:Entity-pab .

askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-222-Sentence-2222 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "The main contribution here is the proof of completeness, which** is not completely straightforward."@en ;
    askg-onto:inSentence "The main contribution here is the proof of completeness, which** is not completely straightforward."^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-not_completely_straightforward,
        askg-data:Entity-proof_of_completeness .

askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-222-Sentence-2223 a askg-onto:Sentence ;
    rdfs:label "Sentence 3"@en ;
    domo:Text "The proof is constructive, given completeness in the discrete-valued case."@en ;
    askg-onto:inSentence "The proof is constructive, given completeness in the discrete-valued case."^^xsd:string ;
    askg-onto:index "3"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-completeness,
        askg-data:Entity-constructive,
        askg-data:Entity-discrete-valued_case,
        askg-data:Entity-proof .

askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-223 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 23"@en ;
    domo:Text "- **Section 4: we define two representations of composition, as operators of type** PBC × PAB → PAC**, and show their correctness. As far as we have been able to discover, this** representation is new."@en ;
    askg-onto:hasSentence askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-223-Sentence-2231,
        askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-223-Sentence-2232 ;
    askg-onto:index "23"^^xsd:int .

askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-223-Sentence-2231 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "- **Section 4: we define two representations of composition, as operators of type** PBC × PAB → PAC**, and show their correctness."@en ;
    askg-onto:inSentence "- **Section 4: we define two representations of composition, as operators of type** PBC × PAB → PAC**, and show their correctness."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-pac,
        askg-data:Entity-pbc__pab .

askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-223-Sentence-2232 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "As far as we have been able to discover, this** representation is new."@en ;
    askg-onto:inSentence "As far as we have been able to discover, this** representation is new."^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-new,
        askg-data:Entity-representation .

askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-224 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 24"@en ;
    domo:Text "- **Section 5: in conclusion, we summarise what has been done, point out related work, and** indicate some directions for further work."@en ;
    askg-onto:hasSentence askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-224-Sentence-2241 ;
    askg-onto:index "24"^^xsd:int .

askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-224-Sentence-2241 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "- **Section 5: in conclusion, we summarise what has been done, point out related work, and** indicate some directions for further work."@en ;
    askg-onto:inSentence "- **Section 5: in conclusion, we summarise what has been done, point out related work, and** indicate some directions for further work."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-conclusion,
        askg-data:Entity-work .

askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-225 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 25"@en ;
    domo:Text "2According to this, if kf **represents a function** f : ω ω → B**, then** φ : ω ω → B ωis represented by kf **where** f(n # α) = φ(α, n). This manoeuver works only when α is a stream of natural numbers, or encodable as such. The main definitions of the paper can be transcribed quite simply into Haskell. A Haskell encoding can be found at http://personal.cis.strath.ac.uk/∼ng/eating.hs."@en ;
    askg-onto:hasSentence askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-225-Sentence-2251,
        askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-225-Sentence-2252,
        askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-225-Sentence-2253,
        askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-225-Sentence-2254 ;
    askg-onto:index "25"^^xsd:int .

askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-225-Sentence-2251 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "2According to this, if kf **represents a function** f : ω ω → B**, then** φ : ω ω → B ωis represented by kf **where** f(n # α) = φ(α, n)."@en ;
    askg-onto:inSentence "2According to this, if kf **represents a function** f : ω ω → B**, then** φ : ω ω → B ωis represented by kf **where** f(n # α) = φ(α, n)."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-%CF%86,
        askg-data:Entity-%CF%86%CE%B1_n,
        askg-data:Entity-f__%CF%89_%CF%89__b,
        askg-data:Entity-fn__%CE%B1,
        askg-data:Entity-kf .

askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-225-Sentence-2252 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "This manoeuver works only when α is a stream of natural numbers, or encodable as such."@en ;
    askg-onto:inSentence "This manoeuver works only when α is a stream of natural numbers, or encodable as such."^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-%CE%B1,
        askg-data:Entity-a_stream_of_natural_numbers .

askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-225-Sentence-2253 a askg-onto:Sentence ;
    rdfs:label "Sentence 3"@en ;
    domo:Text "The main definitions of the paper can be transcribed quite simply into Haskell."@en ;
    askg-onto:inSentence "The main definitions of the paper can be transcribed quite simply into Haskell."^^xsd:string ;
    askg-onto:index "3"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-the_paper .

askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-225-Sentence-2254 a askg-onto:Sentence ;
    rdfs:label "Sentence 4"@en ;
    domo:Text "A Haskell encoding can be found at http://personal.cis.strath.ac.uk/∼ng/eating.hs."@en ;
    askg-onto:inSentence "A Haskell encoding can be found at http://personal.cis.strath.ac.uk/∼ng/eating.hs."^^xsd:string ;
    askg-onto:index "4"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-haskell_encoding,
        askg-data:Entity-httppersonalcisstrathacukngeatinghs .

askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-23 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 3"@en ;
    domo:Text "LOGICAL METHODS 1998 ACM Subject Classification: **68P05, 68N18, 54C35.** Key words and phrases: **Streams, continuous functions, initial algebras, final coalgebras.** a **Hancock's work was supported by EPSERC grant EP/C511964/1.** If one is to implement such a function by means of a program or machine that consumes successive values in an input stream, and produces a value (all at once in the discrete case, or in a stream of successive values in the stream-valued case), it seems necessary that the function be continuous. Otherwise, the whole input **stream would be needed at** once: an output would be forthcoming only 'at the end of time'. Continuity means that finite information concerning the output of the function is determined by finite information concerning its input. In the simpler, discrete-valued case, this amounts to the requirement that the value b = f α of the function at argument α **is determined (or 'secured') by some** finite prefix αn = (α0,α1,α2,... ,αn−1**) of** α."@en ;
    askg-onto:hasSentence askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-23-Sentence-231,
        askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-23-Sentence-232,
        askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-23-Sentence-233,
        askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-23-Sentence-234,
        askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-23-Sentence-235 ;
    askg-onto:index "3"^^xsd:int .

askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-23-Sentence-231 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "LOGICAL METHODS 1998 ACM Subject Classification: **68P05, 68N18, 54C35.** Key words and phrases: **Streams, continuous functions, initial algebras, final coalgebras.** a **Hancock's work was supported by EPSERC grant EP/C511964/1.** If one is to implement such a function by means of a program or machine that consumes successive values in an input stream, and produces a value (all at once in the discrete case, or in a stream of successive values in the stream-valued case), it seems necessary that the function be continuous."@en ;
    askg-onto:inSentence "LOGICAL METHODS 1998 ACM Subject Classification: **68P05, 68N18, 54C35.** Key words and phrases: **Streams, continuous functions, initial algebras, final coalgebras.** a **Hancock's work was supported by EPSERC grant EP/C511964/1.** If one is to implement such a function by means of a program or machine that consumes successive values in an input stream, and produces a value (all at once in the discrete case, or in a stream of successive values in the stream-valued case), it seems necessary that the function be continuous."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-continuous,
        askg-data:Entity-function,
        askg-data:Entity-hancock,
        askg-data:Entity-program_or_machine,
        askg-data:Entity-value .

askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-23-Sentence-232 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "Otherwise, the whole input **stream would be needed at** once: an output would be forthcoming only 'at the end of time'."@en ;
    askg-onto:inSentence "Otherwise, the whole input **stream would be needed at** once: an output would be forthcoming only 'at the end of time'."^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-input_stream,
        askg-data:Entity-once .

askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-23-Sentence-233 a askg-onto:Sentence ;
    rdfs:label "Sentence 3"@en ;
    domo:Text "Continuity means that finite information concerning the output of the function is determined by finite information concerning its input."@en ;
    askg-onto:inSentence "Continuity means that finite information concerning the output of the function is determined by finite information concerning its input."^^xsd:string ;
    askg-onto:index "3"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-continuity,
        askg-data:Entity-finite_information,
        askg-data:Entity-finite_information_concerning_its_input,
        askg-data:Entity-input,
        askg-data:Entity-its_output,
        askg-data:Entity-output_of_the_function .

askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-23-Sentence-234 a askg-onto:Sentence ;
    rdfs:label "Sentence 4"@en ;
    domo:Text "In the simpler, discrete-valued case, this amounts to the requirement that the value b = f α of the function at argument α **is determined (or 'secured') by some** finite prefix αn = (α0,α1,α2,..."@en ;
    askg-onto:inSentence "In the simpler, discrete-valued case, this amounts to the requirement that the value b = f α of the function at argument α **is determined (or 'secured') by some** finite prefix αn = (α0,α1,α2,..."^^xsd:string ;
    askg-onto:index "4"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-%CE%B1,
        askg-data:Entity-%CE%B10%CE%B11%CE%B12,
        askg-data:Entity-%CE%B1n,
        askg-data:Entity-b,
        askg-data:Entity-f,
        askg-data:Entity-f_%CE%B1 .

askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-23-Sentence-235 a askg-onto:Sentence ;
    rdfs:label "Sentence 5"@en ;
    domo:Text ",αn−1**) of** α."@en ;
    askg-onto:inSentence ",αn−1**) of** α."^^xsd:string ;
    askg-onto:index "5"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-%CE%B1,
        askg-data:Entity-%CE%B1n1 .

askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-24 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 4"@en ;
    domo:Text "It is fairly clear how to represent continuous functions on Aω **with discrete values in** B: take a well-founded tree branching over A, with B**'s at the leaves. Such a tree represents a** continuous function. Start at the root, then use successive **entries in the argument stream** to steer your way along some path to a leaf. When you arrive at the leaf, as you inevitably must in view of the tree's being well-founded, there is your value for that argument. We can visualise the representation as follows."@en ;
    askg-onto:hasSentence askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-24-Sentence-241,
        askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-24-Sentence-242,
        askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-24-Sentence-243,
        askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-24-Sentence-244,
        askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-24-Sentence-245 ;
    askg-onto:index "4"^^xsd:int .

askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-24-Sentence-241 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "It is fairly clear how to represent continuous functions on Aω **with discrete values in** B: take a well-founded tree branching over A, with B**'s at the leaves."@en ;
    askg-onto:inSentence "It is fairly clear how to represent continuous functions on Aω **with discrete values in** B: take a well-founded tree branching over A, with B**'s at the leaves."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-a%CF%89,
        askg-data:Entity-b,
        askg-data:Entity-continuous_functions,
        askg-data:Entity-discrete_values,
        askg-data:Entity-well-founded_tree .

askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-24-Sentence-242 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "Such a tree represents a** continuous function."@en ;
    askg-onto:inSentence "Such a tree represents a** continuous function."^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-continuous_function,
        askg-data:Entity-tree .

askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-24-Sentence-243 a askg-onto:Sentence ;
    rdfs:label "Sentence 3"@en ;
    domo:Text "Start at the root, then use successive **entries in the argument stream** to steer your way along some path to a leaf."@en ;
    askg-onto:inSentence "Start at the root, then use successive **entries in the argument stream** to steer your way along some path to a leaf."^^xsd:string ;
    askg-onto:index "3"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-argument_stream,
        askg-data:Entity-leaf,
        askg-data:Entity-path,
        askg-data:Entity-root .

askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-24-Sentence-244 a askg-onto:Sentence ;
    rdfs:label "Sentence 4"@en ;
    domo:Text "When you arrive at the leaf, as you inevitably must in view of the tree's being well-founded, there is your value for that argument."@en ;
    askg-onto:inSentence "When you arrive at the leaf, as you inevitably must in view of the tree's being well-founded, there is your value for that argument."^^xsd:string ;
    askg-onto:index "4"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-argument,
        askg-data:Entity-leaf,
        askg-data:Entity-tree,
        askg-data:Entity-value .

askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-24-Sentence-245 a askg-onto:Sentence ;
    rdfs:label "Sentence 5"@en ;
    domo:Text "We can visualise the representation as follows."@en ;
    askg-onto:inSentence "We can visualise the representation as follows."^^xsd:string ;
    askg-onto:index "5"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-follows,
        askg-data:Entity-representation .

askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-25 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 5"@en ;
    domo:Text "![1_image_0.png](1_image_0.png)"@en ;
    askg-onto:hasSentence askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-25-Sentence-251 ;
    askg-onto:index "5"^^xsd:int .

askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-25-Sentence-251 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "![1_image_0.png](1_image_0.png)"@en ;
    askg-onto:inSentence "![1_image_0.png](1_image_0.png)"^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-1_image_0png,
        askg-data:Entity-image .

askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-26 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 6"@en ;
    domo:Text "f : 2ω → 2 f(0,...**) = 0** f(1, 0,...**) = 1**"@en ;
    askg-onto:hasSentence askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-26-Sentence-261 ;
    askg-onto:index "6"^^xsd:int .

askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-26-Sentence-261 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "f : 2ω → 2 f(0,...**) = 0** f(1, 0,...**) = 1**"@en ;
    askg-onto:inSentence "f : 2ω → 2 f(0,...**) = 0** f(1, 0,...**) = 1**"^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-0,
        askg-data:Entity-1,
        askg-data:Entity-2%CF%89,
        askg-data:Entity-f,
        askg-data:Entity-f0,
        askg-data:Entity-f1_0 .

askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-27 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 7"@en ;
    domo:Text "* $\\cdot$). $f(1,1,0,\\cdot\\cdot\\cdot)$."@en ;
    askg-onto:hasSentence askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-27-Sentence-271,
        askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-27-Sentence-272 ;
    askg-onto:index "7"^^xsd:int .

askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-27-Sentence-271 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "* $\\cdot$)."@en ;
    askg-onto:index "1"^^xsd:int .

askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-27-Sentence-272 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "$f(1,1,0,\\cdot\\cdot\\cdot)$."@en ;
    askg-onto:inSentence "$f(1,1,0,\\cdot\\cdot\\cdot)$."^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-f110%09ext,
        askg-data:Entity-function .

askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-28 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 8"@en ;
    domo:Text "f(1, 1, 0,...**) = 0** f(1, 1, 1,...**) = 1** At the black inner nodes, the representation 'eats' the next **entry in the argument** stream, and goes left or right according to whether it's 0 or 1; at leaves, it 'spits' the (boxed) value for that argument."@en ;
    askg-onto:hasSentence askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-28-Sentence-281 ;
    askg-onto:index "8"^^xsd:int .

askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-28-Sentence-281 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "f(1, 1, 0,...**) = 0** f(1, 1, 1,...**) = 1** At the black inner nodes, the representation 'eats' the next **entry in the argument** stream, and goes left or right according to whether it's 0 or 1; at leaves, it 'spits' the (boxed) value for that argument."@en ;
    askg-onto:inSentence "f(1, 1, 0,...**) = 0** f(1, 1, 1,...**) = 1** At the black inner nodes, the representation 'eats' the next **entry in the argument** stream, and goes left or right according to whether it's 0 or 1; at leaves, it 'spits' the (boxed) value for that argument."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-argument,
        askg-data:Entity-black_inner_nodes .

askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-29 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 9"@en ;
    domo:Text "It should be noted that there will be several (actually, infinitely many) representations of the same function. For example, the tree below represents **the same function as the** one above, where (of course) two functions are the same if their values are equal for all arguments."@en ;
    askg-onto:hasSentence askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-29-Sentence-291,
        askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-29-Sentence-292 ;
    askg-onto:index "9"^^xsd:int .

askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-29-Sentence-291 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "It should be noted that there will be several (actually, infinitely many) representations of the same function."@en ;
    askg-onto:inSentence "It should be noted that there will be several (actually, infinitely many) representations of the same function."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-function,
        askg-data:Entity-infinitely_many,
        askg-data:Entity-representations .

askg-data:Paper-978f1c811f3bfb5d-Section-2-Paragraph-29-Sentence-292 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "For example, the tree below represents **the same function as the** one above, where (of course) two functions are the same if their values are equal for all arguments."@en ;
    askg-onto:inSentence "For example, the tree below represents **the same function as the** one above, where (of course) two functions are the same if their values are equal for all arguments."^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-all_arguments,
        askg-data:Entity-the_same,
        askg-data:Entity-the_same_function_as_the_one_above,
        askg-data:Entity-the_tree,
        askg-data:Entity-their_values,
        askg-data:Entity-two_functions .

askg-data:Paper-978f1c811f3bfb5d-Section-3 a askg-onto:Section ;
    rdfs:label "Section 3"@en ;
    domo:Text "1. **Preliminaries**"@en ;
    askg-onto:hasParagraph askg-data:Paper-978f1c811f3bfb5d-Section-3-Paragraph-31,
        askg-data:Paper-978f1c811f3bfb5d-Section-3-Paragraph-310,
        askg-data:Paper-978f1c811f3bfb5d-Section-3-Paragraph-311,
        askg-data:Paper-978f1c811f3bfb5d-Section-3-Paragraph-312,
        askg-data:Paper-978f1c811f3bfb5d-Section-3-Paragraph-313,
        askg-data:Paper-978f1c811f3bfb5d-Section-3-Paragraph-314,
        askg-data:Paper-978f1c811f3bfb5d-Section-3-Paragraph-315,
        askg-data:Paper-978f1c811f3bfb5d-Section-3-Paragraph-316,
        askg-data:Paper-978f1c811f3bfb5d-Section-3-Paragraph-317,
        askg-data:Paper-978f1c811f3bfb5d-Section-3-Paragraph-318,
        askg-data:Paper-978f1c811f3bfb5d-Section-3-Paragraph-319,
        askg-data:Paper-978f1c811f3bfb5d-Section-3-Paragraph-32,
        askg-data:Paper-978f1c811f3bfb5d-Section-3-Paragraph-320,
        askg-data:Paper-978f1c811f3bfb5d-Section-3-Paragraph-321,
        askg-data:Paper-978f1c811f3bfb5d-Section-3-Paragraph-33,
        askg-data:Paper-978f1c811f3bfb5d-Section-3-Paragraph-34,
        askg-data:Paper-978f1c811f3bfb5d-Section-3-Paragraph-35,
        askg-data:Paper-978f1c811f3bfb5d-Section-3-Paragraph-36,
        askg-data:Paper-978f1c811f3bfb5d-Section-3-Paragraph-37,
        askg-data:Paper-978f1c811f3bfb5d-Section-3-Paragraph-38,
        askg-data:Paper-978f1c811f3bfb5d-Section-3-Paragraph-39 ;
    askg-onto:index "3"^^xsd:int ;
    askg-onto:level "1"^^xsd:int .

askg-data:Paper-978f1c811f3bfb5d-Section-3-Paragraph-31 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 1"@en ;
    domo:Text "We assume the reader is familiar with the categorical notions of product, coproduct, and exponential, and standard notations associated with these. We use '·**' as infix notation** for composition, with (as usual) postponent at left and preponent at right."@en ;
    askg-onto:hasSentence askg-data:Paper-978f1c811f3bfb5d-Section-3-Paragraph-31-Sentence-311,
        askg-data:Paper-978f1c811f3bfb5d-Section-3-Paragraph-31-Sentence-312 ;
    askg-onto:index "1"^^xsd:int .

askg-data:Paper-978f1c811f3bfb5d-Section-3-Paragraph-31-Sentence-311 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "We assume the reader is familiar with the categorical notions of product, coproduct, and exponential, and standard notations associated with these."@en ;
    askg-onto:inSentence "We assume the reader is familiar with the categorical notions of product, coproduct, and exponential, and standard notations associated with these."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-categorical_notions,
        askg-data:Entity-coproduct,
        askg-data:Entity-exponential,
        askg-data:Entity-product,
        askg-data:Entity-reader,
        askg-data:Entity-standard_notations .

askg-data:Paper-978f1c811f3bfb5d-Section-3-Paragraph-31-Sentence-312 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "We use '·**' as infix notation** for composition, with (as usual) postponent at left and preponent at right."@en ;
    askg-onto:inSentence "We use '·**' as infix notation** for composition, with (as usual) postponent at left and preponent at right."^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-composition,
        askg-data:Entity-infix_notation .

askg-data:Paper-978f1c811f3bfb5d-Section-3-Paragraph-310 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 10"@en ;
    domo:Text "image f (α n) = { f α } Aω ⇒ D consists of functions that are continuous throughout Aω."@en ;
    askg-onto:hasSentence askg-data:Paper-978f1c811f3bfb5d-Section-3-Paragraph-310-Sentence-3101 ;
    askg-onto:index "10"^^xsd:int .

askg-data:Paper-978f1c811f3bfb5d-Section-3-Paragraph-310-Sentence-3101 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "image f (α n) = { f α } Aω ⇒ D consists of functions that are continuous throughout Aω."@en ;
    askg-onto:inSentence "image f (α n) = { f α } Aω ⇒ D consists of functions that are continuous throughout Aω."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-a%CF%89,
        askg-data:Entity-continuous,
        askg-data:Entity-d,
        askg-data:Entity-function,
        askg-data:Entity-functions,
        askg-data:Entity-image_f_%CE%B1_n .

askg-data:Paper-978f1c811f3bfb5d-Section-3-Paragraph-311 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 11"@en ;
    domo:Text "- A stream-valued continuous function f : Aω → Bωis continuous at α : Aω**if (**∀n ∈ ω)(∃m ∈ ω)f(α(m)) ⊆ f αn**, or in other words to find out a finite amount of information** about the value, one need only provide a finite amount of information about the argument."@en ;
    askg-onto:hasSentence askg-data:Paper-978f1c811f3bfb5d-Section-3-Paragraph-311-Sentence-3111 ;
    askg-onto:index "11"^^xsd:int .

askg-data:Paper-978f1c811f3bfb5d-Section-3-Paragraph-311-Sentence-3111 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "- A stream-valued continuous function f : Aω → Bωis continuous at α : Aω**if (**∀n ∈ ω)(∃m ∈ ω)f(α(m)) ⊆ f αn**, or in other words to find out a finite amount of information** about the value, one need only provide a finite amount of information about the argument."@en ;
    askg-onto:inSentence "- A stream-valued continuous function f : Aω → Bωis continuous at α : Aω**if (**∀n ∈ ω)(∃m ∈ ω)f(α(m)) ⊆ f αn**, or in other words to find out a finite amount of information** about the value, one need only provide a finite amount of information about the argument."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-%CE%B1,
        askg-data:Entity-a%CF%89,
        askg-data:Entity-argument,
        askg-data:Entity-b%CF%89,
        askg-data:Entity-concept,
        askg-data:Entity-domain,
        askg-data:Entity-f,
        askg-data:Entity-finite_amount_of_information,
        askg-data:Entity-function,
        askg-data:Entity-information,
        askg-data:Entity-range .

askg-data:Paper-978f1c811f3bfb5d-Section-3-Paragraph-312 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 12"@en ;
    domo:Text "Aω ⇒ Bωconsists of functions that are continuous throughout Aω. If m **does not depend** on α, the function is uniformly continuous. Such a function f is contractive **if it decreases** the distance between streams. Prime examples of contractors are the functions (a \\#) : Aω ⇒ Aω**, indexed by** a : A."@en ;
    askg-onto:hasSentence askg-data:Paper-978f1c811f3bfb5d-Section-3-Paragraph-312-Sentence-3121,
        askg-data:Paper-978f1c811f3bfb5d-Section-3-Paragraph-312-Sentence-3122,
        askg-data:Paper-978f1c811f3bfb5d-Section-3-Paragraph-312-Sentence-3123,
        askg-data:Paper-978f1c811f3bfb5d-Section-3-Paragraph-312-Sentence-3124 ;
    askg-onto:index "12"^^xsd:int .

askg-data:Paper-978f1c811f3bfb5d-Section-3-Paragraph-312-Sentence-3121 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "Aω ⇒ Bωconsists of functions that are continuous throughout Aω."@en ;
    askg-onto:inSentence "Aω ⇒ Bωconsists of functions that are continuous throughout Aω."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-a%CF%89,
        askg-data:Entity-functions .

askg-data:Paper-978f1c811f3bfb5d-Section-3-Paragraph-312-Sentence-3122 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "If m **does not depend** on α, the function is uniformly continuous."@en ;
    askg-onto:inSentence "If m **does not depend** on α, the function is uniformly continuous."^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-%CE%B1,
        askg-data:Entity-m .

askg-data:Paper-978f1c811f3bfb5d-Section-3-Paragraph-312-Sentence-3123 a askg-onto:Sentence ;
    rdfs:label "Sentence 3"@en ;
    domo:Text "Such a function f is contractive **if it decreases** the distance between streams."@en ;
    askg-onto:inSentence "Such a function f is contractive **if it decreases** the distance between streams."^^xsd:string ;
    askg-onto:index "3"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-distance_between_streams,
        askg-data:Entity-function_f .

askg-data:Paper-978f1c811f3bfb5d-Section-3-Paragraph-312-Sentence-3124 a askg-onto:Sentence ;
    rdfs:label "Sentence 4"@en ;
    domo:Text "Prime examples of contractors are the functions (a \\#) : Aω ⇒ Aω**, indexed by** a : A."@en ;
    askg-onto:inSentence "Prime examples of contractors are the functions (a \\#) : Aω ⇒ Aω**, indexed by** a : A."^^xsd:string ;
    askg-onto:index "4"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-a,
        askg-data:Entity-a%CF%89,
        askg-data:Entity-contractors,
        askg-data:Entity-functions .

askg-data:Paper-978f1c811f3bfb5d-Section-3-Paragraph-313 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 13"@en ;
    domo:Text "1.2. Initial algebras and final coalgebras. We use (µ X) F(X) = µF and (ν X) F(X) = νF to denote initial and final coalgebras for an endofunctor F**, typically an endofunctor on** the category of sets."@en ;
    askg-onto:hasSentence askg-data:Paper-978f1c811f3bfb5d-Section-3-Paragraph-313-Sentence-3131,
        askg-data:Paper-978f1c811f3bfb5d-Section-3-Paragraph-313-Sentence-3132,
        askg-data:Paper-978f1c811f3bfb5d-Section-3-Paragraph-313-Sentence-3133 ;
    askg-onto:index "13"^^xsd:int .

askg-data:Paper-978f1c811f3bfb5d-Section-3-Paragraph-313-Sentence-3131 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "1.2."@en ;
    askg-onto:inSentence "1.2."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-12,
        askg-data:Entity-text_to_analyze .

askg-data:Paper-978f1c811f3bfb5d-Section-3-Paragraph-313-Sentence-3132 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "Initial algebras and final coalgebras."@en ;
    askg-onto:inSentence "Initial algebras and final coalgebras."^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-concept,
        askg-data:Entity-final_coalgebras,
        askg-data:Entity-initial_algebras .

askg-data:Paper-978f1c811f3bfb5d-Section-3-Paragraph-313-Sentence-3133 a askg-onto:Sentence ;
    rdfs:label "Sentence 3"@en ;
    domo:Text "We use (µ X) F(X) = µF and (ν X) F(X) = νF to denote initial and final coalgebras for an endofunctor F**, typically an endofunctor on** the category of sets."@en ;
    askg-onto:inSentence "We use (µ X) F(X) = µF and (ν X) F(X) = νF to denote initial and final coalgebras for an endofunctor F**, typically an endofunctor on** the category of sets."^^xsd:string ;
    askg-onto:index "3"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-category_of_sets,
        askg-data:Entity-endofunctor_f,
        askg-data:Entity-initial_and_final_coalgebras .

askg-data:Paper-978f1c811f3bfb5d-Section-3-Paragraph-314 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 14"@en ;
    domo:Text "Initial algebras In general we use in **for the structure map into the carrier of an initial** algebra. Thus in : F(µ F) → µ(F). Given an algebra C,γ : FC → C, we let fold(C; γ**), or** simply fold γ to denote the unique morphism δ : µ F → C **such that** δ · in = γ · **F δ.** We use in−1for the inverse of the structure map, namely **fold**(Fin)."@en ;
    askg-onto:hasSentence askg-data:Paper-978f1c811f3bfb5d-Section-3-Paragraph-314-Sentence-3141,
        askg-data:Paper-978f1c811f3bfb5d-Section-3-Paragraph-314-Sentence-3142,
        askg-data:Paper-978f1c811f3bfb5d-Section-3-Paragraph-314-Sentence-3143 ;
    askg-onto:index "14"^^xsd:int .

askg-data:Paper-978f1c811f3bfb5d-Section-3-Paragraph-314-Sentence-3141 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "Initial algebras In general we use in **for the structure map into the carrier of an initial** algebra."@en ;
    askg-onto:inSentence "Initial algebras In general we use in **for the structure map into the carrier of an initial** algebra."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-initial_algebras,
        askg-data:Entity-structure_map .

askg-data:Paper-978f1c811f3bfb5d-Section-3-Paragraph-314-Sentence-3142 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "Thus in : F(µ F) → µ(F)."@en ;
    askg-onto:inSentence "Thus in : F(µ F) → µ(F)."^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-%C2%B5f,
        askg-data:Entity-f%C2%B5_f .

askg-data:Paper-978f1c811f3bfb5d-Section-3-Paragraph-314-Sentence-3143 a askg-onto:Sentence ;
    rdfs:label "Sentence 3"@en ;
    domo:Text "Given an algebra C,γ : FC → C, we let fold(C; γ**), or** simply fold γ to denote the unique morphism δ : µ F → C **such that** δ · in = γ · **F δ.** We use in−1for the inverse of the structure map, namely **fold**(Fin)."@en ;
    askg-onto:inSentence "Given an algebra C,γ : FC → C, we let fold(C; γ**), or** simply fold γ to denote the unique morphism δ : µ F → C **such that** δ · in = γ · **F δ.** We use in−1for the inverse of the structure map, namely **fold**(Fin)."^^xsd:string ;
    askg-onto:index "3"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-%CE%B3__f_%CE%B4,
        askg-data:Entity-%CE%B4,
        askg-data:Entity-algebra_c,
        askg-data:Entity-fin,
        askg-data:Entity-fold,
        askg-data:Entity-in1,
        askg-data:Entity-inverse_of_the_structure_map,
        askg-data:Entity-unique_morphism_%CE%B4 .

askg-data:Paper-978f1c811f3bfb5d-Section-3-Paragraph-315 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 15"@en ;
    domo:Text "Example: finite sequences A∗ ∆= (µ X) 1 + A × X. We use ⋄ and (\\#**) as constructors** associated with ∗**, so**"@en ;
    askg-onto:hasSentence askg-data:Paper-978f1c811f3bfb5d-Section-3-Paragraph-315-Sentence-3151,
        askg-data:Paper-978f1c811f3bfb5d-Section-3-Paragraph-315-Sentence-3152 ;
    askg-onto:index "15"^^xsd:int .

askg-data:Paper-978f1c811f3bfb5d-Section-3-Paragraph-315-Sentence-3151 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "Example: finite sequences A∗ ∆= (µ X) 1 + A × X."@en ;
    askg-onto:inSentence "Example: finite sequences A∗ ∆= (µ X) 1 + A × X."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-%C2%B5_x_1__a__x,
        askg-data:Entity-finite_sequences .

askg-data:Paper-978f1c811f3bfb5d-Section-3-Paragraph-315-Sentence-3152 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "We use ⋄ and (\\#**) as constructors** associated with ∗**, so**"@en ;
    askg-onto:inSentence "We use ⋄ and (\\#**) as constructors** associated with ∗**, so**"^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-,
        askg-data:Entity-constructors .

askg-data:Paper-978f1c811f3bfb5d-Section-3-Paragraph-316 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 16"@en ;
    domo:Text "1⋄ /A∗ A × A∗(#)/A∗ in = [⋄|(#)] : 1 + A × A∗ → A∗ Example: TAB ∆= (µ X) B + XA, defined in section 2. The bifunctor TAB **is covariant** in B, and contravariant in A**. For fixed** A, TA : Set → Set **is actually the free monad over** the functor ( ) A (alias (A →**), known as the reader monad). Intriguingly, our constructions** all pivot on the freeness of this monad. TA is also known as the tree monad. We use Ret and Get for the constructors associated with TA**. Thus**"@en ;
    askg-onto:hasSentence askg-data:Paper-978f1c811f3bfb5d-Section-3-Paragraph-316-Sentence-3161,
        askg-data:Paper-978f1c811f3bfb5d-Section-3-Paragraph-316-Sentence-3162,
        askg-data:Paper-978f1c811f3bfb5d-Section-3-Paragraph-316-Sentence-3163,
        askg-data:Paper-978f1c811f3bfb5d-Section-3-Paragraph-316-Sentence-3164,
        askg-data:Paper-978f1c811f3bfb5d-Section-3-Paragraph-316-Sentence-3165,
        askg-data:Paper-978f1c811f3bfb5d-Section-3-Paragraph-316-Sentence-3166,
        askg-data:Paper-978f1c811f3bfb5d-Section-3-Paragraph-316-Sentence-3167 ;
    askg-onto:index "16"^^xsd:int .

askg-data:Paper-978f1c811f3bfb5d-Section-3-Paragraph-316-Sentence-3161 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "1⋄ /A∗ A × A∗(#)/A∗ in = [⋄|(#)] : 1 + A × A∗ → A∗ Example: TAB ∆= (µ X) B + XA, defined in section 2."@en ;
    askg-onto:inSentence "1⋄ /A∗ A × A∗(#)/A∗ in = [⋄|(#)] : 1 + A × A∗ → A∗ Example: TAB ∆= (µ X) B + XA, defined in section 2."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-,
        askg-data:Entity-%C2%B5_x_b__xa,
        askg-data:Entity-a,
        askg-data:Entity-tab .

askg-data:Paper-978f1c811f3bfb5d-Section-3-Paragraph-316-Sentence-3162 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "The bifunctor TAB **is covariant** in B, and contravariant in A**."@en ;
    askg-onto:inSentence "The bifunctor TAB **is covariant** in B, and contravariant in A**."^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-a,
        askg-data:Entity-b,
        askg-data:Entity-tab .

askg-data:Paper-978f1c811f3bfb5d-Section-3-Paragraph-316-Sentence-3163 a askg-onto:Sentence ;
    rdfs:label "Sentence 3"@en ;
    domo:Text "For fixed** A, TA : Set → Set **is actually the free monad over** the functor ( ) A (alias (A →**), known as the reader monad)."@en ;
    askg-onto:inSentence "For fixed** A, TA : Set → Set **is actually the free monad over** the functor ( ) A (alias (A →**), known as the reader monad)."^^xsd:string ;
    askg-onto:index "3"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-a,
        askg-data:Entity-a_,
        askg-data:Entity-set,
        askg-data:Entity-ta,
        askg-data:Entity-the_free_monad,
        askg-data:Entity-the_functor_a,
        askg-data:Entity-the_reader_monad .

askg-data:Paper-978f1c811f3bfb5d-Section-3-Paragraph-316-Sentence-3164 a askg-onto:Sentence ;
    rdfs:label "Sentence 4"@en ;
    domo:Text "Intriguingly, our constructions** all pivot on the freeness of this monad."@en ;
    askg-onto:inSentence "Intriguingly, our constructions** all pivot on the freeness of this monad."^^xsd:string ;
    askg-onto:index "4"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-freeness,
        askg-data:Entity-monad .

askg-data:Paper-978f1c811f3bfb5d-Section-3-Paragraph-316-Sentence-3165 a askg-onto:Sentence ;
    rdfs:label "Sentence 5"@en ;
    domo:Text "TA is also known as the tree monad."@en ;
    askg-onto:inSentence "TA is also known as the tree monad."^^xsd:string ;
    askg-onto:index "5"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-ta,
        askg-data:Entity-the_tree_monad .

askg-data:Paper-978f1c811f3bfb5d-Section-3-Paragraph-316-Sentence-3166 a askg-onto:Sentence ;
    rdfs:label "Sentence 6"@en ;
    domo:Text "We use Ret and Get for the constructors associated with TA**."@en ;
    askg-onto:inSentence "We use Ret and Get for the constructors associated with TA**."^^xsd:string ;
    askg-onto:index "6"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-get,
        askg-data:Entity-ret,
        askg-data:Entity-ta .

askg-data:Paper-978f1c811f3bfb5d-Section-3-Paragraph-316-Sentence-3167 a askg-onto:Sentence ;
    rdfs:label "Sentence 7"@en ;
    domo:Text "Thus**"@en ;
    askg-onto:inSentence "Thus**"^^xsd:string ;
    askg-onto:index "7"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-thus .

askg-data:Paper-978f1c811f3bfb5d-Section-3-Paragraph-317 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 17"@en ;
    domo:Text "$\\begin{CD}B@>{}>{}>{}>{\\bf{Ret}}@>{}>{}>T_{AB}\\\\ (T_{AB})^{A}@>{}>{}>{\\bf{Get}}@>{}>{}>T_{AB}\\\\ in=[{\\bf{Ret}}|{\\bf{Get}}]:B+(T_{AB})^{A}\\to T_{AB}\\end{CD}$ Final coalgebras In general we use out **for the structure map from the carrier of** a final coalgebra. Thus out : νF → F(νF). Given a coalgebra C,γ : C → FC**, we use** unfold(C; γ), or simply unfold γ (also called the coiteration of γ**) to denote the unique** coalgebra morphism δ : C → νF **such that**"@en ;
    askg-onto:hasSentence askg-data:Paper-978f1c811f3bfb5d-Section-3-Paragraph-317-Sentence-3171,
        askg-data:Paper-978f1c811f3bfb5d-Section-3-Paragraph-317-Sentence-3172,
        askg-data:Paper-978f1c811f3bfb5d-Section-3-Paragraph-317-Sentence-3173 ;
    askg-onto:index "17"^^xsd:int .

askg-data:Paper-978f1c811f3bfb5d-Section-3-Paragraph-317-Sentence-3171 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "$\\begin{CD}B@>{}>{}>{}>{\\bf{Ret}}@>{}>{}>T_{AB}\\\\ (T_{AB})^{A}@>{}>{}>{\\bf{Get}}@>{}>{}>T_{AB}\\\\ in=[{\\bf{Ret}}|{\\bf{Get}}]:B+(T_{AB})^{A}\\to T_{AB}\\end{CD}$ Final coalgebras In general we use out **for the structure map from the carrier of** a final coalgebra."@en ;
    askg-onto:inSentence "$\\begin{CD}B@>{}>{}>{}>{\\bf{Ret}}@>{}>{}>T_{AB}\\\\ (T_{AB})^{A}@>{}>{}>{\\bf{Get}}@>{}>{}>T_{AB}\\\\ in=[{\\bf{Ret}}|{\\bf{Get}}]:B+(T_{AB})^{A}\\to T_{AB}\\end{CD}$ Final coalgebras In general we use out **for the structure map from the carrier of** a final coalgebra."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-carrier,
        askg-data:Entity-concept,
        askg-data:Entity-final_coalgebras,
        askg-data:Entity-structure_map .

askg-data:Paper-978f1c811f3bfb5d-Section-3-Paragraph-317-Sentence-3172 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "Thus out : νF → F(νF)."@en ;
    askg-onto:inSentence "Thus out : νF → F(νF)."^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-%CE%BDf,
        askg-data:Entity-f%CE%BDf .

askg-data:Paper-978f1c811f3bfb5d-Section-3-Paragraph-317-Sentence-3173 a askg-onto:Sentence ;
    rdfs:label "Sentence 3"@en ;
    domo:Text "Given a coalgebra C,γ : C → FC**, we use** unfold(C; γ), or simply unfold γ (also called the coiteration of γ**) to denote the unique** coalgebra morphism δ : C → νF **such that**"@en ;
    askg-onto:inSentence "Given a coalgebra C,γ : C → FC**, we use** unfold(C; γ), or simply unfold γ (also called the coiteration of γ**) to denote the unique** coalgebra morphism δ : C → νF **such that**"^^xsd:string ;
    askg-onto:index "3"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-%CE%BDf,
        askg-data:Entity-coalgebra_c,
        askg-data:Entity-coalgebra_morphism_%CE%B4,
        askg-data:Entity-unfold_%CE%B3,
        askg-data:Entity-unfoldc_%CE%B3 .

askg-data:Paper-978f1c811f3bfb5d-Section-3-Paragraph-318 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 18"@en ;
    domo:Text "$${\\mathfrak{H}}\\cdot{\\mathfrak{H}}$$"@en ;
    askg-onto:hasSentence askg-data:Paper-978f1c811f3bfb5d-Section-3-Paragraph-318-Sentence-3181 ;
    askg-onto:index "18"^^xsd:int .

askg-data:Paper-978f1c811f3bfb5d-Section-3-Paragraph-318-Sentence-3181 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "$${\\mathfrak{H}}\\cdot{\\mathfrak{H}}$$"@en ;
    askg-onto:inSentence "$${\\mathfrak{H}}\\cdot{\\mathfrak{H}}$$"^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-mathfrakh .

askg-data:Paper-978f1c811f3bfb5d-Section-3-Paragraph-319 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 19"@en ;
    domo:Text "out · δ = F δ · γ We use out−1for the inverse of the structure map, namely unfold(Fout)."@en ;
    askg-onto:hasSentence askg-data:Paper-978f1c811f3bfb5d-Section-3-Paragraph-319-Sentence-3191 ;
    askg-onto:index "19"^^xsd:int .

askg-data:Paper-978f1c811f3bfb5d-Section-3-Paragraph-319-Sentence-3191 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "out · δ = F δ · γ We use out−1for the inverse of the structure map, namely unfold(Fout)."@en ;
    askg-onto:inSentence "out · δ = F δ · γ We use out−1for the inverse of the structure map, namely unfold(Fout)."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-fout,
        askg-data:Entity-inverse_of_structure_map,
        askg-data:Entity-out,
        askg-data:Entity-structure_map .

askg-data:Paper-978f1c811f3bfb5d-Section-3-Paragraph-32 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 2"@en ;
    domo:Text "1.1. Streams. If A is a set, we write Aωfor the set of countably infinite streams (ωsequences) of elements of A, and A∗**for the set of finite sequences (lists) of elements of** A."@en ;
    askg-onto:hasSentence askg-data:Paper-978f1c811f3bfb5d-Section-3-Paragraph-32-Sentence-321,
        askg-data:Paper-978f1c811f3bfb5d-Section-3-Paragraph-32-Sentence-322,
        askg-data:Paper-978f1c811f3bfb5d-Section-3-Paragraph-32-Sentence-323 ;
    askg-onto:index "2"^^xsd:int .

askg-data:Paper-978f1c811f3bfb5d-Section-3-Paragraph-32-Sentence-321 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "1.1."@en ;
    askg-onto:inSentence "1.1."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-11 .

askg-data:Paper-978f1c811f3bfb5d-Section-3-Paragraph-32-Sentence-322 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "Streams."@en ;
    askg-onto:inSentence "Streams."^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-concept,
        askg-data:Entity-streams .

askg-data:Paper-978f1c811f3bfb5d-Section-3-Paragraph-32-Sentence-323 a askg-onto:Sentence ;
    rdfs:label "Sentence 3"@en ;
    domo:Text "If A is a set, we write Aωfor the set of countably infinite streams (ωsequences) of elements of A, and A∗**for the set of finite sequences (lists) of elements of** A."@en ;
    askg-onto:inSentence "If A is a set, we write Aωfor the set of countably infinite streams (ωsequences) of elements of A, and A∗**for the set of finite sequences (lists) of elements of** A."^^xsd:string ;
    askg-onto:index "3"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-a,
        askg-data:Entity-countably_infinite_streams_%CF%89sequences,
        askg-data:Entity-finite_sequences_lists_of_elements_of_a .

askg-data:Paper-978f1c811f3bfb5d-Section-3-Paragraph-320 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 20"@en ;
    domo:Text "Example: streams Aω. We use hd and tl to access components of a stream. out = hhd,tli : Aω → A × Aω, while out−1ha,αi = a \\# α."@en ;
    askg-onto:hasSentence askg-data:Paper-978f1c811f3bfb5d-Section-3-Paragraph-320-Sentence-3201,
        askg-data:Paper-978f1c811f3bfb5d-Section-3-Paragraph-320-Sentence-3202,
        askg-data:Paper-978f1c811f3bfb5d-Section-3-Paragraph-320-Sentence-3203 ;
    askg-onto:index "20"^^xsd:int .

askg-data:Paper-978f1c811f3bfb5d-Section-3-Paragraph-320-Sentence-3201 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "Example: streams Aω."@en ;
    askg-onto:inSentence "Example: streams Aω."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-concept,
        askg-data:Entity-streams_a%CF%89 .

askg-data:Paper-978f1c811f3bfb5d-Section-3-Paragraph-320-Sentence-3202 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "We use hd and tl to access components of a stream."@en ;
    askg-onto:inSentence "We use hd and tl to access components of a stream."^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-components,
        askg-data:Entity-hd,
        askg-data:Entity-tl .

askg-data:Paper-978f1c811f3bfb5d-Section-3-Paragraph-320-Sentence-3203 a askg-onto:Sentence ;
    rdfs:label "Sentence 3"@en ;
    domo:Text "out = hhd,tli : Aω → A × Aω, while out−1ha,αi = a \\# α."@en ;
    askg-onto:inSentence "out = hhd,tli : Aω → A × Aω, while out−1ha,αi = a \\# α."^^xsd:string ;
    askg-onto:index "3"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-a%CF%89,
        askg-data:Entity-a__a%CF%89 .

askg-data:Paper-978f1c811f3bfb5d-Section-3-Paragraph-321 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 21"@en ;
    domo:Text "Example: PAB ∆= (ν X) TA(B × X), defined in section 3."@en ;
    askg-onto:hasSentence askg-data:Paper-978f1c811f3bfb5d-Section-3-Paragraph-321-Sentence-3211 ;
    askg-onto:index "21"^^xsd:int .

askg-data:Paper-978f1c811f3bfb5d-Section-3-Paragraph-321-Sentence-3211 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "Example: PAB ∆= (ν X) TA(B × X), defined in section 3."@en ;
    askg-onto:inSentence "Example: PAB ∆= (ν X) TA(B × X), defined in section 3."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-pab,
        askg-data:Entity-section_3 .

askg-data:Paper-978f1c811f3bfb5d-Section-3-Paragraph-33 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 3"@en ;
    domo:Text "We use Greek letters α, β**, . . . as variables over stream types. We overload the infix** operator (\\#) (with section notation) our basic means of constructing both streams and nonempty lists. Thus if a : A, then the following functions prefix a **to streams and to lists.** (a \\#) : Aω ⇒ Aω(a \\#) : A∗ ⇒ A∗ We also have the empty list ⋄ : A∗."@en ;
    askg-onto:hasSentence askg-data:Paper-978f1c811f3bfb5d-Section-3-Paragraph-33-Sentence-331,
        askg-data:Paper-978f1c811f3bfb5d-Section-3-Paragraph-33-Sentence-332,
        askg-data:Paper-978f1c811f3bfb5d-Section-3-Paragraph-33-Sentence-333,
        askg-data:Paper-978f1c811f3bfb5d-Section-3-Paragraph-33-Sentence-334,
        askg-data:Paper-978f1c811f3bfb5d-Section-3-Paragraph-33-Sentence-335,
        askg-data:Paper-978f1c811f3bfb5d-Section-3-Paragraph-33-Sentence-336 ;
    askg-onto:index "3"^^xsd:int .

askg-data:Paper-978f1c811f3bfb5d-Section-3-Paragraph-33-Sentence-331 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "We use Greek letters α, β**, ."@en ;
    askg-onto:inSentence "We use Greek letters α, β**, ."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-%CE%B1_%CE%B2,
        askg-data:Entity-greek_letters .

askg-data:Paper-978f1c811f3bfb5d-Section-3-Paragraph-33-Sentence-332 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "."@en ;
    askg-onto:inSentence "."^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-article,
        askg-data:Entity-dataset,
        askg-data:Entity-device,
        askg-data:Entity-experiment,
        askg-data:Entity-finding,
        askg-data:Entity-method,
        askg-data:Entity-organization,
        askg-data:Entity-research,
        askg-data:Entity-researcher,
        askg-data:Entity-technology .

askg-data:Paper-978f1c811f3bfb5d-Section-3-Paragraph-33-Sentence-333 a askg-onto:Sentence ;
    rdfs:label "Sentence 3"@en ;
    domo:Text "."@en ;
    askg-onto:inSentence "."^^xsd:string ;
    askg-onto:index "3"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-combining_data,
        askg-data:Entity-data_integration,
        askg-data:Entity-knowledge_graph,
        askg-data:Entity-research,
        askg-data:Entity-science,
        askg-data:Entity-technology .

askg-data:Paper-978f1c811f3bfb5d-Section-3-Paragraph-33-Sentence-334 a askg-onto:Sentence ;
    rdfs:label "Sentence 4"@en ;
    domo:Text "as variables over stream types."@en ;
    askg-onto:inSentence "as variables over stream types."^^xsd:string ;
    askg-onto:index "4"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-stream_types,
        askg-data:Entity-variables .

askg-data:Paper-978f1c811f3bfb5d-Section-3-Paragraph-33-Sentence-335 a askg-onto:Sentence ;
    rdfs:label "Sentence 5"@en ;
    domo:Text "We overload the infix** operator (\\#) (with section notation) our basic means of constructing both streams and nonempty lists."@en ;
    askg-onto:inSentence "We overload the infix** operator (\\#) (with section notation) our basic means of constructing both streams and nonempty lists."^^xsd:string ;
    askg-onto:index "5"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-infix_operator_,
        askg-data:Entity-streams_and_nonempty_lists .

askg-data:Paper-978f1c811f3bfb5d-Section-3-Paragraph-33-Sentence-336 a askg-onto:Sentence ;
    rdfs:label "Sentence 6"@en ;
    domo:Text "Thus if a : A, then the following functions prefix a **to streams and to lists.** (a \\#) : Aω ⇒ Aω(a \\#) : A∗ ⇒ A∗ We also have the empty list ⋄ : A∗."@en ;
    askg-onto:inSentence "Thus if a : A, then the following functions prefix a **to streams and to lists.** (a \\#) : Aω ⇒ Aω(a \\#) : A∗ ⇒ A∗ We also have the empty list ⋄ : A∗."^^xsd:string ;
    askg-onto:index "6"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-lists,
        askg-data:Entity-streams .

askg-data:Paper-978f1c811f3bfb5d-Section-3-Paragraph-34 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 4"@en ;
    domo:Text "As destructors of streams we use hd and tl."@en ;
    askg-onto:hasSentence askg-data:Paper-978f1c811f3bfb5d-Section-3-Paragraph-34-Sentence-341 ;
    askg-onto:index "4"^^xsd:int .

askg-data:Paper-978f1c811f3bfb5d-Section-3-Paragraph-34-Sentence-341 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "As destructors of streams we use hd and tl."@en ;
    askg-onto:inSentence "As destructors of streams we use hd and tl."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-destructor_of_streams,
        askg-data:Entity-hd,
        askg-data:Entity-tl .

askg-data:Paper-978f1c811f3bfb5d-Section-3-Paragraph-35 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 5"@en ;
    domo:Text "hd : Aω → A tl : Aω → Aω For all a : A and α : Aω **we have** hd(a \\# ) = a : A tl( \\#α) = α : Aω α = (hd α)\\#(tl α) : Aω Here we have for clarity written **for parts of expressions that need not be named. The** destructors hd and tl **are used implicitly in pattern-matching definitions.** We sometimes write α0 for hd α**, and** α ′for tl α."@en ;
    askg-onto:hasSentence askg-data:Paper-978f1c811f3bfb5d-Section-3-Paragraph-35-Sentence-351,
        askg-data:Paper-978f1c811f3bfb5d-Section-3-Paragraph-35-Sentence-352 ;
    askg-onto:index "5"^^xsd:int .

askg-data:Paper-978f1c811f3bfb5d-Section-3-Paragraph-35-Sentence-351 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "hd : Aω → A tl : Aω → Aω For all a : A and α : Aω **we have** hd(a \\# ) = a : A tl( \\#α) = α : Aω α = (hd α)\\#(tl α) : Aω Here we have for clarity written **for parts of expressions that need not be named."@en ;
    askg-onto:inSentence "hd : Aω → A tl : Aω → Aω For all a : A and α : Aω **we have** hd(a \\# ) = a : A tl( \\#α) = α : Aω α = (hd α)\\#(tl α) : Aω Here we have for clarity written **for parts of expressions that need not be named."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-%CE%B1,
        askg-data:Entity-a,
        askg-data:Entity-a%CF%89,
        askg-data:Entity-hd,
        askg-data:Entity-hd_%CE%B1tl_%CE%B1,
        askg-data:Entity-tl .

askg-data:Paper-978f1c811f3bfb5d-Section-3-Paragraph-35-Sentence-352 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "The** destructors hd and tl **are used implicitly in pattern-matching definitions.** We sometimes write α0 for hd α**, and** α ′for tl α."@en ;
    askg-onto:inSentence "The** destructors hd and tl **are used implicitly in pattern-matching definitions.** We sometimes write α0 for hd α**, and** α ′for tl α."^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-%CE%B1,
        askg-data:Entity-%CE%B10,
        askg-data:Entity-destructors,
        askg-data:Entity-hd,
        askg-data:Entity-pattern-matching_definitions,
        askg-data:Entity-tl .

askg-data:Paper-978f1c811f3bfb5d-Section-3-Paragraph-36 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 6"@en ;
    domo:Text "We use the function **() :** Aω → (A∗) ω **which returns the stream of finite prefixes of its** argument. It is defined by α(0) = ⋄ and α(n + 1) = α(0)\\#(α′)(n)."@en ;
    askg-onto:hasSentence askg-data:Paper-978f1c811f3bfb5d-Section-3-Paragraph-36-Sentence-361,
        askg-data:Paper-978f1c811f3bfb5d-Section-3-Paragraph-36-Sentence-362 ;
    askg-onto:index "6"^^xsd:int .

askg-data:Paper-978f1c811f3bfb5d-Section-3-Paragraph-36-Sentence-361 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "We use the function **() :** Aω → (A∗) ω **which returns the stream of finite prefixes of its** argument."@en ;
    askg-onto:inSentence "We use the function **() :** Aω → (A∗) ω **which returns the stream of finite prefixes of its** argument."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-function,
        askg-data:Entity-stream_of_finite_prefixes .

askg-data:Paper-978f1c811f3bfb5d-Section-3-Paragraph-36-Sentence-362 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "It is defined by α(0) = ⋄ and α(n + 1) = α(0)\\#(α′)(n)."@en ;
    askg-onto:inSentence "It is defined by α(0) = ⋄ and α(n + 1) = α(0)\\#(α′)(n)."^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-,
        askg-data:Entity-%CE%B10,
        askg-data:Entity-%CE%B10%0A%CE%B1n,
        askg-data:Entity-%CE%B1n__1 .

askg-data:Paper-978f1c811f3bfb5d-Section-3-Paragraph-37 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 7"@en ;
    domo:Text "Streams are endowed with a topology in which the neighbourhoods are given by finite sequences c : A∗. Each such represents the predicate N c = {α | c = α(len c) } **of streams** sharing prefix c. We usually suppress the distinction between c : A∗ and N c ⊆ Aω**. The** relation α ∈ N c **can be defined by recursion on list** c."@en ;
    askg-onto:hasSentence askg-data:Paper-978f1c811f3bfb5d-Section-3-Paragraph-37-Sentence-371,
        askg-data:Paper-978f1c811f3bfb5d-Section-3-Paragraph-37-Sentence-372,
        askg-data:Paper-978f1c811f3bfb5d-Section-3-Paragraph-37-Sentence-373,
        askg-data:Paper-978f1c811f3bfb5d-Section-3-Paragraph-37-Sentence-374 ;
    askg-onto:index "7"^^xsd:int .

askg-data:Paper-978f1c811f3bfb5d-Section-3-Paragraph-37-Sentence-371 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "Streams are endowed with a topology in which the neighbourhoods are given by finite sequences c : A∗."@en ;
    askg-onto:inSentence "Streams are endowed with a topology in which the neighbourhoods are given by finite sequences c : A∗."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-a_topology,
        askg-data:Entity-finite_sequences,
        askg-data:Entity-streams,
        askg-data:Entity-the_neighbourhoods .

askg-data:Paper-978f1c811f3bfb5d-Section-3-Paragraph-37-Sentence-372 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "Each such represents the predicate N c = {α | c = α(len c) } **of streams** sharing prefix c."@en ;
    askg-onto:inSentence "Each such represents the predicate N c = {α | c = α(len c) } **of streams** sharing prefix c."^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-c,
        askg-data:Entity-streams .

askg-data:Paper-978f1c811f3bfb5d-Section-3-Paragraph-37-Sentence-373 a askg-onto:Sentence ;
    rdfs:label "Sentence 3"@en ;
    domo:Text "We usually suppress the distinction between c : A∗ and N c ⊆ Aω**."@en ;
    askg-onto:inSentence "We usually suppress the distinction between c : A∗ and N c ⊆ Aω**."^^xsd:string ;
    askg-onto:index "3"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-c__a,
        askg-data:Entity-n_c__a%CF%89 .

askg-data:Paper-978f1c811f3bfb5d-Section-3-Paragraph-37-Sentence-374 a askg-onto:Sentence ;
    rdfs:label "Sentence 4"@en ;
    domo:Text "The** relation α ∈ N c **can be defined by recursion on list** c."@en ;
    askg-onto:inSentence "The** relation α ∈ N c **can be defined by recursion on list** c."^^xsd:string ;
    askg-onto:index "4"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-recursion_on_list_c,
        askg-data:Entity-relation_%CE%B1 .

askg-data:Paper-978f1c811f3bfb5d-Section-3-Paragraph-38 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 8"@en ;
    domo:Text "We use ⇒ for the continuous function space. Thus Aω ⇒ X **consists of the continuous** functions from Aωto X, where X is either a discrete space D, or a space Dω **where** D is discrete."@en ;
    askg-onto:hasSentence askg-data:Paper-978f1c811f3bfb5d-Section-3-Paragraph-38-Sentence-381,
        askg-data:Paper-978f1c811f3bfb5d-Section-3-Paragraph-38-Sentence-382 ;
    askg-onto:index "8"^^xsd:int .

askg-data:Paper-978f1c811f3bfb5d-Section-3-Paragraph-38-Sentence-381 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "We use ⇒ for the continuous function space."@en ;
    askg-onto:inSentence "We use ⇒ for the continuous function space."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-,
        askg-data:Entity-continuous_function_space .

askg-data:Paper-978f1c811f3bfb5d-Section-3-Paragraph-38-Sentence-382 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "Thus Aω ⇒ X **consists of the continuous** functions from Aωto X, where X is either a discrete space D, or a space Dω **where** D is discrete."@en ;
    askg-onto:inSentence "Thus Aω ⇒ X **consists of the continuous** functions from Aωto X, where X is either a discrete space D, or a space Dω **where** D is discrete."^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-a%CF%89,
        askg-data:Entity-continuous_functions_from_a%CF%89_to_x,
        askg-data:Entity-d,
        askg-data:Entity-discrete,
        askg-data:Entity-discrete_space_d,
        askg-data:Entity-space_d%CF%89,
        askg-data:Entity-x .

askg-data:Paper-978f1c811f3bfb5d-Section-3-Paragraph-39 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 9"@en ;
    domo:Text "- A discrete valued continuous function f : Aω → D is continuous at α : Aω**if there is some** neighbourhood of α throughout which f **is constant. In other words, there exists** n ∈ ω such that f has the same value throughout the neighbourhood α n."@en ;
    askg-onto:hasSentence askg-data:Paper-978f1c811f3bfb5d-Section-3-Paragraph-39-Sentence-391,
        askg-data:Paper-978f1c811f3bfb5d-Section-3-Paragraph-39-Sentence-392 ;
    askg-onto:index "9"^^xsd:int .

askg-data:Paper-978f1c811f3bfb5d-Section-3-Paragraph-39-Sentence-391 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "- A discrete valued continuous function f : Aω → D is continuous at α : Aω**if there is some** neighbourhood of α throughout which f **is constant."@en ;
    askg-onto:inSentence "- A discrete valued continuous function f : Aω → D is continuous at α : Aω**if there is some** neighbourhood of α throughout which f **is constant."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-%CE%B1,
        askg-data:Entity-f,
        askg-data:Entity-function_f .

askg-data:Paper-978f1c811f3bfb5d-Section-3-Paragraph-39-Sentence-392 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "In other words, there exists** n ∈ ω such that f has the same value throughout the neighbourhood α n."@en ;
    askg-onto:inSentence "In other words, there exists** n ∈ ω such that f has the same value throughout the neighbourhood α n."^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-f,
        askg-data:Entity-neighbourhood_%CE%B1_n .

askg-data:Paper-978f1c811f3bfb5d-Section-4 a askg-onto:Section ;
    rdfs:label "Section 4"@en ;
    domo:Text "2. **Discrete Codomain**"@en ;
    askg-onto:hasParagraph askg-data:Paper-978f1c811f3bfb5d-Section-4-Paragraph-41,
        askg-data:Paper-978f1c811f3bfb5d-Section-4-Paragraph-410,
        askg-data:Paper-978f1c811f3bfb5d-Section-4-Paragraph-411,
        askg-data:Paper-978f1c811f3bfb5d-Section-4-Paragraph-42,
        askg-data:Paper-978f1c811f3bfb5d-Section-4-Paragraph-43,
        askg-data:Paper-978f1c811f3bfb5d-Section-4-Paragraph-44,
        askg-data:Paper-978f1c811f3bfb5d-Section-4-Paragraph-45,
        askg-data:Paper-978f1c811f3bfb5d-Section-4-Paragraph-46,
        askg-data:Paper-978f1c811f3bfb5d-Section-4-Paragraph-47,
        askg-data:Paper-978f1c811f3bfb5d-Section-4-Paragraph-48,
        askg-data:Paper-978f1c811f3bfb5d-Section-4-Paragraph-49 ;
    askg-onto:index "4"^^xsd:int ;
    askg-onto:level "2"^^xsd:int .

askg-data:Paper-978f1c811f3bfb5d-Section-4-Paragraph-41 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 1"@en ;
    domo:Text "Recall (from section 1.2) that TAB∆= (µ X) B + XA**. In this section we define a** function eat of type TAB → Aω → B × Aω**that allows us to represent continuous functions** in Aω ⇒ B using elements of TAB**. Then we give a non-constructive argument that this** representation is complete."@en ;
    askg-onto:hasSentence askg-data:Paper-978f1c811f3bfb5d-Section-4-Paragraph-41-Sentence-411,
        askg-data:Paper-978f1c811f3bfb5d-Section-4-Paragraph-41-Sentence-412,
        askg-data:Paper-978f1c811f3bfb5d-Section-4-Paragraph-41-Sentence-413 ;
    askg-onto:index "1"^^xsd:int .

askg-data:Paper-978f1c811f3bfb5d-Section-4-Paragraph-41-Sentence-411 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "Recall (from section 1.2) that TAB∆= (µ X) B + XA**."@en ;
    askg-onto:inSentence "Recall (from section 1.2) that TAB∆= (µ X) B + XA**."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-%C2%B5_x_b__xa,
        askg-data:Entity-tab .

askg-data:Paper-978f1c811f3bfb5d-Section-4-Paragraph-41-Sentence-412 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "In this section we define a** function eat of type TAB → Aω → B × Aω**that allows us to represent continuous functions** in Aω ⇒ B using elements of TAB**."@en ;
    askg-onto:inSentence "In this section we define a** function eat of type TAB → Aω → B × Aω**that allows us to represent continuous functions** in Aω ⇒ B using elements of TAB**."^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-a%CF%89__b,
        askg-data:Entity-continuous_functions,
        askg-data:Entity-elements,
        askg-data:Entity-function_eat,
        askg-data:Entity-tab,
        askg-data:Entity-tab__a%CF%89__b__a%CF%89 .

askg-data:Paper-978f1c811f3bfb5d-Section-4-Paragraph-41-Sentence-413 a askg-onto:Sentence ;
    rdfs:label "Sentence 3"@en ;
    domo:Text "Then we give a non-constructive argument that this** representation is complete."@en ;
    askg-onto:inSentence "Then we give a non-constructive argument that this** representation is complete."^^xsd:string ;
    askg-onto:index "3"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-complete,
        askg-data:Entity-representation .

askg-data:Paper-978f1c811f3bfb5d-Section-4-Paragraph-410 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 10"@en ;
    domo:Text "Starting with f : Aω → B**, we 'construct' an infinite sequence of functions without** representatives. In the first place, for some a : A, the function f ·(a \\#**) has no representative.** (Else f itself would have a representation.) By a form of the axiom of **dependent choices,** if f : Aω → B has no representative, then for some α : Aω**, none of the functions** f0 = f,f1 = f0 · (α0 \\#),f2 = f1 · (α1 \\#) = f · (α0 \\#) · (α1 \\#)**,...** have representatives. In particular, none of these functions can be constant. It follows that f is not constant in any neighbourhood of α, and so f is not continuous at α."@en ;
    askg-onto:hasSentence askg-data:Paper-978f1c811f3bfb5d-Section-4-Paragraph-410-Sentence-4101,
        askg-data:Paper-978f1c811f3bfb5d-Section-4-Paragraph-410-Sentence-4102,
        askg-data:Paper-978f1c811f3bfb5d-Section-4-Paragraph-410-Sentence-4103,
        askg-data:Paper-978f1c811f3bfb5d-Section-4-Paragraph-410-Sentence-4104 ;
    askg-onto:index "10"^^xsd:int .

askg-data:Paper-978f1c811f3bfb5d-Section-4-Paragraph-410-Sentence-4101 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "Starting with f : Aω → B**, we 'construct' an infinite sequence of functions without** representatives."@en ;
    askg-onto:inSentence "Starting with f : Aω → B**, we 'construct' an infinite sequence of functions without** representatives."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-a%CF%89__b,
        askg-data:Entity-f .

askg-data:Paper-978f1c811f3bfb5d-Section-4-Paragraph-410-Sentence-4102 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "In the first place, for some a : A, the function f ·(a \\#**) has no representative.** (Else f itself would have a representation.) By a form of the axiom of **dependent choices,** if f : Aω → B has no representative, then for some α : Aω**, none of the functions** f0 = f,f1 = f0 · (α0 \\#),f2 = f1 · (α1 \\#) = f · (α0 \\#) · (α1 \\#)**,...** have representatives."@en ;
    askg-onto:inSentence "In the first place, for some a : A, the function f ·(a \\#**) has no representative.** (Else f itself would have a representation.) By a form of the axiom of **dependent choices,** if f : Aω → B has no representative, then for some α : Aω**, none of the functions** f0 = f,f1 = f0 · (α0 \\#),f2 = f1 · (α1 \\#) = f · (α0 \\#) · (α1 \\#)**,...** have representatives."^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-axiom_of_dependent_choices,
        askg-data:Entity-f__a%CF%89__b,
        askg-data:Entity-function_f_a_,
        askg-data:Entity-functions_f0__ff1__f0__%CE%B10_f2__f1__%CE%B11___f__%CE%B10___%CE%B11_ .

askg-data:Paper-978f1c811f3bfb5d-Section-4-Paragraph-410-Sentence-4103 a askg-onto:Sentence ;
    rdfs:label "Sentence 3"@en ;
    domo:Text "In particular, none of these functions can be constant."@en ;
    askg-onto:inSentence "In particular, none of these functions can be constant."^^xsd:string ;
    askg-onto:index "3"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-constant,
        askg-data:Entity-functions .

askg-data:Paper-978f1c811f3bfb5d-Section-4-Paragraph-410-Sentence-4104 a askg-onto:Sentence ;
    rdfs:label "Sentence 4"@en ;
    domo:Text "It follows that f is not constant in any neighbourhood of α, and so f is not continuous at α."@en ;
    askg-onto:inSentence "It follows that f is not constant in any neighbourhood of α, and so f is not continuous at α."^^xsd:string ;
    askg-onto:index "4"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-%CE%B1,
        askg-data:Entity-f,
        askg-data:Entity-neighbourhood_of_%CE%B1 .

askg-data:Paper-978f1c811f3bfb5d-Section-4-Paragraph-411 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 11"@en ;
    domo:Text "The structure of this proof is discussed in Dummett [4, pp 49–55], and Troelstra and van Dalen [20, 8.7, p227]. Of course, there are other proofs that do not make use of constructively illicit forms of contraposition. For example, there seem to be proofs that use instead monotone bar-induction, and are arguably intuitionistically valid. However as indicated by Tait in [18, pp 194–196], the best we can hope to achieve from a constructive point of view is to find models of suitable systems of constructive reasoning to which we have adjoined an axiom asserting that a function of type Aω → B **continuous in the weak** ǫ−δ sense is always continuous in the strong inductive sense. It **is to be expected that such** a model would refute Church's thesis."@en ;
    askg-onto:hasSentence askg-data:Paper-978f1c811f3bfb5d-Section-4-Paragraph-411-Sentence-4111,
        askg-data:Paper-978f1c811f3bfb5d-Section-4-Paragraph-411-Sentence-4112,
        askg-data:Paper-978f1c811f3bfb5d-Section-4-Paragraph-411-Sentence-4113,
        askg-data:Paper-978f1c811f3bfb5d-Section-4-Paragraph-411-Sentence-4114,
        askg-data:Paper-978f1c811f3bfb5d-Section-4-Paragraph-411-Sentence-4115 ;
    askg-onto:index "11"^^xsd:int .

askg-data:Paper-978f1c811f3bfb5d-Section-4-Paragraph-411-Sentence-4111 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "The structure of this proof is discussed in Dummett [4, pp 49–55], and Troelstra and van Dalen [20, 8.7, p227]."@en ;
    askg-onto:inSentence "The structure of this proof is discussed in Dummett [4, pp 49–55], and Troelstra and van Dalen [20, 8.7, p227]."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-dummett,
        askg-data:Entity-proof_structure,
        askg-data:Entity-troelstra_and_van_dalen .

askg-data:Paper-978f1c811f3bfb5d-Section-4-Paragraph-411-Sentence-4112 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "Of course, there are other proofs that do not make use of constructively illicit forms of contraposition."@en ;
    askg-onto:inSentence "Of course, there are other proofs that do not make use of constructively illicit forms of contraposition."^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-constructively_illicit_forms_of_contraposition,
        askg-data:Entity-proofs .

askg-data:Paper-978f1c811f3bfb5d-Section-4-Paragraph-411-Sentence-4113 a askg-onto:Sentence ;
    rdfs:label "Sentence 3"@en ;
    domo:Text "For example, there seem to be proofs that use instead monotone bar-induction, and are arguably intuitionistically valid."@en ;
    askg-onto:inSentence "For example, there seem to be proofs that use instead monotone bar-induction, and are arguably intuitionistically valid."^^xsd:string ;
    askg-onto:index "3"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-monotone_bar-induction,
        askg-data:Entity-proofs .

askg-data:Paper-978f1c811f3bfb5d-Section-4-Paragraph-411-Sentence-4114 a askg-onto:Sentence ;
    rdfs:label "Sentence 4"@en ;
    domo:Text "However as indicated by Tait in [18, pp 194–196], the best we can hope to achieve from a constructive point of view is to find models of suitable systems of constructive reasoning to which we have adjoined an axiom asserting that a function of type Aω → B **continuous in the weak** ǫ−δ sense is always continuous in the strong inductive sense."@en ;
    askg-onto:inSentence "However as indicated by Tait in [18, pp 194–196], the best we can hope to achieve from a constructive point of view is to find models of suitable systems of constructive reasoning to which we have adjoined an axiom asserting that a function of type Aω → B **continuous in the weak** ǫ−δ sense is always continuous in the strong inductive sense."^^xsd:string ;
    askg-onto:index "4"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-constructive_reasoning,
        askg-data:Entity-continuous_in_the_strong_inductive_sense,
        askg-data:Entity-continuous_in_the_weak_%C7%AB%CE%B4_sense,
        askg-data:Entity-function_of_type_a%CF%89__b,
        askg-data:Entity-tait .

askg-data:Paper-978f1c811f3bfb5d-Section-4-Paragraph-411-Sentence-4115 a askg-onto:Sentence ;
    rdfs:label "Sentence 5"@en ;
    domo:Text "It **is to be expected that such** a model would refute Church's thesis."@en ;
    askg-onto:inSentence "It **is to be expected that such** a model would refute Church's thesis."^^xsd:string ;
    askg-onto:index "5"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-churchs_thesis,
        askg-data:Entity-model .

askg-data:Paper-978f1c811f3bfb5d-Section-4-Paragraph-42 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 2"@en ;
    domo:Text "2.1. Definition of eat. Let MAB ∆= Aω → (B × Aω**) be the state monad, with state set** Aω**. (The state is the suffix of the input stream that remains unread.) The unit and bind** (infix >>**=) operators of the state monad are as follows.**"@en ;
    askg-onto:hasSentence askg-data:Paper-978f1c811f3bfb5d-Section-4-Paragraph-42-Sentence-421,
        askg-data:Paper-978f1c811f3bfb5d-Section-4-Paragraph-42-Sentence-422,
        askg-data:Paper-978f1c811f3bfb5d-Section-4-Paragraph-42-Sentence-423,
        askg-data:Paper-978f1c811f3bfb5d-Section-4-Paragraph-42-Sentence-424 ;
    askg-onto:index "2"^^xsd:int .

askg-data:Paper-978f1c811f3bfb5d-Section-4-Paragraph-42-Sentence-421 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "2.1."@en ;
    askg-onto:inSentence "2.1."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-21,
        askg-data:Entity-triple .

askg-data:Paper-978f1c811f3bfb5d-Section-4-Paragraph-42-Sentence-422 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "Definition of eat."@en ;
    askg-onto:inSentence "Definition of eat."^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-definition,
        askg-data:Entity-eat .

askg-data:Paper-978f1c811f3bfb5d-Section-4-Paragraph-42-Sentence-423 a askg-onto:Sentence ;
    rdfs:label "Sentence 3"@en ;
    domo:Text "Let MAB ∆= Aω → (B × Aω**) be the state monad, with state set** Aω**."@en ;
    askg-onto:inSentence "Let MAB ∆= Aω → (B × Aω**) be the state monad, with state set** Aω**."^^xsd:string ;
    askg-onto:index "3"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-a%CF%89,
        askg-data:Entity-a%CF%89__b__a%CF%89,
        askg-data:Entity-mab,
        askg-data:Entity-state_monad .

askg-data:Paper-978f1c811f3bfb5d-Section-4-Paragraph-42-Sentence-424 a askg-onto:Sentence ;
    rdfs:label "Sentence 4"@en ;
    domo:Text "(The state is the suffix of the input stream that remains unread.) The unit and bind** (infix >>**=) operators of the state monad are as follows.**"@en ;
    askg-onto:inSentence "(The state is the suffix of the input stream that remains unread.) The unit and bind** (infix >>**=) operators of the state monad are as follows.**"^^xsd:string ;
    askg-onto:index "4"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-state_monad,
        askg-data:Entity-unit_and_bind_operators .

askg-data:Paper-978f1c811f3bfb5d-Section-4-Paragraph-43 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 3"@en ;
    domo:Text "$\\eta:B\\to M_{A}B$ $(\\gg\\equiv):M_{A}B\\to(B\\to M_{A}C)\\to M_{A}C$ $\\eta(b)\\stackrel{{\\Delta}}{{=}}(\\lambda\\,\\alpha)\\,\\langle b,\\alpha\\rangle$ $(m\\gg=f)\\stackrel{{\\Delta}}{{=}}(\\lambda\\,\\alpha)\\,\\mbox{\\bf let}\\,\\langle i,\\alpha^{\\prime}\\rangle=m\\alpha\\,\\,\\mbox{\\bf in}\\,\\,\\,f(i,\\alpha^{\\prime})$. Note that MA **supports the operation of reading one input:**"@en ;
    askg-onto:hasSentence askg-data:Paper-978f1c811f3bfb5d-Section-4-Paragraph-43-Sentence-431,
        askg-data:Paper-978f1c811f3bfb5d-Section-4-Paragraph-43-Sentence-432 ;
    askg-onto:index "3"^^xsd:int .

askg-data:Paper-978f1c811f3bfb5d-Section-4-Paragraph-43-Sentence-431 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "$\\eta:B\\to M_{A}B$ $(\\gg\\equiv):M_{A}B\\to(B\\to M_{A}C)\\to M_{A}C$ $\\eta(b)\\stackrel{{\\Delta}}{{=}}(\\lambda\\,\\alpha)\\,\\langle b,\\alpha\\rangle$ $(m\\gg=f)\\stackrel{{\\Delta}}{{=}}(\\lambda\\,\\alpha)\\,\\mbox{\\bf let}\\,\\langle i,\\alpha^{\\prime}\\rangle=m\\alpha\\,\\,\\mbox{\\bf in}\\,\\,\\,f(i,\\alpha^{\\prime})$."@en ;
    askg-onto:inSentence "$\\eta:B\\to M_{A}B$ $(\\gg\\equiv):M_{A}B\\to(B\\to M_{A}C)\\to M_{A}C$ $\\eta(b)\\stackrel{{\\Delta}}{{=}}(\\lambda\\,\\alpha)\\,\\langle b,\\alpha\\rangle$ $(m\\gg=f)\\stackrel{{\\Delta}}{{=}}(\\lambda\\,\\alpha)\\,\\mbox{\\bf let}\\,\\langle i,\\alpha^{\\prime}\\rangle=m\\alpha\\,\\,\\mbox{\\bf in}\\,\\,\\,f(i,\\alpha^{\\prime})$."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-%09extlambdaalphalangle_balpharangle,
        askg-data:Entity-%09extlambdaalphatextletlangle_ialphaprimeranglemalphatextinfialphaprime,
        askg-data:Entity-%CE%B7,
        askg-data:Entity-%CE%B7b,
        askg-data:Entity-b%09o_m_ac%09o_m_ac,
        askg-data:Entity-m_ab,
        askg-data:Entity-mggf .

askg-data:Paper-978f1c811f3bfb5d-Section-4-Paragraph-43-Sentence-432 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "Note that MA **supports the operation of reading one input:**"@en ;
    askg-onto:inSentence "Note that MA **supports the operation of reading one input:**"^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-ma,
        askg-data:Entity-reading_one_input .

askg-data:Paper-978f1c811f3bfb5d-Section-4-Paragraph-44 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 4"@en ;
    domo:Text "$$\\begin{array}{l}{{A A}}\\\\ {{\\langle\\alpha_{0},\\alpha^{\\prime}\\rangle}}\\end{array}$$"@en ;
    askg-onto:hasSentence askg-data:Paper-978f1c811f3bfb5d-Section-4-Paragraph-44-Sentence-441 ;
    askg-onto:index "4"^^xsd:int .

askg-data:Paper-978f1c811f3bfb5d-Section-4-Paragraph-44-Sentence-441 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "$$\\begin{array}{l}{{A A}}\\\\ {{\\langle\\alpha_{0},\\alpha^{\\prime}\\rangle}}\\end{array}$$"@en ;
    askg-onto:inSentence "$$\\begin{array}{l}{{A A}}\\\\ {{\\langle\\alpha_{0},\\alpha^{\\prime}\\rangle}}\\end{array}$$"^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-a_a,
        askg-data:Entity-alpha_0alphaprime .

askg-data:Paper-978f1c811f3bfb5d-Section-4-Paragraph-45 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 5"@en ;
    domo:Text "get : MAA get α = hα0,α′i This function plays an important rˆole below in the guise of hhd,tli : Aω ∼= A × Aω."@en ;
    askg-onto:hasSentence askg-data:Paper-978f1c811f3bfb5d-Section-4-Paragraph-45-Sentence-451 ;
    askg-onto:index "5"^^xsd:int .

askg-data:Paper-978f1c811f3bfb5d-Section-4-Paragraph-45-Sentence-451 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "get : MAA get α = hα0,α′i This function plays an important rˆole below in the guise of hhd,tli : Aω ∼= A × Aω."@en ;
    askg-onto:inSentence "get : MAA get α = hα0,α′i This function plays an important rˆole below in the guise of hhd,tli : Aω ∼= A × Aω."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-%CE%B1__h%CE%B10%CE%B1i,
        askg-data:Entity-a%CF%89__a__a%CF%89,
        askg-data:Entity-hhdtli,
        askg-data:Entity-maa .

askg-data:Paper-978f1c811f3bfb5d-Section-4-Paragraph-46 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 6"@en ;
    domo:Text "The most straightfoward definition of eat **is by structural recursion.**"@en ;
    askg-onto:hasSentence askg-data:Paper-978f1c811f3bfb5d-Section-4-Paragraph-46-Sentence-461 ;
    askg-onto:index "6"^^xsd:int .

askg-data:Paper-978f1c811f3bfb5d-Section-4-Paragraph-46-Sentence-461 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "The most straightfoward definition of eat **is by structural recursion.**"@en ;
    askg-onto:inSentence "The most straightfoward definition of eat **is by structural recursion.**"^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-eat,
        askg-data:Entity-structural_recursion .

askg-data:Paper-978f1c811f3bfb5d-Section-4-Paragraph-47 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 7"@en ;
    domo:Text "$$\\begin{array}{r l}{e a t:T_{A}B}&{{}\\to M_{A}B}\\\\ {e a t(\\mathbf{Ret}\\,b)}&{{}=\\eta\\,b}\\\\ {e a t(\\mathbf{Get}\\,\\phi)}&{{}=g e t>=(e a t\\cdot\\phi)}\\end{array}$$"@en ;
    askg-onto:hasSentence askg-data:Paper-978f1c811f3bfb5d-Section-4-Paragraph-47-Sentence-471 ;
    askg-onto:index "7"^^xsd:int .

askg-data:Paper-978f1c811f3bfb5d-Section-4-Paragraph-47-Sentence-471 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "$$\\begin{array}{r l}{e a t:T_{A}B}&{{}\\to M_{A}B}\\\\ {e a t(\\mathbf{Ret}\\,b)}&{{}=\\eta\\,b}\\\\ {e a t(\\mathbf{Get}\\,\\phi)}&{{}=g e t>=(e a t\\cdot\\phi)}\\end{array}$$"@en ;
    askg-onto:inSentence "$$\\begin{array}{r l}{e a t:T_{A}B}&{{}\\to M_{A}B}\\\\ {e a t(\\mathbf{Ret}\\,b)}&{{}=\\eta\\,b}\\\\ {e a t(\\mathbf{Get}\\,\\phi)}&{{}=g e t>=(e a t\\cdot\\phi)}\\end{array}$$"^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-e_a_tmathbfgetphi,
        askg-data:Entity-e_a_tmathbfretb,
        askg-data:Entity-e_a_tt_ab,
        askg-data:Entity-etab,
        askg-data:Entity-g_e_te_a_tcdotphi,
        askg-data:Entity-m_ab .

askg-data:Paper-978f1c811f3bfb5d-Section-4-Paragraph-48 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 8"@en ;
    domo:Text "2.2. Completeness. **The following result is in essence well known.** Theorem 2.1. (Completeness of representation of Aω ⇒ B by TAB.) **There is a function** rep : (Aω ⇒ B) → TAB such that if f : Aω ⇒ B then π0 · (eat(rep f**)) =** f Note that rep picks a representative for a continuous function from those **that give rise** to extensionally the same function. When A **is infinite, there are uncountably many such** representatives."@en ;
    askg-onto:hasSentence askg-data:Paper-978f1c811f3bfb5d-Section-4-Paragraph-48-Sentence-481,
        askg-data:Paper-978f1c811f3bfb5d-Section-4-Paragraph-48-Sentence-482,
        askg-data:Paper-978f1c811f3bfb5d-Section-4-Paragraph-48-Sentence-483,
        askg-data:Paper-978f1c811f3bfb5d-Section-4-Paragraph-48-Sentence-484,
        askg-data:Paper-978f1c811f3bfb5d-Section-4-Paragraph-48-Sentence-485 ;
    askg-onto:index "8"^^xsd:int .

askg-data:Paper-978f1c811f3bfb5d-Section-4-Paragraph-48-Sentence-481 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "2.2."@en ;
    askg-onto:inSentence "2.2."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-22,
        askg-data:Entity-text .

askg-data:Paper-978f1c811f3bfb5d-Section-4-Paragraph-48-Sentence-482 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "Completeness."@en ;
    askg-onto:inSentence "Completeness."^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-completeness,
        askg-data:Entity-completeness_in_research .

askg-data:Paper-978f1c811f3bfb5d-Section-4-Paragraph-48-Sentence-483 a askg-onto:Sentence ;
    rdfs:label "Sentence 3"@en ;
    domo:Text "**The following result is in essence well known.** Theorem 2.1."@en ;
    askg-onto:inSentence "**The following result is in essence well known.** Theorem 2.1."^^xsd:string ;
    askg-onto:index "3"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-theorem_21,
        askg-data:Entity-well_known_result .

askg-data:Paper-978f1c811f3bfb5d-Section-4-Paragraph-48-Sentence-484 a askg-onto:Sentence ;
    rdfs:label "Sentence 4"@en ;
    domo:Text "(Completeness of representation of Aω ⇒ B by TAB.) **There is a function** rep : (Aω ⇒ B) → TAB such that if f : Aω ⇒ B then π0 · (eat(rep f**)) =** f Note that rep picks a representative for a continuous function from those **that give rise** to extensionally the same function."@en ;
    askg-onto:inSentence "(Completeness of representation of Aω ⇒ B by TAB.) **There is a function** rep : (Aω ⇒ B) → TAB such that if f : Aω ⇒ B then π0 · (eat(rep f**)) =** f Note that rep picks a representative for a continuous function from those **that give rise** to extensionally the same function."^^xsd:string ;
    askg-onto:index "4"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-a%CF%89__b,
        askg-data:Entity-a%CF%89__b__tab,
        askg-data:Entity-continuous_function,
        askg-data:Entity-extensionally_the_same_function,
        askg-data:Entity-f,
        askg-data:Entity-rep .

askg-data:Paper-978f1c811f3bfb5d-Section-4-Paragraph-48-Sentence-485 a askg-onto:Sentence ;
    rdfs:label "Sentence 5"@en ;
    domo:Text "When A **is infinite, there are uncountably many such** representatives."@en ;
    askg-onto:inSentence "When A **is infinite, there are uncountably many such** representatives."^^xsd:string ;
    askg-onto:index "5"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-a,
        askg-data:Entity-uncountably_many_representatives .

askg-data:Paper-978f1c811f3bfb5d-Section-4-Paragraph-49 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 9"@en ;
    domo:Text "Proof. (Classical) Suppose that some function f : Aω ⇒ B **has no representative. We** 'construct' an argument α : Aω at which f is not continuous. Thence, if f **is continuous at** all arguments, there exists some r : TAB such that eat(r**) equals** f."@en ;
    askg-onto:hasSentence askg-data:Paper-978f1c811f3bfb5d-Section-4-Paragraph-49-Sentence-491,
        askg-data:Paper-978f1c811f3bfb5d-Section-4-Paragraph-49-Sentence-492,
        askg-data:Paper-978f1c811f3bfb5d-Section-4-Paragraph-49-Sentence-493,
        askg-data:Paper-978f1c811f3bfb5d-Section-4-Paragraph-49-Sentence-494 ;
    askg-onto:index "9"^^xsd:int .

askg-data:Paper-978f1c811f3bfb5d-Section-4-Paragraph-49-Sentence-491 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "Proof."@en ;
    askg-onto:inSentence "Proof."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-concept,
        askg-data:Entity-proof .

askg-data:Paper-978f1c811f3bfb5d-Section-4-Paragraph-49-Sentence-492 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "(Classical) Suppose that some function f : Aω ⇒ B **has no representative."@en ;
    askg-onto:inSentence "(Classical) Suppose that some function f : Aω ⇒ B **has no representative."^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-a%CF%89__b,
        askg-data:Entity-function_f .

askg-data:Paper-978f1c811f3bfb5d-Section-4-Paragraph-49-Sentence-493 a askg-onto:Sentence ;
    rdfs:label "Sentence 3"@en ;
    domo:Text "We** 'construct' an argument α : Aω at which f is not continuous."@en ;
    askg-onto:inSentence "We** 'construct' an argument α : Aω at which f is not continuous."^^xsd:string ;
    askg-onto:index "3"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-argument_%CE%B1,
        askg-data:Entity-f_is_not_continuous .

askg-data:Paper-978f1c811f3bfb5d-Section-4-Paragraph-49-Sentence-494 a askg-onto:Sentence ;
    rdfs:label "Sentence 4"@en ;
    domo:Text "Thence, if f **is continuous at** all arguments, there exists some r : TAB such that eat(r**) equals** f."@en ;
    askg-onto:inSentence "Thence, if f **is continuous at** all arguments, there exists some r : TAB such that eat(r**) equals** f."^^xsd:string ;
    askg-onto:index "4"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-all_arguments,
        askg-data:Entity-eatr,
        askg-data:Entity-f,
        askg-data:Entity-r,
        askg-data:Entity-tab .

askg-data:Paper-978f1c811f3bfb5d-Section-5 a askg-onto:Section ;
    rdfs:label "Section 5"@en ;
    domo:Text "3. **Stream Codomain**"@en ;
    askg-onto:hasParagraph askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-51,
        askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-510,
        askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-511,
        askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-512,
        askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-513,
        askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-514,
        askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-515,
        askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-516,
        askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-517,
        askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-518,
        askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-519,
        askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-52,
        askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-520,
        askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-521,
        askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-522,
        askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-523,
        askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-524,
        askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-525,
        askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-526,
        askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-527,
        askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-528,
        askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-529,
        askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-53,
        askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-530,
        askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-531,
        askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-532,
        askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-533,
        askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-54,
        askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-55,
        askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-56,
        askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-57,
        askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-58,
        askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-59 ;
    askg-onto:index "5"^^xsd:int ;
    askg-onto:level "2"^^xsd:int .

askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-51 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 1"@en ;
    domo:Text "Recall (from section 1.2) that PAB ∆= (ν X) TA(B × X**). The previous section gave a** complete representation of discrete valued continuous functions Aω ⇒ B, where A and B are discrete. We turn now to stream-valued functions. First we define a function eat∞ **with** type PAB → Aω ⇒ Bω**. We have not been able to find a similar representation in the** literature. Then we provide it with a right-inverse rep∞."@en ;
    askg-onto:hasSentence askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-51-Sentence-511,
        askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-51-Sentence-512,
        askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-51-Sentence-513,
        askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-51-Sentence-514,
        askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-51-Sentence-515,
        askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-51-Sentence-516 ;
    askg-onto:index "1"^^xsd:int .

askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-51-Sentence-511 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "Recall (from section 1.2) that PAB ∆= (ν X) TA(B × X**)."@en ;
    askg-onto:inSentence "Recall (from section 1.2) that PAB ∆= (ν X) TA(B × X**)."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-%CE%BD_x_tab__x,
        askg-data:Entity-pab .

askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-51-Sentence-512 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "The previous section gave a** complete representation of discrete valued continuous functions Aω ⇒ B, where A and B are discrete."@en ;
    askg-onto:inSentence "The previous section gave a** complete representation of discrete valued continuous functions Aω ⇒ B, where A and B are discrete."^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-a%CF%89__b,
        askg-data:Entity-discrete_valued_continuous_functions .

askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-51-Sentence-513 a askg-onto:Sentence ;
    rdfs:label "Sentence 3"@en ;
    domo:Text "We turn now to stream-valued functions."@en ;
    askg-onto:inSentence "We turn now to stream-valued functions."^^xsd:string ;
    askg-onto:index "3"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-functions,
        askg-data:Entity-stream-valued_functions .

askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-51-Sentence-514 a askg-onto:Sentence ;
    rdfs:label "Sentence 4"@en ;
    domo:Text "First we define a function eat∞ **with** type PAB → Aω ⇒ Bω**."@en ;
    askg-onto:inSentence "First we define a function eat∞ **with** type PAB → Aω ⇒ Bω**."^^xsd:string ;
    askg-onto:index "4"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-pab__a%CF%89__b%CF%89 .

askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-51-Sentence-515 a askg-onto:Sentence ;
    rdfs:label "Sentence 5"@en ;
    domo:Text "We have not been able to find a similar representation in the** literature."@en ;
    askg-onto:inSentence "We have not been able to find a similar representation in the** literature."^^xsd:string ;
    askg-onto:index "5"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-literature .

askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-51-Sentence-516 a askg-onto:Sentence ;
    rdfs:label "Sentence 6"@en ;
    domo:Text "Then we provide it with a right-inverse rep∞."@en ;
    askg-onto:inSentence "Then we provide it with a right-inverse rep∞."^^xsd:string ;
    askg-onto:index "6"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-concept,
        askg-data:Entity-right-inverse_rep .

askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-510 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 10"@en ;
    domo:Text "$$\\begin{array}{r l}{\\mathbf{data}\\;\\,T\\,a\\,b\\;=\\;\\mathbf{Ret}\\,b\\mid\\mathbf{Get}(a\\to T\\,a\\,b)}\\\\ {e a t\\,::\\,T\\,a\\,b\\to S t r\\,a\\to(b,\\,S t r\\,a)}\\\\ {e a t\\,\\left(\\mathbf{Ret}\\,b\\right)a s}&{{}=\\;\\left(b,\\,a s\\right)}\\\\ {e a t\\,\\left(\\mathbf{Get}\\,f\\right)(a:a s)}&{{}=\\;e a t\\,\\left(f\\,a\\right)a s}\\end{array}$$ $$\\begin{array}{r l}{{\\mathrm{\\bf~data~}}P\\,a\\,b\\,=\\,\\,{\\bf P}(T\\,a\\,(b,P\\,a\\,b))}\\\\ {e a t_{\\infty}::P\\,a\\,b\\to S t r\\,a\\to S t r\\,b}\\\\ {e a t_{\\infty}\\,({\\bf P}\\,t)\\,a s\\,\\,=\\,\\,{\\mathrm{\\bf~let~}}((b,p),a s^{\\prime})=e a t\\,t\\,a s\\,{\\mathrm{\\bf~in}}}\\\\ {b\\,:\\,e a t_{\\infty}p\\,a s^{\\prime}}\\end{array}$$"@en ;
    askg-onto:hasSentence askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-510-Sentence-5101 ;
    askg-onto:index "10"^^xsd:int .

askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-510-Sentence-5101 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "$$\\begin{array}{r l}{\\mathbf{data}\\;\\,T\\,a\\,b\\;=\\;\\mathbf{Ret}\\,b\\mid\\mathbf{Get}(a\\to T\\,a\\,b)}\\\\ {e a t\\,::\\,T\\,a\\,b\\to S t r\\,a\\to(b,\\,S t r\\,a)}\\\\ {e a t\\,\\left(\\mathbf{Ret}\\,b\\right)a s}&{{}=\\;\\left(b,\\,a s\\right)}\\\\ {e a t\\,\\left(\\mathbf{Get}\\,f\\right)(a:a s)}&{{}=\\;e a t\\,\\left(f\\,a\\right)a s}\\end{array}$$ $$\\begin{array}{r l}{{\\mathrm{\\bf~data~}}P\\,a\\,b\\,=\\,\\,{\\bf P}(T\\,a\\,(b,P\\,a\\,b))}\\\\ {e a t_{\\infty}::P\\,a\\,b\\to S t r\\,a\\to S t r\\,b}\\\\ {e a t_{\\infty}\\,({\\bf P}\\,t)\\,a s\\,\\,=\\,\\,{\\mathrm{\\bf~let~}}((b,p),a s^{\\prime})=e a t\\,t\\,a s\\,{\\mathrm{\\bf~in}}}\\\\ {b\\,:\\,e a t_{\\infty}p\\,a s^{\\prime}}\\end{array}$$"@en ;
    askg-onto:inSentence "$$\\begin{array}{r l}{\\mathbf{data}\\;\\,T\\,a\\,b\\;=\\;\\mathbf{Ret}\\,b\\mid\\mathbf{Get}(a\\to T\\,a\\,b)}\\\\ {e a t\\,::\\,T\\,a\\,b\\to S t r\\,a\\to(b,\\,S t r\\,a)}\\\\ {e a t\\,\\left(\\mathbf{Ret}\\,b\\right)a s}&{{}=\\;\\left(b,\\,a s\\right)}\\\\ {e a t\\,\\left(\\mathbf{Get}\\,f\\right)(a:a s)}&{{}=\\;e a t\\,\\left(f\\,a\\right)a s}\\end{array}$$ $$\\begin{array}{r l}{{\\mathrm{\\bf~data~}}P\\,a\\,b\\,=\\,\\,{\\bf P}(T\\,a\\,(b,P\\,a\\,b))}\\\\ {e a t_{\\infty}::P\\,a\\,b\\to S t r\\,a\\to S t r\\,b}\\\\ {e a t_{\\infty}\\,({\\bf P}\\,t)\\,a s\\,\\,=\\,\\,{\\mathrm{\\bf~let~}}((b,p),a s^{\\prime})=e a t\\,t\\,a s\\,{\\mathrm{\\bf~in}}}\\\\ {b\\,:\\,e a t_{\\infty}p\\,a s^{\\prime}}\\end{array}$$"^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-data,
        askg-data:Entity-e_a_t,
        askg-data:Entity-function,
        askg-data:Entity-get,
        askg-data:Entity-p,
        askg-data:Entity-ret,
        askg-data:Entity-type .

askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-511 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 11"@en ;
    domo:Text "Remark: this definition generalises effortlessly to the case **when the codomain is an** arbitrary final coalgebra for a strong functor F **(that is, one equipped with a suitable** natural transformation strength : F X × Y → F(X × Y **)). Let** R ∆= ν(TA · F)."@en ;
    askg-onto:hasSentence askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-511-Sentence-5111,
        askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-511-Sentence-5112 ;
    askg-onto:index "11"^^xsd:int .

askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-511-Sentence-5111 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "Remark: this definition generalises effortlessly to the case **when the codomain is an** arbitrary final coalgebra for a strong functor F **(that is, one equipped with a suitable** natural transformation strength : F X × Y → F(X × Y **))."@en ;
    askg-onto:inSentence "Remark: this definition generalises effortlessly to the case **when the codomain is an** arbitrary final coalgebra for a strong functor F **(that is, one equipped with a suitable** natural transformation strength : F X × Y → F(X × Y **))."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-f_x__y__fx__y,
        askg-data:Entity-final_coalgebra,
        askg-data:Entity-natural_transformation_strength,
        askg-data:Entity-strong_functor .

askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-511-Sentence-5112 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "Let** R ∆= ν(TA · F)."@en ;
    askg-onto:inSentence "Let** R ∆= ν(TA · F)."^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-%CE%BDta__f,
        askg-data:Entity-r .

askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-512 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 12"@en ;
    domo:Text "![8_image_0.png](8_image_0.png)"@en ;
    askg-onto:hasSentence askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-512-Sentence-5121 ;
    askg-onto:index "12"^^xsd:int .

askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-512-Sentence-5121 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "![8_image_0.png](8_image_0.png)"@en ;
    askg-onto:inSentence "![8_image_0.png](8_image_0.png)"^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-ai_tools,
        askg-data:Entity-algorithm,
        askg-data:Entity-company,
        askg-data:Entity-data_processing,
        askg-data:Entity-experiment,
        askg-data:Entity-findings_on_data_privacy,
        askg-data:Entity-machine_learning,
        askg-data:Entity-publication,
        askg-data:Entity-research_area,
        askg-data:Entity-research_group,
        askg-data:Entity-statistical_analysis,
        askg-data:Entity-study_on_neural_networks,
        askg-data:Entity-university .

askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-513 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 13"@en ;
    domo:Text "Though one can thus represent functions from streams into arbitrary final coalgebras, it is not clear what a completeness result for this general representation would be. Without some serious restriction on the functor F **it does not seem possible to conjure up a useful topology** on the codomain νF**. In fact, this is possible for functors that represent a single sorted** signature of finite arity operators. We hope to substantiate **this remark in a subsequent** publication."@en ;
    askg-onto:hasSentence askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-513-Sentence-5131,
        askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-513-Sentence-5132,
        askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-513-Sentence-5133,
        askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-513-Sentence-5134 ;
    askg-onto:index "13"^^xsd:int .

askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-513-Sentence-5131 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "Though one can thus represent functions from streams into arbitrary final coalgebras, it is not clear what a completeness result for this general representation would be."@en ;
    askg-onto:inSentence "Though one can thus represent functions from streams into arbitrary final coalgebras, it is not clear what a completeness result for this general representation would be."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-final_coalgebras,
        askg-data:Entity-functions,
        askg-data:Entity-general_representation,
        askg-data:Entity-representation .

askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-513-Sentence-5132 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "Without some serious restriction on the functor F **it does not seem possible to conjure up a useful topology** on the codomain νF**."@en ;
    askg-onto:inSentence "Without some serious restriction on the functor F **it does not seem possible to conjure up a useful topology** on the codomain νF**."^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-codomain_%CE%BDf,
        askg-data:Entity-functor_f .

askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-513-Sentence-5133 a askg-onto:Sentence ;
    rdfs:label "Sentence 3"@en ;
    domo:Text "In fact, this is possible for functors that represent a single sorted** signature of finite arity operators."@en ;
    askg-onto:inSentence "In fact, this is possible for functors that represent a single sorted** signature of finite arity operators."^^xsd:string ;
    askg-onto:index "3"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-a_single_sorted_signature_of_finite_arity_operators,
        askg-data:Entity-functors .

askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-513-Sentence-5134 a askg-onto:Sentence ;
    rdfs:label "Sentence 4"@en ;
    domo:Text "We hope to substantiate **this remark in a subsequent** publication."@en ;
    askg-onto:inSentence "We hope to substantiate **this remark in a subsequent** publication."^^xsd:string ;
    askg-onto:index "4"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-a_subsequent_publication,
        askg-data:Entity-this_remark .

askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-514 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 14"@en ;
    domo:Text "3.2. Definition of rep∞. The function eat∞ **allows us to interpret an element of the** datatype PAB as a continuous function in Aω ⇒ Bω. Now we define a function rep∞ that picks a representative for any such continuous function. In the following subsection, we'll show that rep∞ is right-inverse to eat∞."@en ;
    askg-onto:hasSentence askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-514-Sentence-5141,
        askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-514-Sentence-5142,
        askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-514-Sentence-5143,
        askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-514-Sentence-5144,
        askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-514-Sentence-5145 ;
    askg-onto:index "14"^^xsd:int .

askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-514-Sentence-5141 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "3.2."@en ;
    askg-onto:inSentence "3.2."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-32 .

askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-514-Sentence-5142 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "Definition of rep∞."@en ;
    askg-onto:inSentence "Definition of rep∞."^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-concept,
        askg-data:Entity-rep .

askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-514-Sentence-5143 a askg-onto:Sentence ;
    rdfs:label "Sentence 3"@en ;
    domo:Text "The function eat∞ **allows us to interpret an element of the** datatype PAB as a continuous function in Aω ⇒ Bω."@en ;
    askg-onto:inSentence "The function eat∞ **allows us to interpret an element of the** datatype PAB as a continuous function in Aω ⇒ Bω."^^xsd:string ;
    askg-onto:index "3"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-continuous_function_in_a%CF%89__b%CF%89,
        askg-data:Entity-datatype_pab,
        askg-data:Entity-eat .

askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-514-Sentence-5144 a askg-onto:Sentence ;
    rdfs:label "Sentence 4"@en ;
    domo:Text "Now we define a function rep∞ that picks a representative for any such continuous function."@en ;
    askg-onto:inSentence "Now we define a function rep∞ that picks a representative for any such continuous function."^^xsd:string ;
    askg-onto:index "4"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-function_rep,
        askg-data:Entity-representative .

askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-514-Sentence-5145 a askg-onto:Sentence ;
    rdfs:label "Sentence 5"@en ;
    domo:Text "In the following subsection, we'll show that rep∞ is right-inverse to eat∞."@en ;
    askg-onto:inSentence "In the following subsection, we'll show that rep∞ is right-inverse to eat∞."^^xsd:string ;
    askg-onto:index "5"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-eat,
        askg-data:Entity-rep .

askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-515 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 15"@en ;
    domo:Text "As the codomain of rep∞ **is to be the carrier of a final coalgebra for the functor** TA(B× ), we define rep∞ as the (unique) coalgebra morphism from a coalgebra for the same functor with carrier Aω ⇒ Bω, namely ρ · τ **in the following diagram.**"@en ;
    askg-onto:hasSentence askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-515-Sentence-5151 ;
    askg-onto:index "15"^^xsd:int .

askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-515-Sentence-5151 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "As the codomain of rep∞ **is to be the carrier of a final coalgebra for the functor** TA(B× ), we define rep∞ as the (unique) coalgebra morphism from a coalgebra for the same functor with carrier Aω ⇒ Bω, namely ρ · τ **in the following diagram.**"@en ;
    askg-onto:inSentence "As the codomain of rep∞ **is to be the carrier of a final coalgebra for the functor** TA(B× ), we define rep∞ as the (unique) coalgebra morphism from a coalgebra for the same functor with carrier Aω ⇒ Bω, namely ρ · τ **in the following diagram.**"^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-%CF%81__%CF%84,
        askg-data:Entity-coalgebra_for_the_same_functor_with_carrier_a%CF%89__b%CF%89,
        askg-data:Entity-coalgebra_morphism_from_a_coalgebra_for_the_same_functor_with_carrier_a%CF%89__b%CF%89,
        askg-data:Entity-final_coalgebra_for_the_functor_tab_,
        askg-data:Entity-rep .

askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-516 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 16"@en ;
    domo:Text "(Aω ⇒ Bω)rep∞ / $$\\mathbf{\\partial}=P_{A}B$$"@en ;
    askg-onto:hasSentence askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-516-Sentence-5161 ;
    askg-onto:index "16"^^xsd:int .

askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-516-Sentence-5161 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "(Aω ⇒ Bω)rep∞ / $$\\mathbf{\\partial}=P_{A}B$$"@en ;
    askg-onto:inSentence "(Aω ⇒ Bω)rep∞ / $$\\mathbf{\\partial}=P_{A}B$$"^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-a%CF%89,
        askg-data:Entity-a%CF%89__b%CF%89rep,
        askg-data:Entity-b%CF%89,
        askg-data:Entity-p_ab .

askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-517 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 17"@en ;
    domo:Text "$T_{A}B\\times(A^{\\omega}\\Rightarrow B^{\\omega})$ $T_{A}(B\\times(A^{\\omega}\\Rightarrow B^{\\omega}))$$T_{A}(1\\times rep_{\\infty})$$T_{A}(B\\times P_{A}B)$ $\\tau\\varphi_{\\infty}=\\mathit{unfold}(\\rho\\cdot\\tau)$. Here $$\\tau:(A^{\\omega}\\Rightarrow B^{\\omega})\\to T_{A}B\\times(A^{\\omega}\\Rightarrow B^{\\omega})$$ $$\\tau\\,f=(\\mathit{rep}(\\mathit{hd}\\cdot f),\\mathit{tl}\\cdot f)$$ The other component $\\rho$ of the structure map of our $T_{A}\\cdot(B\\times)$-coalgebra is a fold. (For So $rep_{\\infty}=$ . clarity, we give it a more general type than we need.) It is in some sense a 'fast-forward' operation."@en ;
    askg-onto:hasSentence askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-517-Sentence-5171,
        askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-517-Sentence-5172,
        askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-517-Sentence-5173,
        askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-517-Sentence-5174 ;
    askg-onto:index "17"^^xsd:int .

askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-517-Sentence-5171 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "$T_{A}B\\times(A^{\\omega}\\Rightarrow B^{\\omega})$ $T_{A}(B\\times(A^{\\omega}\\Rightarrow B^{\\omega}))$$T_{A}(1\\times rep_{\\infty})$$T_{A}(B\\times P_{A}B)$ $\\tau\\varphi_{\\infty}=\\mathit{unfold}(\\rho\\cdot\\tau)$."@en ;
    askg-onto:inSentence "$T_{A}B\\times(A^{\\omega}\\Rightarrow B^{\\omega})$ $T_{A}(B\\times(A^{\\omega}\\Rightarrow B^{\\omega}))$$T_{A}(1\\times rep_{\\infty})$$T_{A}(B\\times P_{A}B)$ $\\tau\\varphi_{\\infty}=\\mathit{unfold}(\\rho\\cdot\\tau)$."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-%09au%09ext%CF%95_%09ext,
        askg-data:Entity-%09extunfold%0Dhoullet%09au,
        askg-data:Entity-t_a1%09imes_rep_%09ext,
        askg-data:Entity-t_ab,
        askg-data:Entity-t_ab%09imes_p_ab,
        askg-data:Entity-t_ab%09imesa%09ext%CF%89%0Dightarrow_b%09ext%CF%89 .

askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-517-Sentence-5172 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "Here $$\\tau:(A^{\\omega}\\Rightarrow B^{\\omega})\\to T_{A}B\\times(A^{\\omega}\\Rightarrow B^{\\omega})$$ $$\\tau\\,f=(\\mathit{rep}(\\mathit{hd}\\cdot f),\\mathit{tl}\\cdot f)$$ The other component $\\rho$ of the structure map of our $T_{A}\\cdot(B\\times)$-coalgebra is a fold."@en ;
    askg-onto:inSentence "Here $$\\tau:(A^{\\omega}\\Rightarrow B^{\\omega})\\to T_{A}B\\times(A^{\\omega}\\Rightarrow B^{\\omega})$$ $$\\tau\\,f=(\\mathit{rep}(\\mathit{hd}\\cdot f),\\mathit{tl}\\cdot f)$$ The other component $\\rho$ of the structure map of our $T_{A}\\cdot(B\\times)$-coalgebra is a fold."^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-%09au,
        askg-data:Entity-%09aua%09heta%0Dightarrow_b%09heta,
        askg-data:Entity-%0Dho,
        askg-data:Entity-fold,
        askg-data:Entity-t_a%09imesb%09imes,
        askg-data:Entity-t_ab,
        askg-data:Entity-the_structure_map .

askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-517-Sentence-5173 a askg-onto:Sentence ;
    rdfs:label "Sentence 3"@en ;
    domo:Text "(For So $rep_{\\infty}=$ ."@en ;
    askg-onto:inSentence "(For So $rep_{\\infty}=$ ."^^xsd:string ;
    askg-onto:index "3"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-concept,
        askg-data:Entity-rep_%0Ainfty .

askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-517-Sentence-5174 a askg-onto:Sentence ;
    rdfs:label "Sentence 4"@en ;
    domo:Text "clarity, we give it a more general type than we need.) It is in some sense a 'fast-forward' operation."@en ;
    askg-onto:inSentence "clarity, we give it a more general type than we need.) It is in some sense a 'fast-forward' operation."^^xsd:string ;
    askg-onto:index "4"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-concept,
        askg-data:Entity-fast-forward_operation .

askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-518 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 18"@en ;
    domo:Text "$$\\begin{array}{r c l}{{\\rho:T_{A}B\\times(A^{\\omega}\\Rightarrow C)}}&{{\\to}}&{{T_{A}(B\\times(A^{\\omega}\\Rightarrow C))}}\\\\ {{}}&{{\\rho\\langle\\mathbf{R e t}\\,b,f\\rangle}}&{{=}}&{{\\mathbf{R e t}\\langle b,f\\rangle}}\\\\ {{}}&{{\\rho\\langle\\mathbf{G e t}\\,\\phi,f\\rangle}}&{{=}}&{{\\mathbf{G e t}\\left(\\lambda\\,a\\right)\\rho\\langle\\phi\\,a,f\\cdot(a\\,\\natural)\\rangle}}\\end{array}$$"@en ;
    askg-onto:hasSentence askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-518-Sentence-5181 ;
    askg-onto:index "18"^^xsd:int .

askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-518-Sentence-5181 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "$$\\begin{array}{r c l}{{\\rho:T_{A}B\\times(A^{\\omega}\\Rightarrow C)}}&{{\\to}}&{{T_{A}(B\\times(A^{\\omega}\\Rightarrow C))}}\\\\ {{}}&{{\\rho\\langle\\mathbf{R e t}\\,b,f\\rangle}}&{{=}}&{{\\mathbf{R e t}\\langle b,f\\rangle}}\\\\ {{}}&{{\\rho\\langle\\mathbf{G e t}\\,\\phi,f\\rangle}}&{{=}}&{{\\mathbf{G e t}\\left(\\lambda\\,a\\right)\\rho\\langle\\phi\\,a,f\\cdot(a\\,\\natural)\\rangle}}\\end{array}$$"@en ;
    askg-onto:inSentence "$$\\begin{array}{r c l}{{\\rho:T_{A}B\\times(A^{\\omega}\\Rightarrow C)}}&{{\\to}}&{{T_{A}(B\\times(A^{\\omega}\\Rightarrow C))}}\\\\ {{}}&{{\\rho\\langle\\mathbf{R e t}\\,b,f\\rangle}}&{{=}}&{{\\mathbf{R e t}\\langle b,f\\rangle}}\\\\ {{}}&{{\\rho\\langle\\mathbf{G e t}\\,\\phi,f\\rangle}}&{{=}}&{{\\mathbf{G e t}\\left(\\lambda\\,a\\right)\\rho\\langle\\phi\\,a,f\\cdot(a\\,\\natural)\\rangle}}\\end{array}$$"^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-%09extget%09ext%09ext%CE%BBa%09ext%0Dho%09ext%09ext%CF%86af%09exta%09ext%0Aatural%09ext,
        askg-data:Entity-%09extret%09extbf%09ext,
        askg-data:Entity-%0Dho%09extget,
        askg-data:Entity-%0Dho%09extret,
        askg-data:Entity-t_ab,
        askg-data:Entity-t_ab%09imesaeta%09o_c .

askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-519 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 19"@en ;
    domo:Text "Remarks: ρ **is actually an isomorphism. It does not change the shape of a tree, but only** decorates the data stored at its leaves. So, for example, (π0 · eat)(t,α) = (π0 · **assoc** · eat)(ρ(t,f),α) for any t : TAB and f : Aω ⇒ C."@en ;
    askg-onto:hasSentence askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-519-Sentence-5191,
        askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-519-Sentence-5192,
        askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-519-Sentence-5193 ;
    askg-onto:index "19"^^xsd:int .

askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-519-Sentence-5191 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "Remarks: ρ **is actually an isomorphism."@en ;
    askg-onto:inSentence "Remarks: ρ **is actually an isomorphism."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-%CF%81,
        askg-data:Entity-isomorphism .

askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-519-Sentence-5192 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "It does not change the shape of a tree, but only** decorates the data stored at its leaves."@en ;
    askg-onto:inSentence "It does not change the shape of a tree, but only** decorates the data stored at its leaves."^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-data,
        askg-data:Entity-tree .

askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-519-Sentence-5193 a askg-onto:Sentence ;
    rdfs:label "Sentence 3"@en ;
    domo:Text "So, for example, (π0 · eat)(t,α) = (π0 · **assoc** · eat)(ρ(t,f),α) for any t : TAB and f : Aω ⇒ C."@en ;
    askg-onto:inSentence "So, for example, (π0 · eat)(t,α) = (π0 · **assoc** · eat)(ρ(t,f),α) for any t : TAB and f : Aω ⇒ C."^^xsd:string ;
    askg-onto:index "3"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-%CF%800__eat,
        askg-data:Entity-a%CF%89__c,
        askg-data:Entity-associative_function,
        askg-data:Entity-f,
        askg-data:Entity-t,
        askg-data:Entity-tab .

askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-52 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 2"@en ;
    domo:Text "Of course, Aω ⇒ Bω**is isomorphic to (**Aω ⇒ B) ω**, and so its elements can be represented** by streams of representations of Aω ⇒ B**. However such a representation would be unusable** in practice, as the same input stream would have to be scanned **again and again to produce** successive items in the output stream."@en ;
    askg-onto:hasSentence askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-52-Sentence-521,
        askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-52-Sentence-522 ;
    askg-onto:index "2"^^xsd:int .

askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-52-Sentence-521 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "Of course, Aω ⇒ Bω**is isomorphic to (**Aω ⇒ B) ω**, and so its elements can be represented** by streams of representations of Aω ⇒ B**."@en ;
    askg-onto:inSentence "Of course, Aω ⇒ Bω**is isomorphic to (**Aω ⇒ B) ω**, and so its elements can be represented** by streams of representations of Aω ⇒ B**."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-a%CF%89__b,
        askg-data:Entity-a%CF%89__b%CF%89,
        askg-data:Entity-elements,
        askg-data:Entity-streams_of_representations_of_a%CF%89__b .

askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-52-Sentence-522 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "However such a representation would be unusable** in practice, as the same input stream would have to be scanned **again and again to produce** successive items in the output stream."@en ;
    askg-onto:inSentence "However such a representation would be unusable** in practice, as the same input stream would have to be scanned **again and again to produce** successive items in the output stream."^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-input_stream,
        askg-data:Entity-output_stream .

askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-520 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 20"@en ;
    domo:Text "Although rep **cannot be defined constructively, at least without postulating some form** of bar-induction, the construction of rep∞ from rep **is a simple matter of programming.** 3.3. Completeness of eat∞. Now we want to show that the function eat∞ **is surjective.** It is enough to show that rep∞ is a right inverse for eat∞. Theorem 3.1. **(Completeness of representation of** Aω ⇒ Bω by PAB.)"@en ;
    askg-onto:hasSentence askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-520-Sentence-5201,
        askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-520-Sentence-5202,
        askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-520-Sentence-5203,
        askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-520-Sentence-5204,
        askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-520-Sentence-5205 ;
    askg-onto:index "20"^^xsd:int .

askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-520-Sentence-5201 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "Although rep **cannot be defined constructively, at least without postulating some form** of bar-induction, the construction of rep∞ from rep **is a simple matter of programming.** 3.3."@en ;
    askg-onto:inSentence "Although rep **cannot be defined constructively, at least without postulating some form** of bar-induction, the construction of rep∞ from rep **is a simple matter of programming.** 3.3."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-bar-induction,
        askg-data:Entity-programming,
        askg-data:Entity-rep .

askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-520-Sentence-5202 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "Completeness of eat∞."@en ;
    askg-onto:inSentence "Completeness of eat∞."^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-eat .

askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-520-Sentence-5203 a askg-onto:Sentence ;
    rdfs:label "Sentence 3"@en ;
    domo:Text "Now we want to show that the function eat∞ **is surjective.** It is enough to show that rep∞ is a right inverse for eat∞."@en ;
    askg-onto:inSentence "Now we want to show that the function eat∞ **is surjective.** It is enough to show that rep∞ is a right inverse for eat∞."^^xsd:string ;
    askg-onto:index "3"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-eat,
        askg-data:Entity-rep,
        askg-data:Entity-surjective .

askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-520-Sentence-5204 a askg-onto:Sentence ;
    rdfs:label "Sentence 4"@en ;
    domo:Text "Theorem 3.1."@en ;
    askg-onto:inSentence "Theorem 3.1."^^xsd:string ;
    askg-onto:index "4"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-concept,
        askg-data:Entity-theorem_31 .

askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-520-Sentence-5205 a askg-onto:Sentence ;
    rdfs:label "Sentence 5"@en ;
    domo:Text "**(Completeness of representation of** Aω ⇒ Bω by PAB.)"@en ;
    askg-onto:inSentence "**(Completeness of representation of** Aω ⇒ Bω by PAB.)"^^xsd:string ;
    askg-onto:index "5"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-a%CF%89,
        askg-data:Entity-b%CF%89,
        askg-data:Entity-pab .

askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-521 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 21"@en ;
    domo:Text "$$(e a t_{\\infty}\\cdot r e p_{\\infty})=1_{A^{\\omega}\\Rightarrow B^{\\omega}}\\ .$$"@en ;
    askg-onto:hasSentence askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-521-Sentence-5211 ;
    askg-onto:index "21"^^xsd:int .

askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-521-Sentence-5211 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "$$(e a t_{\\infty}\\cdot r e p_{\\infty})=1_{A^{\\omega}\\Rightarrow B^{\\omega}}\\ .$$"@en ;
    askg-onto:index "1"^^xsd:int .

askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-522 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 22"@en ;
    domo:Text "Proof. We show that the following relation R is a bisimulation on Bω**, and therefore included** in the equality relation."@en ;
    askg-onto:hasSentence askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-522-Sentence-5221,
        askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-522-Sentence-5222 ;
    askg-onto:index "22"^^xsd:int .

askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-522-Sentence-5221 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "Proof."@en ;
    askg-onto:inSentence "Proof."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-concept,
        askg-data:Entity-proof .

askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-522-Sentence-5222 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "We show that the following relation R is a bisimulation on Bω**, and therefore included** in the equality relation."@en ;
    askg-onto:inSentence "We show that the following relation R is a bisimulation on Bω**, and therefore included** in the equality relation."^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-bisimulation,
        askg-data:Entity-equality_relation,
        askg-data:Entity-relation_r .

askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-523 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 23"@en ;
    domo:Text "R = {(f α,eat∞(rep∞ f,α))| α : A ω,f : A ω ⇒ B ω} It is enough to prove that if f : Aω ⇒ Bω and α : Aω**, then** (1) hd(f α) = hd(eat∞(rep∞ f,α**)), and** (2) tl(f α) R tl(eat∞(rep∞ f,α))."@en ;
    askg-onto:hasSentence askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-523-Sentence-5231 ;
    askg-onto:index "23"^^xsd:int .

askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-523-Sentence-5231 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "R = {(f α,eat∞(rep∞ f,α))| α : A ω,f : A ω ⇒ B ω} It is enough to prove that if f : Aω ⇒ Bω and α : Aω**, then** (1) hd(f α) = hd(eat∞(rep∞ f,α**)), and** (2) tl(f α) R tl(eat∞(rep∞ f,α))."@en ;
    askg-onto:inSentence "R = {(f α,eat∞(rep∞ f,α))| α : A ω,f : A ω ⇒ B ω} It is enough to prove that if f : Aω ⇒ Bω and α : Aω**, then** (1) hd(f α) = hd(eat∞(rep∞ f,α**)), and** (2) tl(f α) R tl(eat∞(rep∞ f,α))."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-%CE%B1,
        askg-data:Entity-a%CF%89,
        askg-data:Entity-b%CF%89,
        askg-data:Entity-eatrep_f%CE%B1,
        askg-data:Entity-f,
        askg-data:Entity-f_%CE%B1,
        askg-data:Entity-hdeatrep_f%CE%B1,
        askg-data:Entity-hdf_%CE%B1,
        askg-data:Entity-tleatrep_f%CE%B1,
        askg-data:Entity-tlf_%CE%B1 .

askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-524 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 24"@en ;
    domo:Text "As for (1), hd(eat∞(rep∞ f,α)) = (π0 · assoc · eat)(out(rep∞ f),α) = (π0 · assoc · eat)((TA · (B×))rep∞ · ρ · (rep × 1) · hhd·,tl·i)f,α) = (π0 · assoc · eat)((TA · (B×))rep∞ · ρ)(rep(hd · f),tl · f),α) = {(TA · (B×))rep∞ · ρ **doesn't affect shape, or first coordinate of data** } (π0 · eat)(rep(hd · f),α) = {**Completeness in the discrete-valued case** }"@en ;
    askg-onto:hasSentence askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-524-Sentence-5241 ;
    askg-onto:index "24"^^xsd:int .

askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-524-Sentence-5241 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "As for (1), hd(eat∞(rep∞ f,α)) = (π0 · assoc · eat)(out(rep∞ f),α) = (π0 · assoc · eat)((TA · (B×))rep∞ · ρ · (rep × 1) · hhd·,tl·i)f,α) = (π0 · assoc · eat)((TA · (B×))rep∞ · ρ)(rep(hd · f),tl · f),α) = {(TA · (B×))rep∞ · ρ **doesn't affect shape, or first coordinate of data** } (π0 · eat)(rep(hd · f),α) = {**Completeness in the discrete-valued case** }"@en ;
    askg-onto:inSentence "As for (1), hd(eat∞(rep∞ f,α)) = (π0 · assoc · eat)(out(rep∞ f),α) = (π0 · assoc · eat)((TA · (B×))rep∞ · ρ · (rep × 1) · hhd·,tl·i)f,α) = (π0 · assoc · eat)((TA · (B×))rep∞ · ρ)(rep(hd · f),tl · f),α) = {(TA · (B×))rep∞ · ρ **doesn't affect shape, or first coordinate of data** } (π0 · eat)(rep(hd · f),α) = {**Completeness in the discrete-valued case** }"^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-%CF%800__assoc__eatoutrep_f%CE%B1,
        askg-data:Entity-%CF%800__eatrephd__f%CE%B1,
        askg-data:Entity-completeness_in_the_discrete-valued_case,
        askg-data:Entity-hdeatrep_f%CE%B1,
        askg-data:Entity-shape_or_first_coordinate_of_data,
        askg-data:Entity-ta__brep__%CF%81 .

askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-525 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 25"@en ;
    domo:Text "$$u e d\\ c a s e\\ \\}$$ $\\overset{\\leftarrow}{hd}(f\\overset{\\leftarrow}{\\alpha})$ . As for (2), we start by expanding definitions."@en ;
    askg-onto:hasSentence askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-525-Sentence-5251,
        askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-525-Sentence-5252 ;
    askg-onto:index "25"^^xsd:int .

askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-525-Sentence-5251 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "$$u e d\\ c a s e\\ \\}$$ $\\overset{\\leftarrow}{hd}(f\\overset{\\leftarrow}{\\alpha})$ ."@en ;
    askg-onto:inSentence "$$u e d\\ c a s e\\ \\}$$ $\\overset{\\leftarrow}{hd}(f\\overset{\\leftarrow}{\\alpha})$ ."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-hdf%CE%B1,
        askg-data:Entity-u_e_d_c_a_s_e .

askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-525-Sentence-5252 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "As for (2), we start by expanding definitions."@en ;
    askg-onto:inSentence "As for (2), we start by expanding definitions."^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-concepts,
        askg-data:Entity-definitions .

askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-526 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 26"@en ;
    domo:Text "tl(eat∞(rep∞ f,α)) = (eat∞ · π1 · assoc · eat)((TA · (B×))rep∞ · ρ)(rep(hd · f),tl · f),α) We have to show that that for all f : Aω ⇒ Bω and α : Aω, tl(f α) R (eat∞ · π1 · assoc · eat)((TA · (B×))rep∞ · ρ)(rep(hd · f),tl · f),α) ."@en ;
    askg-onto:hasSentence askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-526-Sentence-5261 ;
    askg-onto:index "26"^^xsd:int .

askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-526-Sentence-5261 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "tl(eat∞(rep∞ f,α)) = (eat∞ · π1 · assoc · eat)((TA · (B×))rep∞ · ρ)(rep(hd · f),tl · f),α) We have to show that that for all f : Aω ⇒ Bω and α : Aω, tl(f α) R (eat∞ · π1 · assoc · eat)((TA · (B×))rep∞ · ρ)(rep(hd · f),tl · f),α) ."@en ;
    askg-onto:inSentence "tl(eat∞(rep∞ f,α)) = (eat∞ · π1 · assoc · eat)((TA · (B×))rep∞ · ρ)(rep(hd · f),tl · f),α) We have to show that that for all f : Aω ⇒ Bω and α : Aω, tl(f α) R (eat∞ · π1 · assoc · eat)((TA · (B×))rep∞ · ρ)(rep(hd · f),tl · f),α) ."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-%CE%B1,
        askg-data:Entity-a%CF%89,
        askg-data:Entity-a%CF%89_to_b%CF%89,
        askg-data:Entity-eat__%CF%801__assoc__eatta__brep__%CF%81rephd__ftl__f%CE%B1,
        askg-data:Entity-f,
        askg-data:Entity-tleatrep_f%CE%B1 .

askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-527 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 27"@en ;
    domo:Text "By completeness in the discrete-valued case, it is enough to **show that for all** t ∈ TAB, f ′: Aω ⇒ Bω and α : Aω, f ′(α) R (eat∞ · π1 · assoc · eat)((TA · (B×))rep∞ · ρ)(t,f′),α) ."@en ;
    askg-onto:hasSentence askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-527-Sentence-5271 ;
    askg-onto:index "27"^^xsd:int .

askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-527-Sentence-5271 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "By completeness in the discrete-valued case, it is enough to **show that for all** t ∈ TAB, f ′: Aω ⇒ Bω and α : Aω, f ′(α) R (eat∞ · π1 · assoc · eat)((TA · (B×))rep∞ · ρ)(t,f′),α) ."@en ;
    askg-onto:inSentence "By completeness in the discrete-valued case, it is enough to **show that for all** t ∈ TAB, f ′: Aω ⇒ Bω and α : Aω, f ′(α) R (eat∞ · π1 · assoc · eat)((TA · (B×))rep∞ · ρ)(t,f′),α) ."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-%CE%B1,
        askg-data:Entity-a%CF%89,
        askg-data:Entity-a%CF%89_to_b%CF%89,
        askg-data:Entity-eat__%CF%801__assoc__eat,
        askg-data:Entity-eat__%CF%801__assoc__eatta__brep__%CF%81tf%CE%B1,
        askg-data:Entity-f,
        askg-data:Entity-functions,
        askg-data:Entity-r,
        askg-data:Entity-ta__brep__%CF%81,
        askg-data:Entity-tf .

askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-528 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 28"@en ;
    domo:Text "We argue by induction on the wellfounded structure t. - In the base case that t has the form Ret b**, calculation shows that** (eat∞ · π1 · assoc · eat)((TA · (B×))rep∞ · ρ)(t,f′),α) = eat∞(rep∞(f ′),α) ."@en ;
    askg-onto:hasSentence askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-528-Sentence-5281,
        askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-528-Sentence-5282 ;
    askg-onto:index "28"^^xsd:int .

askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-528-Sentence-5281 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "We argue by induction on the wellfounded structure t."@en ;
    askg-onto:inSentence "We argue by induction on the wellfounded structure t."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-structure_t,
        askg-data:Entity-wellfounded_structure .

askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-528-Sentence-5282 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "- In the base case that t has the form Ret b**, calculation shows that** (eat∞ · π1 · assoc · eat)((TA · (B×))rep∞ · ρ)(t,f′),α) = eat∞(rep∞(f ′),α) ."@en ;
    askg-onto:inSentence "- In the base case that t has the form Ret b**, calculation shows that** (eat∞ · π1 · assoc · eat)((TA · (B×))rep∞ · ρ)(t,f′),α) = eat∞(rep∞(f ′),α) ."^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-calculation,
        askg-data:Entity-eat__%CF%801__assoc__eatta__brep__%CF%81tf%CE%B1,
        askg-data:Entity-eatrepf_%CE%B1,
        askg-data:Entity-ret_b,
        askg-data:Entity-t .

askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-529 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 29"@en ;
    domo:Text "But (f ′ α) R eat∞(rep∞(f ′),α**)), so we are done with this case.** - In the step case that t has the form Get φ**, calculation shows that** (eat∞ · π1 · assoc · eat)((TA · (B×))rep∞ · ρ)(t,f′),α) = (eat∞ · π1 · assoc · eat)((TA · (B×))rep∞ · ρ)(φ(α0),f′· (α0 \\#),α′) ."@en ;
    askg-onto:hasSentence askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-529-Sentence-5291 ;
    askg-onto:index "29"^^xsd:int .

askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-529-Sentence-5291 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "But (f ′ α) R eat∞(rep∞(f ′),α**)), so we are done with this case.** - In the step case that t has the form Get φ**, calculation shows that** (eat∞ · π1 · assoc · eat)((TA · (B×))rep∞ · ρ)(t,f′),α) = (eat∞ · π1 · assoc · eat)((TA · (B×))rep∞ · ρ)(φ(α0),f′· (α0 \\#),α′) ."@en ;
    askg-onto:inSentence "But (f ′ α) R eat∞(rep∞(f ′),α**)), so we are done with this case.** - In the step case that t has the form Get φ**, calculation shows that** (eat∞ · π1 · assoc · eat)((TA · (B×))rep∞ · ρ)(t,f′),α) = (eat∞ · π1 · assoc · eat)((TA · (B×))rep∞ · ρ)(φ(α0),f′· (α0 \\#),α′) ."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-calculation,
        askg-data:Entity-eat__%CF%801__assoc__eatta__brep__%CF%81%CF%86%CE%B10f_%CE%B10_%CE%B1,
        askg-data:Entity-eat__%CF%801__assoc__eatta__brep__%CF%81tf%CE%B1,
        askg-data:Entity-f,
        askg-data:Entity-get_%CF%86,
        askg-data:Entity-repf_%CE%B1,
        askg-data:Entity-t .

askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-53 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 3"@en ;
    domo:Text "3.1. Definition of eat∞. We define eat∞ to be the curried form of a function e **of type** (PAB)×Aω → Bωthat is continuous in its second argument. Since Bω**is a final coalgebra,** to define a function into it, it is enough to define a coalgebra for (B×**) with carrier** PAB×Aω."@en ;
    askg-onto:hasSentence askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-53-Sentence-531,
        askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-53-Sentence-532,
        askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-53-Sentence-533,
        askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-53-Sentence-534 ;
    askg-onto:index "3"^^xsd:int .

askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-53-Sentence-531 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "3.1."@en ;
    askg-onto:inSentence "3.1."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-concept,
        askg-data:Entity-dataset,
        askg-data:Entity-experiment,
        askg-data:Entity-method,
        askg-data:Entity-research,
        askg-data:Entity-triple .

askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-53-Sentence-532 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "Definition of eat∞."@en ;
    askg-onto:inSentence "Definition of eat∞."^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-concept,
        askg-data:Entity-eat .

askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-53-Sentence-533 a askg-onto:Sentence ;
    rdfs:label "Sentence 3"@en ;
    domo:Text "We define eat∞ to be the curried form of a function e **of type** (PAB)×Aω → Bωthat is continuous in its second argument."@en ;
    askg-onto:inSentence "We define eat∞ to be the curried form of a function e **of type** (PAB)×Aω → Bωthat is continuous in its second argument."^^xsd:string ;
    askg-onto:index "3"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-eat,
        askg-data:Entity-function_e,
        askg-data:Entity-paba%CF%89__b%CF%89,
        askg-data:Entity-the_curried_form_of_a_function_e_of_type_paba%CF%89__b%CF%89 .

askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-53-Sentence-534 a askg-onto:Sentence ;
    rdfs:label "Sentence 4"@en ;
    domo:Text "Since Bω**is a final coalgebra,** to define a function into it, it is enough to define a coalgebra for (B×**) with carrier** PAB×Aω."@en ;
    askg-onto:inSentence "Since Bω**is a final coalgebra,** to define a function into it, it is enough to define a coalgebra for (B×**) with carrier** PAB×Aω."^^xsd:string ;
    askg-onto:index "4"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-b,
        askg-data:Entity-b%CF%89,
        askg-data:Entity-coalgebra,
        askg-data:Entity-final_coalgebra,
        askg-data:Entity-paba%CF%89 .

askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-530 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 30"@en ;
    domo:Text "But by induction hypothesis,"@en ;
    askg-onto:hasSentence askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-530-Sentence-5301 ;
    askg-onto:index "30"^^xsd:int .

askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-530-Sentence-5301 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "But by induction hypothesis,"@en ;
    askg-onto:inSentence "But by induction hypothesis,"^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-induction,
        askg-data:Entity-induction_hypothesis .

askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-531 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 31"@en ;
    domo:Text "$$\\begin{array}{l}{\\downarrow}\\\\ {R}\\end{array}\\begin{array}{l}{\\downarrow}\\\\ {\\downarrow}\\end{array}$$"@en ;
    askg-onto:hasSentence askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-531-Sentence-5311 ;
    askg-onto:index "31"^^xsd:int .

askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-531-Sentence-5311 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "$$\\begin{array}{l}{\\downarrow}\\\\ {R}\\end{array}\\begin{array}{l}{\\downarrow}\\\\ {\\downarrow}\\end{array}$$"@en ;
    askg-onto:inSentence "$$\\begin{array}{l}{\\downarrow}\\\\ {R}\\end{array}\\begin{array}{l}{\\downarrow}\\\\ {\\downarrow}\\end{array}$$"^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-downward,
        askg-data:Entity-r .

askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-532 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 32"@en ;
    domo:Text "(f ′· (α0 \\#))(α ′) R (eat∞ · π1 · assoc · eat)((TA · (B×))rep∞ · ρ)(φ(α0),f′· (α0 \\#),α′) , and moreover (f ′· (α0 \\#))(α ′) = f ′(α**). So we are done with this case too.**"@en ;
    askg-onto:hasSentence askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-532-Sentence-5321,
        askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-532-Sentence-5322 ;
    askg-onto:index "32"^^xsd:int .

askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-532-Sentence-5321 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "(f ′· (α0 \\#))(α ′) R (eat∞ · π1 · assoc · eat)((TA · (B×))rep∞ · ρ)(φ(α0),f′· (α0 \\#),α′) , and moreover (f ′· (α0 \\#))(α ′) = f ′(α**)."@en ;
    askg-onto:inSentence "(f ′· (α0 \\#))(α ′) R (eat∞ · π1 · assoc · eat)((TA · (B×))rep∞ · ρ)(φ(α0),f′· (α0 \\#),α′) , and moreover (f ′· (α0 \\#))(α ′) = f ′(α**)."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-eat__%CF%801__assoc__eat,
        askg-data:Entity-f_%CE%B1,
        askg-data:Entity-f__%CE%B10_ .

askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-532-Sentence-5322 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "So we are done with this case too.**"@en ;
    askg-onto:inSentence "So we are done with this case too.**"^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-none,
        askg-data:Entity-this_case .

askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-533 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 33"@en ;
    domo:Text "$$\\stackrel{\\mathrm{()}}{f^{\\prime}}\\cdot(\\alpha_{0\\;\\sharp}),\\alpha^{\\prime})\\ .$$ $$\\infty\\cdot\\rho)(\\phi(\\alpha_{0}),f^{\\prime}\\cdot(\\alpha_{0}$$ $$\\alpha^{\\prime})\\ ,$$ $$J\\cup\\mathbb{C}P$$ $\\frac{3}{4}$ 2. $\\square$"@en ;
    askg-onto:hasSentence askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-533-Sentence-5331,
        askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-533-Sentence-5332 ;
    askg-onto:index "33"^^xsd:int .

askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-533-Sentence-5331 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "$$\\stackrel{\\mathrm{()}}{f^{\\prime}}\\cdot(\\alpha_{0\\;\\sharp}),\\alpha^{\\prime})\\ .$$ $$\\infty\\cdot\\rho)(\\phi(\\alpha_{0}),f^{\\prime}\\cdot(\\alpha_{0}$$ $$\\alpha^{\\prime})\\ ,$$ $$J\\cup\\mathbb{C}P$$ $\\frac{3}{4}$ 2."@en ;
    askg-onto:inSentence "$$\\stackrel{\\mathrm{()}}{f^{\\prime}}\\cdot(\\alpha_{0\\;\\sharp}),\\alpha^{\\prime})\\ .$$ $$\\infty\\cdot\\rho)(\\phi(\\alpha_{0}),f^{\\prime}\\cdot(\\alpha_{0}$$ $$\\alpha^{\\prime})\\ ,$$ $$J\\cup\\mathbb{C}P$$ $\\frac{3}{4}$ 2."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-c_p,
        askg-data:Entity-j .

askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-533-Sentence-5332 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "$\\square$"@en ;
    askg-onto:inSentence "$\\square$"^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-algorithm,
        askg-data:Entity-author,
        askg-data:Entity-concept,
        askg-data:Entity-device,
        askg-data:Entity-institution,
        askg-data:Entity-method,
        askg-data:Entity-organization,
        askg-data:Entity-publication,
        askg-data:Entity-research_area,
        askg-data:Entity-research_group,
        askg-data:Entity-study,
        askg-data:Entity-technology .

askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-54 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 4"@en ;
    domo:Text "$P_{A}B\\times A^{\\omega}$ $T_{A}(B\\times P_{A}B)\\times A^{\\omega}$ $\\left|\\begin{array}{c}\\mbox{\\it eat}\\times1\\\\ \\mbox{\\it eat}\\times1\\\\ \\mbox{\\it ads}\\times P_{A}B)\\times A^{\\omega}\\\\ \\mbox{\\it app}\\\\ (B\\times P_{A}B)\\times A^{\\omega}\\\\ \\mbox{\\it assoc}\\\\ B\\times(P_{A}B\\times A^{\\omega})\\end{array}\\right.$"@en ;
    askg-onto:hasSentence askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-54-Sentence-541 ;
    askg-onto:index "4"^^xsd:int .

askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-54-Sentence-541 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "$P_{A}B\\times A^{\\omega}$ $T_{A}(B\\times P_{A}B)\\times A^{\\omega}$ $\\left|\\begin{array}{c}\\mbox{\\it eat}\\times1\\\\ \\mbox{\\it eat}\\times1\\\\ \\mbox{\\it ads}\\times P_{A}B)\\times A^{\\omega}\\\\ \\mbox{\\it app}\\\\ (B\\times P_{A}B)\\times A^{\\omega}\\\\ \\mbox{\\it assoc}\\\\ B\\times(P_{A}B\\times A^{\\omega})\\end{array}\\right.$"@en ;
    askg-onto:index "1"^^xsd:int .

askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-55 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 5"@en ;
    domo:Text "![7_image_0.png](7_image_0.png)"@en ;
    askg-onto:hasSentence askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-55-Sentence-551 ;
    askg-onto:index "5"^^xsd:int .

askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-55-Sentence-551 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "![7_image_0.png](7_image_0.png)"@en ;
    askg-onto:inSentence "![7_image_0.png](7_image_0.png)"^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-artificial_intelligence,
        askg-data:Entity-computer_vision,
        askg-data:Entity-convolutional_neural_networks,
        askg-data:Entity-deep_learning,
        askg-data:Entity-machine_learning,
        askg-data:Entity-natural_language_processing,
        askg-data:Entity-neural_networks,
        askg-data:Entity-recurrent_neural_networks .

askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-56 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 6"@en ;
    domo:Text "Soe : PAB × Aω → Bω $$e:P_{A}B\\times A^{\\omega}\\to B^{\\omega}$$ $\\epsilon$. e = unfold(assoc · app · ((eat · out) × 1) ."@en ;
    askg-onto:hasSentence askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-56-Sentence-561,
        askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-56-Sentence-562 ;
    askg-onto:index "6"^^xsd:int .

askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-56-Sentence-561 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "Soe : PAB × Aω → Bω $$e:P_{A}B\\times A^{\\omega}\\to B^{\\omega}$$ $\\epsilon$."@en ;
    askg-onto:inSentence "Soe : PAB × Aω → Bω $$e:P_{A}B\\times A^{\\omega}\\to B^{\\omega}$$ $\\epsilon$."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-%CE%B5,
        askg-data:Entity-ep_ab%09imes_a%0Dightarrow%09o_b%0Dightarrow,
        askg-data:Entity-pab__a%CF%89__b%CF%89,
        askg-data:Entity-soe .

askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-56-Sentence-562 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "e = unfold(assoc · app · ((eat · out) × 1) ."@en ;
    askg-onto:inSentence "e = unfold(assoc · app · ((eat · out) × 1) ."^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-assoc__app__eat__out__1,
        askg-data:Entity-e .

askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-57 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 7"@en ;
    domo:Text "Then"@en ;
    askg-onto:hasSentence askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-57-Sentence-571 ;
    askg-onto:index "7"^^xsd:int .

askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-57-Sentence-571 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "Then"@en ;
    askg-onto:inSentence "Then"^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-then,
        askg-data:Entity-unknown .

askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-58 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 8"@en ;
    domo:Text "$$\\begin{array}{l}{{e a t_{\\infty}:P_{A}B\\to A^{\\omega}\\Rightarrow B^{\\omega}}}\\\\ {{e a t_{\\infty}=c u r r y\\,e\\ .}}\\end{array}$$"@en ;
    askg-onto:hasSentence askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-58-Sentence-581 ;
    askg-onto:index "8"^^xsd:int .

askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-58-Sentence-581 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "$$\\begin{array}{l}{{e a t_{\\infty}:P_{A}B\\to A^{\\omega}\\Rightarrow B^{\\omega}}}\\\\ {{e a t_{\\infty}=c u r r y\\,e\\ .}}\\end{array}$$"@en ;
    askg-onto:inSentence "$$\\begin{array}{l}{{e a t_{\\infty}:P_{A}B\\to A^{\\omega}\\Rightarrow B^{\\omega}}}\\\\ {{e a t_{\\infty}=c u r r y\\,e\\ .}}\\end{array}$$"^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-c_u_r_r_y,
        askg-data:Entity-e_a_t_%0Ainfty,
        askg-data:Entity-p_ab%09o_aomega%0Arightarrow_bomega .

askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-59 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 9"@en ;
    domo:Text "A more down-to-earth or humane presentation of the definition of eat∞ **follows, as it** might be written in a functional programming language."@en ;
    askg-onto:hasSentence askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-59-Sentence-591 ;
    askg-onto:index "9"^^xsd:int .

askg-data:Paper-978f1c811f3bfb5d-Section-5-Paragraph-59-Sentence-591 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "A more down-to-earth or humane presentation of the definition of eat∞ **follows, as it** might be written in a functional programming language."@en ;
    askg-onto:inSentence "A more down-to-earth or humane presentation of the definition of eat∞ **follows, as it** might be written in a functional programming language."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-a_functional_programming_language,
        askg-data:Entity-eat .

askg-data:Paper-978f1c811f3bfb5d-Section-6 a askg-onto:Section ;
    rdfs:label "Section 6"@en ;
    domo:Text "4. **Composition**"@en ;
    askg-onto:hasParagraph askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-61,
        askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-610,
        askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-611,
        askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-612,
        askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-613,
        askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-614,
        askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-615,
        askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-616,
        askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-617,
        askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-618,
        askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-619,
        askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-62,
        askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-620,
        askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-621,
        askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-622,
        askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-623,
        askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-624,
        askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-625,
        askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-626,
        askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-627,
        askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-628,
        askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-629,
        askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-63,
        askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-630,
        askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-631,
        askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-64,
        askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-65,
        askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-66,
        askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-67,
        askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-68,
        askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-69 ;
    askg-onto:index "6"^^xsd:int ;
    askg-onto:level "2"^^xsd:int .

askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-61 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 1"@en ;
    domo:Text "In the previous section we defined a complete representation **for continuous functions in** Aω ⇒ Bω, using elements of PAB**. As continuous functions are closed under composition,** if p : PBC **represents** φ : Bω ⇒ C ω, and q : PAB represents ψ : Aω ⇒ Bω**, then there's** some r : PAC that represents φ · ψ**. However, the argument for completeness is less than** entirely constructive. Can we directly program such an r from p and q**? Yes! In fact, in** at least two different ways, one 'lazy', or demand driven, and **the other 'greedy', or data** driven. The computation is reminiscent of cut-elimination **in proof theory, though in this** case the objects that interact with each other are infinite, non-wellfounded trees, rather than wellfounded derivation trees."@en ;
    askg-onto:hasSentence askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-61-Sentence-611,
        askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-61-Sentence-612,
        askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-61-Sentence-613,
        askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-61-Sentence-614,
        askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-61-Sentence-615,
        askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-61-Sentence-616,
        askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-61-Sentence-617 ;
    askg-onto:index "1"^^xsd:int .

askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-61-Sentence-611 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "In the previous section we defined a complete representation **for continuous functions in** Aω ⇒ Bω, using elements of PAB**."@en ;
    askg-onto:inSentence "In the previous section we defined a complete representation **for continuous functions in** Aω ⇒ Bω, using elements of PAB**."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-a%CF%89__b%CF%89,
        askg-data:Entity-continuous_functions,
        askg-data:Entity-elements,
        askg-data:Entity-pab .

askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-61-Sentence-612 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "As continuous functions are closed under composition,** if p : PBC **represents** φ : Bω ⇒ C ω, and q : PAB represents ψ : Aω ⇒ Bω**, then there's** some r : PAC that represents φ · ψ**."@en ;
    askg-onto:inSentence "As continuous functions are closed under composition,** if p : PBC **represents** φ : Bω ⇒ C ω, and q : PAB represents ψ : Aω ⇒ Bω**, then there's** some r : PAC that represents φ · ψ**."^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-%CF%86,
        askg-data:Entity-%CF%86__%CF%88,
        askg-data:Entity-%CF%88,
        askg-data:Entity-p,
        askg-data:Entity-q,
        askg-data:Entity-r .

askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-61-Sentence-613 a askg-onto:Sentence ;
    rdfs:label "Sentence 3"@en ;
    domo:Text "However, the argument for completeness is less than** entirely constructive."@en ;
    askg-onto:inSentence "However, the argument for completeness is less than** entirely constructive."^^xsd:string ;
    askg-onto:index "3"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-entirely_constructive,
        askg-data:Entity-the_argument_for_completeness .

askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-61-Sentence-614 a askg-onto:Sentence ;
    rdfs:label "Sentence 4"@en ;
    domo:Text "Can we directly program such an r from p and q**?"@en ;
    askg-onto:inSentence "Can we directly program such an r from p and q**?"^^xsd:string ;
    askg-onto:index "4"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-p,
        askg-data:Entity-q,
        askg-data:Entity-r .

askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-61-Sentence-615 a askg-onto:Sentence ;
    rdfs:label "Sentence 5"@en ;
    domo:Text "Yes!"@en ;
    askg-onto:inSentence "Yes!"^^xsd:string ;
    askg-onto:index "5"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-question,
        askg-data:Entity-yes .

askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-61-Sentence-616 a askg-onto:Sentence ;
    rdfs:label "Sentence 6"@en ;
    domo:Text "In fact, in** at least two different ways, one 'lazy', or demand driven, and **the other 'greedy', or data** driven."@en ;
    askg-onto:inSentence "In fact, in** at least two different ways, one 'lazy', or demand driven, and **the other 'greedy', or data** driven."^^xsd:string ;
    askg-onto:index "6"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-data_driven,
        askg-data:Entity-demand_driven,
        askg-data:Entity-method .

askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-61-Sentence-617 a askg-onto:Sentence ;
    rdfs:label "Sentence 7"@en ;
    domo:Text "The computation is reminiscent of cut-elimination **in proof theory, though in this** case the objects that interact with each other are infinite, non-wellfounded trees, rather than wellfounded derivation trees."@en ;
    askg-onto:inSentence "The computation is reminiscent of cut-elimination **in proof theory, though in this** case the objects that interact with each other are infinite, non-wellfounded trees, rather than wellfounded derivation trees."^^xsd:string ;
    askg-onto:index "7"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-cut-elimination,
        askg-data:Entity-infinite_non-wellfounded_trees,
        askg-data:Entity-proof_theory,
        askg-data:Entity-wellfounded_derivation_trees .

askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-610 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 10"@en ;
    domo:Text "$\\chi(t_{bc},t_{ab})=fold\\,p\\,g\\,t_{bc}\\,t_{ab}$ **where**$p:(C\\times P_{B}C)\\to T_{A}(B\\times P_{A}B)\\to T_{A}(C\\times S)$ $p/g\\,p\\,\\setminus t\\,\\cdot\\,=\\,{\\bf Rot}/g\\,/out\\,p\\,\\cdot\\,t\\,\\cdot\\,\\setminus$ p hc,pbcitab = Rethc,hout pbc,tabii"@en ;
    askg-onto:hasSentence askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-610-Sentence-6101 ;
    askg-onto:index "10"^^xsd:int .

askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-610-Sentence-6101 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "$\\chi(t_{bc},t_{ab})=fold\\,p\\,g\\,t_{bc}\\,t_{ab}$ **where**$p:(C\\times P_{B}C)\\to T_{A}(B\\times P_{A}B)\\to T_{A}(C\\times S)$ $p/g\\,p\\,\\setminus t\\,\\cdot\\,=\\,{\\bf Rot}/g\\,/out\\,p\\,\\cdot\\,t\\,\\cdot\\,\\setminus$ p hc,pbcitab = Rethc,hout pbc,tabii"@en ;
    askg-onto:inSentence "$\\chi(t_{bc},t_{ab})=fold\\,p\\,g\\,t_{bc}\\,t_{ab}$ **where**$p:(C\\times P_{B}C)\\to T_{A}(B\\times P_{A}B)\\to T_{A}(C\\times S)$ $p/g\\,p\\,\\setminus t\\,\\cdot\\,=\\,{\\bf Rot}/g\\,/out\\,p\\,\\cdot\\,t\\,\\cdot\\,\\setminus$ p hc,pbcitab = Rethc,hout pbc,tabii"^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-cp_bct_abp_abt_acs,
        askg-data:Entity-hout,
        askg-data:Entity-p,
        askg-data:Entity-pbc,
        askg-data:Entity-pbcitab,
        askg-data:Entity-pg,
        askg-data:Entity-rethc,
        askg-data:Entity-rot,
        askg-data:Entity-tabii .

askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-611 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 11"@en ;
    domo:Text "$g:(B\\to T_{A}(B\\times P_{A}B)\\to T_{A}(C\\times S))\\to T_{A}(B\\times P_{A}B)\\to T_{A}(C\\times S)$ $g\\,f=fold((\\lambda\\,\\langle b,p_{ab}\\rangle)\\,f\\,b\\,(out\\,p_{ab}))\\,\\mbox{\\bf Get}$. Note that the carrier for the algebra of the outer recursion is the function space TA(B × PAB) → TA(C × S**), while that for the inner recursion is** TA(C × S)."@en ;
    askg-onto:hasSentence askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-611-Sentence-6111,
        askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-611-Sentence-6112 ;
    askg-onto:index "11"^^xsd:int .

askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-611-Sentence-6111 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "$g:(B\\to T_{A}(B\\times P_{A}B)\\to T_{A}(C\\times S))\\to T_{A}(B\\times P_{A}B)\\to T_{A}(C\\times S)$ $g\\,f=fold((\\lambda\\,\\langle b,p_{ab}\\rangle)\\,f\\,b\\,(out\\,p_{ab}))\\,\\mbox{\\bf Get}$."@en ;
    askg-onto:inSentence "$g:(B\\to T_{A}(B\\times P_{A}B)\\to T_{A}(C\\times S))\\to T_{A}(B\\times P_{A}B)\\to T_{A}(C\\times S)$ $g\\,f=fold((\\lambda\\,\\langle b,p_{ab}\\rangle)\\,f\\,b\\,(out\\,p_{ab}))\\,\\mbox{\\bf Get}$."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-f,
        askg-data:Entity-fold%CE%BBbp_abf_b_out_p_ab,
        askg-data:Entity-g,
        askg-data:Entity-t_abp_ab,
        askg-data:Entity-t_acs .

askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-611-Sentence-6112 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "Note that the carrier for the algebra of the outer recursion is the function space TA(B × PAB) → TA(C × S**), while that for the inner recursion is** TA(C × S)."@en ;
    askg-onto:inSentence "Note that the carrier for the algebra of the outer recursion is the function space TA(B × PAB) → TA(C × S**), while that for the inner recursion is** TA(C × S)."^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-tab__pab__tac__s,
        askg-data:Entity-tac__s,
        askg-data:Entity-the_algebra_of_the_outer_recursion,
        askg-data:Entity-the_inner_recursion .

askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-612 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 12"@en ;
    domo:Text "In this form of composition, priority is given to the postponent's desire to produce output. No input is consumed until both the postponent and preponent are reading."@en ;
    askg-onto:hasSentence askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-612-Sentence-6121,
        askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-612-Sentence-6122 ;
    askg-onto:index "12"^^xsd:int .

askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-612-Sentence-6121 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "In this form of composition, priority is given to the postponent's desire to produce output."@en ;
    askg-onto:inSentence "In this form of composition, priority is given to the postponent's desire to produce output."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-output,
        askg-data:Entity-postponent .

askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-612-Sentence-6122 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "No input is consumed until both the postponent and preponent are reading."@en ;
    askg-onto:inSentence "No input is consumed until both the postponent and preponent are reading."^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-postponent,
        askg-data:Entity-preponent .

askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-613 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 13"@en ;
    domo:Text "χ gives rise to a composition combinator ⊗ as follows. First, unfold χ : S → PAC**. We** define ⊗ **by precomposition with this unfold.**"@en ;
    askg-onto:hasSentence askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-613-Sentence-6131,
        askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-613-Sentence-6132,
        askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-613-Sentence-6133 ;
    askg-onto:index "13"^^xsd:int .

askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-613-Sentence-6131 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "χ gives rise to a composition combinator ⊗ as follows."@en ;
    askg-onto:inSentence "χ gives rise to a composition combinator ⊗ as follows."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-%CF%87,
        askg-data:Entity-composition_combinator_ .

askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-613-Sentence-6132 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "First, unfold χ : S → PAC**."@en ;
    askg-onto:inSentence "First, unfold χ : S → PAC**."^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-%CF%87,
        askg-data:Entity-pac .

askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-613-Sentence-6133 a askg-onto:Sentence ;
    rdfs:label "Sentence 3"@en ;
    domo:Text "We** define ⊗ **by precomposition with this unfold.**"@en ;
    askg-onto:inSentence "We** define ⊗ **by precomposition with this unfold.**"^^xsd:string ;
    askg-onto:index "3"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-define,
        askg-data:Entity-this_unfold .

askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-614 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 14"@en ;
    domo:Text "$$\\begin{array}{l}{{\\otimes:P_{B}C\\times P_{A}B\\to P_{A}C}}\\\\ {{p\\otimes q\\stackrel{\\Delta}{=}(u n f o l d\\,\\chi)\\langle o u t\\,p,o u t\\,q\\rangle}}\\end{array}$$"@en ;
    askg-onto:hasSentence askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-614-Sentence-6141 ;
    askg-onto:index "14"^^xsd:int .

askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-614-Sentence-6141 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "$$\\begin{array}{l}{{\\otimes:P_{B}C\\times P_{A}B\\to P_{A}C}}\\\\ {{p\\otimes q\\stackrel{\\Delta}{=}(u n f o l d\\,\\chi)\\langle o u t\\,p,o u t\\,q\\rangle}}\\end{array}$$"@en ;
    askg-onto:inSentence "$$\\begin{array}{l}{{\\otimes:P_{B}C\\times P_{A}B\\to P_{A}C}}\\\\ {{p\\otimes q\\stackrel{\\Delta}{=}(u n f o l d\\,\\chi)\\langle o u t\\,p,o u t\\,q\\rangle}}\\end{array}$$"^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-p,
        askg-data:Entity-p_ab,
        askg-data:Entity-p_ac,
        askg-data:Entity-p_bc,
        askg-data:Entity-q,
        askg-data:Entity-u_n_f_o_l_d__chilangle_o_u_t__po_u_t__qrangle .

askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-615 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 15"@en ;
    domo:Text "We call ⊗ lazy **composition, since the internal actions of the composite are the minimum** necessary to respond to demand for data."@en ;
    askg-onto:hasSentence askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-615-Sentence-6151 ;
    askg-onto:index "15"^^xsd:int .

askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-615-Sentence-6151 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "We call ⊗ lazy **composition, since the internal actions of the composite are the minimum** necessary to respond to demand for data."@en ;
    askg-onto:inSentence "We call ⊗ lazy **composition, since the internal actions of the composite are the minimum** necessary to respond to demand for data."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-composite,
        askg-data:Entity-lazy_composition .

askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-616 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 16"@en ;
    domo:Text "Altenkirch and Swierstra noticed that there is another such **coalgebra. We present its** definition first in functional programming style, using pattern matching; below we show how the equations can be teased into nested recursions."@en ;
    askg-onto:hasSentence askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-616-Sentence-6161,
        askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-616-Sentence-6162 ;
    askg-onto:index "16"^^xsd:int .

askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-616-Sentence-6161 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "Altenkirch and Swierstra noticed that there is another such **coalgebra."@en ;
    askg-onto:inSentence "Altenkirch and Swierstra noticed that there is another such **coalgebra."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-altenkirch,
        askg-data:Entity-coalgebra,
        askg-data:Entity-swierstra .

askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-616-Sentence-6162 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "We present its** definition first in functional programming style, using pattern matching; below we show how the equations can be teased into nested recursions."@en ;
    askg-onto:inSentence "We present its** definition first in functional programming style, using pattern matching; below we show how the equations can be teased into nested recursions."^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-definition,
        askg-data:Entity-equations,
        askg-data:Entity-functional_programming_style,
        askg-data:Entity-nested_recursions .

askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-617 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 17"@en ;
    domo:Text "$$\\begin{array}{l l}{{\\chi^{\\prime}:T_{B}(C\\times P_{B}C){\\times}T_{A}(B\\times P_{A}B){\\rightarrow}\\,T_{A}(C\\times S)}}\\\\ {{\\chi^{\\prime}\\langle\\,t_{b c}\\qquad\\qquad,{\\bf G e t\\,\\psi\\rangle}}}&{{={\\bf G e t\\,\\langle\\lambda\\,a\\rangle\\,\\chi^{\\prime}\\langle t_{b c},\\psi\\,a\\rangle}}}\\\\ {{\\chi^{\\prime}\\langle\\,{\\bf G e t\\,\\phi}\\qquad\\qquad,{\\bf R e t\\,\\langle b,p_{a b}\\rangle\\rangle}}}&{{=\\chi^{\\prime}\\langle\\phi\\,b,o u t\\,p_{a b}\\rangle}}\\\\ {{\\chi^{\\prime}\\langle\\,{\\bf R e t\\,\\langle c,p_{b c}\\rangle}\\qquad,t_{a b}\\rangle}}&{{={\\bf R e t\\,\\langle c,\\langle o u t\\,p_{b c},t_{a b}\\rangle\\rangle}}}\\end{array}$$"@en ;
    askg-onto:hasSentence askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-617-Sentence-6171 ;
    askg-onto:index "17"^^xsd:int .

askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-617-Sentence-6171 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "$$\\begin{array}{l l}{{\\chi^{\\prime}:T_{B}(C\\times P_{B}C){\\times}T_{A}(B\\times P_{A}B){\\rightarrow}\\,T_{A}(C\\times S)}}\\\\ {{\\chi^{\\prime}\\langle\\,t_{b c}\\qquad\\qquad,{\\bf G e t\\,\\psi\\rangle}}}&{{={\\bf G e t\\,\\langle\\lambda\\,a\\rangle\\,\\chi^{\\prime}\\langle t_{b c},\\psi\\,a\\rangle}}}\\\\ {{\\chi^{\\prime}\\langle\\,{\\bf G e t\\,\\phi}\\qquad\\qquad,{\\bf R e t\\,\\langle b,p_{a b}\\rangle\\rangle}}}&{{=\\chi^{\\prime}\\langle\\phi\\,b,o u t\\,p_{a b}\\rangle}}\\\\ {{\\chi^{\\prime}\\langle\\,{\\bf R e t\\,\\langle c,p_{b c}\\rangle}\\qquad,t_{a b}\\rangle}}&{{={\\bf R e t\\,\\langle c,\\langle o u t\\,p_{b c},t_{a b}\\rangle\\rangle}}}\\end{array}$$"@en ;
    askg-onto:inSentence "$$\\begin{array}{l l}{{\\chi^{\\prime}:T_{B}(C\\times P_{B}C){\\times}T_{A}(B\\times P_{A}B){\\rightarrow}\\,T_{A}(C\\times S)}}\\\\ {{\\chi^{\\prime}\\langle\\,t_{b c}\\qquad\\qquad,{\\bf G e t\\,\\psi\\rangle}}}&{{={\\bf G e t\\,\\langle\\lambda\\,a\\rangle\\,\\chi^{\\prime}\\langle t_{b c},\\psi\\,a\\rangle}}}\\\\ {{\\chi^{\\prime}\\langle\\,{\\bf G e t\\,\\phi}\\qquad\\qquad,{\\bf R e t\\,\\langle b,p_{a b}\\rangle\\rangle}}}&{{=\\chi^{\\prime}\\langle\\phi\\,b,o u t\\,p_{a b}\\rangle}}\\\\ {{\\chi^{\\prime}\\langle\\,{\\bf R e t\\,\\langle c,p_{b c}\\rangle}\\qquad,t_{a b}\\rangle}}&{{={\\bf R e t\\,\\langle c,\\langle o u t\\,p_{b c},t_{a b}\\rangle\\rangle}}}\\end{array}$$"^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-%0At_bctimes_p_bc,
        askg-data:Entity-chiprime,
        askg-data:Entity-getphi,
        askg-data:Entity-getpsi,
        askg-data:Entity-t_actimes_s .

askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-618 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 18"@en ;
    domo:Text "Because of the top-to-bottom reading of the equations, it is **implicit in the last equation that** tab has the form Ret(b,pab**). Anthropomorphically, this form of composition gives priority** to the preponent's 'greedy' desire to read input. Whereas with the 'lazy' form, output is produced as soon as the postponent is ready, regardless of **the form of the preponent,** in this greedier form of composition no output is produced until both **the postponent and** preponent are writing. We call the composition combinator ⊗′**to which** χ ′ gives rise **greedy** composition, since the internal actions of the composite are driven by the arrival of data at the input."@en ;
    askg-onto:hasSentence askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-618-Sentence-6181,
        askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-618-Sentence-6182,
        askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-618-Sentence-6183,
        askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-618-Sentence-6184 ;
    askg-onto:index "18"^^xsd:int .

askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-618-Sentence-6181 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "Because of the top-to-bottom reading of the equations, it is **implicit in the last equation that** tab has the form Ret(b,pab**)."@en ;
    askg-onto:inSentence "Because of the top-to-bottom reading of the equations, it is **implicit in the last equation that** tab has the form Ret(b,pab**)."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-retbpab,
        askg-data:Entity-tab .

askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-618-Sentence-6182 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "Anthropomorphically, this form of composition gives priority** to the preponent's 'greedy' desire to read input."@en ;
    askg-onto:inSentence "Anthropomorphically, this form of composition gives priority** to the preponent's 'greedy' desire to read input."^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-greedy_desire_to_read_input,
        askg-data:Entity-preponent .

askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-618-Sentence-6183 a askg-onto:Sentence ;
    rdfs:label "Sentence 3"@en ;
    domo:Text "Whereas with the 'lazy' form, output is produced as soon as the postponent is ready, regardless of **the form of the preponent,** in this greedier form of composition no output is produced until both **the postponent and** preponent are writing."@en ;
    askg-onto:inSentence "Whereas with the 'lazy' form, output is produced as soon as the postponent is ready, regardless of **the form of the preponent,** in this greedier form of composition no output is produced until both **the postponent and** preponent are writing."^^xsd:string ;
    askg-onto:index "3"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-form,
        askg-data:Entity-greedier_form,
        askg-data:Entity-lazy_form,
        askg-data:Entity-postponent,
        askg-data:Entity-preponent .

askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-618-Sentence-6184 a askg-onto:Sentence ;
    rdfs:label "Sentence 4"@en ;
    domo:Text "We call the composition combinator ⊗′**to which** χ ′ gives rise **greedy** composition, since the internal actions of the composite are driven by the arrival of data at the input."@en ;
    askg-onto:inSentence "We call the composition combinator ⊗′**to which** χ ′ gives rise **greedy** composition, since the internal actions of the composite are driven by the arrival of data at the input."^^xsd:string ;
    askg-onto:index "4"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-arrival_of_data,
        askg-data:Entity-composition_combinator_,
        askg-data:Entity-greedy_composition,
        askg-data:Entity-internal_actions .

askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-619 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 19"@en ;
    domo:Text "What is the mathematical structure of the code for this form of composition? Again, it is definition by nested recursion. One might think3**that the outer recursion is this time on the** structure of the preponent, and the inner recursion on the postponent. In fact, this would not work. In the crucial middle clause (in which the two components communicate), the postponent 'goes down' in the structural order, while the preponent may 'go up', arbitrarily far. A more careful analysis shows that, again, the outer recursion is on the structure of the postponent, with subordinate recursions on the structure of the preponent. In fact there is little formal difference from our definition of χ **above, except that the base case of the** outer recursion uses another inner recursion rather than a simple explicit definition. The local function p **then becomes** p : (C × PBC) → TA(B × PAB) → TA(C × S) p hc,pbci = fold ((λ hb,pabi) Rethc,hout pbc, Rethb,pabiii) Get Unfortunately we currently have little of substance to say about how these forms of composition are related. One might well expect that a pipeline implemented with greedy composition would be less responsive (i.e. **deliver results later) than one expressed with the** lazy form."@en ;
    askg-onto:hasSentence askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-619-Sentence-6191,
        askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-619-Sentence-61910,
        askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-619-Sentence-6192,
        askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-619-Sentence-6193,
        askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-619-Sentence-6194,
        askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-619-Sentence-6195,
        askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-619-Sentence-6196,
        askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-619-Sentence-6197,
        askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-619-Sentence-6198,
        askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-619-Sentence-6199 ;
    askg-onto:index "19"^^xsd:int .

askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-619-Sentence-6191 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "What is the mathematical structure of the code for this form of composition?"@en ;
    askg-onto:inSentence "What is the mathematical structure of the code for this form of composition?"^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-composition,
        askg-data:Entity-mathematical_structure .

askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-619-Sentence-61910 a askg-onto:Sentence ;
    rdfs:label "Sentence 10"@en ;
    domo:Text "**deliver results later) than one expressed with the** lazy form."@en ;
    askg-onto:inSentence "**deliver results later) than one expressed with the** lazy form."^^xsd:string ;
    askg-onto:index "10"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-lazy_form,
        askg-data:Entity-results_later .

askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-619-Sentence-6192 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "Again, it is definition by nested recursion."@en ;
    askg-onto:inSentence "Again, it is definition by nested recursion."^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-definition,
        askg-data:Entity-nested_recursion .

askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-619-Sentence-6193 a askg-onto:Sentence ;
    rdfs:label "Sentence 3"@en ;
    domo:Text "One might think3**that the outer recursion is this time on the** structure of the preponent, and the inner recursion on the postponent."@en ;
    askg-onto:inSentence "One might think3**that the outer recursion is this time on the** structure of the preponent, and the inner recursion on the postponent."^^xsd:string ;
    askg-onto:index "3"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-inner_recursion,
        askg-data:Entity-outer_recursion,
        askg-data:Entity-postponent,
        askg-data:Entity-structure_of_the_preponent .

askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-619-Sentence-6194 a askg-onto:Sentence ;
    rdfs:label "Sentence 4"@en ;
    domo:Text "In fact, this would not work."@en ;
    askg-onto:inSentence "In fact, this would not work."^^xsd:string ;
    askg-onto:index "4"^^xsd:int .

askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-619-Sentence-6195 a askg-onto:Sentence ;
    rdfs:label "Sentence 5"@en ;
    domo:Text "In the crucial middle clause (in which the two components communicate), the postponent 'goes down' in the structural order, while the preponent may 'go up', arbitrarily far."@en ;
    askg-onto:inSentence "In the crucial middle clause (in which the two components communicate), the postponent 'goes down' in the structural order, while the preponent may 'go up', arbitrarily far."^^xsd:string ;
    askg-onto:index "5"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-arbitrarily_far,
        askg-data:Entity-postponent,
        askg-data:Entity-preponent,
        askg-data:Entity-structural_order .

askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-619-Sentence-6196 a askg-onto:Sentence ;
    rdfs:label "Sentence 6"@en ;
    domo:Text "A more careful analysis shows that, again, the outer recursion is on the structure of the postponent, with subordinate recursions on the structure of the preponent."@en ;
    askg-onto:inSentence "A more careful analysis shows that, again, the outer recursion is on the structure of the postponent, with subordinate recursions on the structure of the preponent."^^xsd:string ;
    askg-onto:index "6"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-outer_recursion,
        askg-data:Entity-subordinate_recursions,
        askg-data:Entity-the_structure_of_the_postponent,
        askg-data:Entity-the_structure_of_the_preponent .

askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-619-Sentence-6197 a askg-onto:Sentence ;
    rdfs:label "Sentence 7"@en ;
    domo:Text "In fact there is little formal difference from our definition of χ **above, except that the base case of the** outer recursion uses another inner recursion rather than a simple explicit definition."@en ;
    askg-onto:inSentence "In fact there is little formal difference from our definition of χ **above, except that the base case of the** outer recursion uses another inner recursion rather than a simple explicit definition."^^xsd:string ;
    askg-onto:index "7"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-inner_recursion,
        askg-data:Entity-outer_recursion .

askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-619-Sentence-6198 a askg-onto:Sentence ;
    rdfs:label "Sentence 8"@en ;
    domo:Text "The local function p **then becomes** p : (C × PBC) → TA(B × PAB) → TA(C × S) p hc,pbci = fold ((λ hb,pabi) Rethc,hout pbc, Rethb,pabiii) Get Unfortunately we currently have little of substance to say about how these forms of composition are related."@en ;
    askg-onto:inSentence "The local function p **then becomes** p : (C × PBC) → TA(B × PAB) → TA(C × S) p hc,pbci = fold ((λ hb,pabi) Rethc,hout pbc, Rethb,pabiii) Get Unfortunately we currently have little of substance to say about how these forms of composition are related."^^xsd:string ;
    askg-onto:index "8"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-%CE%BB_hbpabi_rethchout_pbc_rethbpabiii,
        askg-data:Entity-fold,
        askg-data:Entity-p,
        askg-data:Entity-p__c__pbc__tab__pab__tac__s .

askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-619-Sentence-6199 a askg-onto:Sentence ;
    rdfs:label "Sentence 9"@en ;
    domo:Text "One might well expect that a pipeline implemented with greedy composition would be less responsive (i.e."@en ;
    askg-onto:inSentence "One might well expect that a pipeline implemented with greedy composition would be less responsive (i.e."^^xsd:string ;
    askg-onto:index "9"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-greedy_composition,
        askg-data:Entity-pipeline .

askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-62 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 2"@en ;
    domo:Text "4.1. Definition of composition as an operation on representatives. **We define (using** coiteration) an operation ('⊗**') on representations of stream functions that represents the** composition of those functions, in the sense eat∞(p ⊗ q) = eat∞p · eat∞q for p : PBC and q : PAB."@en ;
    askg-onto:hasSentence askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-62-Sentence-621,
        askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-62-Sentence-622,
        askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-62-Sentence-623 ;
    askg-onto:index "2"^^xsd:int .

askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-62-Sentence-621 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "4.1."@en ;
    askg-onto:inSentence "4.1."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-41,
        askg-data:Entity-section .

askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-62-Sentence-622 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "Definition of composition as an operation on representatives."@en ;
    askg-onto:inSentence "Definition of composition as an operation on representatives."^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-composition,
        askg-data:Entity-operation .

askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-62-Sentence-623 a askg-onto:Sentence ;
    rdfs:label "Sentence 3"@en ;
    domo:Text "**We define (using** coiteration) an operation ('⊗**') on representations of stream functions that represents the** composition of those functions, in the sense eat∞(p ⊗ q) = eat∞p · eat∞q for p : PBC and q : PAB."@en ;
    askg-onto:inSentence "**We define (using** coiteration) an operation ('⊗**') on representations of stream functions that represents the** composition of those functions, in the sense eat∞(p ⊗ q) = eat∞p · eat∞q for p : PBC and q : PAB."^^xsd:string ;
    askg-onto:index "3"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-coiteration,
        askg-data:Entity-composition_of_those_functions,
        askg-data:Entity-eatp__eatq,
        askg-data:Entity-eatp__q,
        askg-data:Entity-operation_,
        askg-data:Entity-p,
        askg-data:Entity-pab,
        askg-data:Entity-pbc,
        askg-data:Entity-q .

askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-620 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 20"@en ;
    domo:Text "4.2. Correctness of composition. **It remains to prove that the two operations that we** defined above really represent composition. This pivots on the uniqueness property of unfold χ. Exploiting the similarity of the definitions for ⊗ and ⊗′ **we can state the following** basic lemma that applies to both. For the sake of readability, the isomorphism out : PAB ∼= TA(B × PAB**) is left implicit.** Lemma 4.1. Both composition operators ∈ {⊗ c , ⊗′} **satisfy the following laws:** (1) Ret(c,pbc)c tab = Ret(c,pbcc tab) (where tab = Ret(b,pab) **in case** c = ⊗′) (2) (Get φ)c Ret(b,pab) = φbc pab (3) pbcc (Get ψ) = Get (λa. pbcc ψ a) (where pbc = Get φ **in case** c = ⊗)"@en ;
    askg-onto:hasSentence askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-620-Sentence-6201,
        askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-620-Sentence-6202,
        askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-620-Sentence-6203,
        askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-620-Sentence-6204,
        askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-620-Sentence-6205,
        askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-620-Sentence-6206,
        askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-620-Sentence-6207,
        askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-620-Sentence-6208 ;
    askg-onto:index "20"^^xsd:int .

askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-620-Sentence-6201 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "4.2."@en ;
    askg-onto:inSentence "4.2."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-42,
        askg-data:Entity-analysis .

askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-620-Sentence-6202 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "Correctness of composition."@en ;
    askg-onto:inSentence "Correctness of composition."^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-composition,
        askg-data:Entity-correctness .

askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-620-Sentence-6203 a askg-onto:Sentence ;
    rdfs:label "Sentence 3"@en ;
    domo:Text "**It remains to prove that the two operations that we** defined above really represent composition."@en ;
    askg-onto:inSentence "**It remains to prove that the two operations that we** defined above really represent composition."^^xsd:string ;
    askg-onto:index "3"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-composition,
        askg-data:Entity-operations .

askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-620-Sentence-6204 a askg-onto:Sentence ;
    rdfs:label "Sentence 4"@en ;
    domo:Text "This pivots on the uniqueness property of unfold χ."@en ;
    askg-onto:inSentence "This pivots on the uniqueness property of unfold χ."^^xsd:string ;
    askg-onto:index "4"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-unfold_%CF%87,
        askg-data:Entity-uniqueness_property .

askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-620-Sentence-6205 a askg-onto:Sentence ;
    rdfs:label "Sentence 5"@en ;
    domo:Text "Exploiting the similarity of the definitions for ⊗ and ⊗′ **we can state the following** basic lemma that applies to both."@en ;
    askg-onto:inSentence "Exploiting the similarity of the definitions for ⊗ and ⊗′ **we can state the following** basic lemma that applies to both."^^xsd:string ;
    askg-onto:index "5"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-basic_lemma,
        askg-data:Entity-definitions .

askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-620-Sentence-6206 a askg-onto:Sentence ;
    rdfs:label "Sentence 6"@en ;
    domo:Text "For the sake of readability, the isomorphism out : PAB ∼= TA(B × PAB**) is left implicit.** Lemma 4.1."@en ;
    askg-onto:inSentence "For the sake of readability, the isomorphism out : PAB ∼= TA(B × PAB**) is left implicit.** Lemma 4.1."^^xsd:string ;
    askg-onto:index "6"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-isomorphism,
        askg-data:Entity-lemma_41,
        askg-data:Entity-pab__tab__pab .

askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-620-Sentence-6207 a askg-onto:Sentence ;
    rdfs:label "Sentence 7"@en ;
    domo:Text "Both composition operators ∈ {⊗ c , ⊗′} **satisfy the following laws:** (1) Ret(c,pbc)c tab = Ret(c,pbcc tab) (where tab = Ret(b,pab) **in case** c = ⊗′) (2) (Get φ)c Ret(b,pab) = φbc pab (3) pbcc (Get ψ) = Get (λa."@en ;
    askg-onto:inSentence "Both composition operators ∈ {⊗ c , ⊗′} **satisfy the following laws:** (1) Ret(c,pbc)c tab = Ret(c,pbcc tab) (where tab = Ret(b,pab) **in case** c = ⊗′) (2) (Get φ)c Ret(b,pab) = φbc pab (3) pbcc (Get ψ) = Get (λa."^^xsd:string ;
    askg-onto:index "7"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-,
        askg-data:Entity-c,
        askg-data:Entity-composition_operators,
        askg-data:Entity-get_%CE%BBa,
        askg-data:Entity-get_%CF%86,
        askg-data:Entity-laws,
        askg-data:Entity-pbcc,
        askg-data:Entity-retbpab,
        askg-data:Entity-tab .

askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-620-Sentence-6208 a askg-onto:Sentence ;
    rdfs:label "Sentence 8"@en ;
    domo:Text "pbcc ψ a) (where pbc = Get φ **in case** c = ⊗)"@en ;
    askg-onto:inSentence "pbcc ψ a) (where pbc = Get φ **in case** c = ⊗)"^^xsd:string ;
    askg-onto:index "8"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-concept,
        askg-data:Entity-get_%CF%86_in_case_c__,
        askg-data:Entity-pbc,
        askg-data:Entity-pbcc .

askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-621 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 21"@en ;
    domo:Text "3As did we, at first. Proof. **By unfolding the definitions. Actually, it is the desired effect of the definitions that** we have these properties."@en ;
    askg-onto:hasSentence askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-621-Sentence-6211,
        askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-621-Sentence-6212,
        askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-621-Sentence-6213,
        askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-621-Sentence-6214 ;
    askg-onto:index "21"^^xsd:int .

askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-621-Sentence-6211 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "3As did we, at first."@en ;
    askg-onto:inSentence "3As did we, at first."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-3as,
        askg-data:Entity-we .

askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-621-Sentence-6212 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "Proof."@en ;
    askg-onto:inSentence "Proof."^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-concept,
        askg-data:Entity-proof .

askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-621-Sentence-6213 a askg-onto:Sentence ;
    rdfs:label "Sentence 3"@en ;
    domo:Text "**By unfolding the definitions."@en ;
    askg-onto:inSentence "**By unfolding the definitions."^^xsd:string ;
    askg-onto:index "3"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-concepts,
        askg-data:Entity-definitions .

askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-621-Sentence-6214 a askg-onto:Sentence ;
    rdfs:label "Sentence 4"@en ;
    domo:Text "Actually, it is the desired effect of the definitions that** we have these properties."@en ;
    askg-onto:inSentence "Actually, it is the desired effect of the definitions that** we have these properties."^^xsd:string ;
    askg-onto:index "4"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-definitions,
        askg-data:Entity-properties .

askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-622 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 22"@en ;
    domo:Text "We now set up a bisimulation that shows that tbc ⊗ pab and tbc ⊗′ pab **really represents** the composite eat∞(tbc) · eat∞(pab). Again, the isomorphism PAB ∼= TA(B × PAB**) is left** implicit. Lemma 4.2."@en ;
    askg-onto:hasSentence askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-622-Sentence-6221,
        askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-622-Sentence-6222,
        askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-622-Sentence-6223 ;
    askg-onto:index "22"^^xsd:int .

askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-622-Sentence-6221 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "We now set up a bisimulation that shows that tbc ⊗ pab and tbc ⊗′ pab **really represents** the composite eat∞(tbc) · eat∞(pab)."@en ;
    askg-onto:inSentence "We now set up a bisimulation that shows that tbc ⊗ pab and tbc ⊗′ pab **really represents** the composite eat∞(tbc) · eat∞(pab)."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-composite_eattbc__eatpab,
        askg-data:Entity-tbc__pab .

askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-622-Sentence-6222 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "Again, the isomorphism PAB ∼= TA(B × PAB**) is left** implicit."@en ;
    askg-onto:inSentence "Again, the isomorphism PAB ∼= TA(B × PAB**) is left** implicit."^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-pab,
        askg-data:Entity-tab__pab .

askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-622-Sentence-6223 a askg-onto:Sentence ;
    rdfs:label "Sentence 3"@en ;
    domo:Text "Lemma 4.2."@en ;
    askg-onto:inSentence "Lemma 4.2."^^xsd:string ;
    askg-onto:index "3"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-lemma_42,
        askg-data:Entity-publication .

askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-623 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 23"@en ;
    domo:Text "R = {(eat∞(pbcc tab,α), eat ∞(pbc, eat∞(tab,α)))| α ∈ A ω} is a bisimulation on C ωif **∈ {⊗** c , ⊗′}."@en ;
    askg-onto:hasSentence askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-623-Sentence-6231 ;
    askg-onto:index "23"^^xsd:int .

askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-623-Sentence-6231 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "R = {(eat∞(pbcc tab,α), eat ∞(pbc, eat∞(tab,α)))| α ∈ A ω} is a bisimulation on C ωif **∈ {⊗** c , ⊗′}."@en ;
    askg-onto:inSentence "R = {(eat∞(pbcc tab,α), eat ∞(pbc, eat∞(tab,α)))| α ∈ A ω} is a bisimulation on C ωif **∈ {⊗** c , ⊗′}."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-,
        askg-data:Entity-%CE%B1,
        askg-data:Entity-_c,
        askg-data:Entity-_c__,
        askg-data:Entity-bisimulation,
        askg-data:Entity-c_%CF%89,
        askg-data:Entity-element_of,
        askg-data:Entity-r .

askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-624 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 24"@en ;
    domo:Text "Proof. **It is enough to prove that** (1) hd(eat∞(pbcc tab,α)) = hd(eat∞(pbc, eat∞(tab,α))) (2) tl(eat∞(pbcc tab,α)),tl(eat∞(pbc, eat∞(tab,α))) ∈ R for all pbc ∈ PBC and and all tab ∈ PAB and all α ∈ Aω**. The proof relies on the following** identities, which are readily derived using Lemma 4.1: Case pbc = Ret(c,qbc)."@en ;
    askg-onto:hasSentence askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-624-Sentence-6241,
        askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-624-Sentence-6242,
        askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-624-Sentence-6243 ;
    askg-onto:index "24"^^xsd:int .

askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-624-Sentence-6241 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "Proof."@en ;
    askg-onto:inSentence "Proof."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-concept,
        askg-data:Entity-proof .

askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-624-Sentence-6242 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "**It is enough to prove that** (1) hd(eat∞(pbcc tab,α)) = hd(eat∞(pbc, eat∞(tab,α))) (2) tl(eat∞(pbcc tab,α)),tl(eat∞(pbc, eat∞(tab,α))) ∈ R for all pbc ∈ PBC and and all tab ∈ PAB and all α ∈ Aω**."@en ;
    askg-onto:inSentence "**It is enough to prove that** (1) hd(eat∞(pbcc tab,α)) = hd(eat∞(pbc, eat∞(tab,α))) (2) tl(eat∞(pbcc tab,α)),tl(eat∞(pbc, eat∞(tab,α))) ∈ R for all pbc ∈ PBC and and all tab ∈ PAB and all α ∈ Aω**."^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-%CE%B1,
        askg-data:Entity-a%CF%89,
        askg-data:Entity-eatpbcc_tab%CE%B1,
        askg-data:Entity-hdeatpbc_eattab%CE%B1,
        askg-data:Entity-pab,
        askg-data:Entity-pbc,
        askg-data:Entity-r,
        askg-data:Entity-tab,
        askg-data:Entity-tleatpbcc_tab%CE%B1 .

askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-624-Sentence-6243 a askg-onto:Sentence ;
    rdfs:label "Sentence 3"@en ;
    domo:Text "The proof relies on the following** identities, which are readily derived using Lemma 4.1: Case pbc = Ret(c,qbc)."@en ;
    askg-onto:inSentence "The proof relies on the following** identities, which are readily derived using Lemma 4.1: Case pbc = Ret(c,qbc)."^^xsd:string ;
    askg-onto:index "3"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-identities,
        askg-data:Entity-lemma_41,
        askg-data:Entity-pbc,
        askg-data:Entity-retcqbc .

askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-625 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 25"@en ;
    domo:Text "eat∞(pbcc tab,α) = c \\# eat∞(qbcc tab,α) eat∞(pbc, eat∞(tab,α)) = c \\# eat∞(qbc, eat∞(tab,α)) Case pbc = Get φ and tab = Ret(b,tab)."@en ;
    askg-onto:hasSentence askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-625-Sentence-6251 ;
    askg-onto:index "25"^^xsd:int .

askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-625-Sentence-6251 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "eat∞(pbcc tab,α) = c \\# eat∞(qbcc tab,α) eat∞(pbc, eat∞(tab,α)) = c \\# eat∞(qbc, eat∞(tab,α)) Case pbc = Get φ and tab = Ret(b,tab)."@en ;
    askg-onto:inSentence "eat∞(pbcc tab,α) = c \\# eat∞(qbcc tab,α) eat∞(pbc, eat∞(tab,α)) = c \\# eat∞(qbc, eat∞(tab,α)) Case pbc = Get φ and tab = Ret(b,tab)."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-c,
        askg-data:Entity-eattab%CE%B1,
        askg-data:Entity-get_%CF%86,
        askg-data:Entity-pbc,
        askg-data:Entity-pbcc_tab,
        askg-data:Entity-qbc,
        askg-data:Entity-qbcc_tab,
        askg-data:Entity-retbtab,
        askg-data:Entity-tab .

askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-626 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 26"@en ;
    domo:Text "eat∞(pbcc tab,α) = eat∞((φb)c tab,α) eat∞(pbc, eat∞tabα) = eat∞(φb, eat∞(tab,α))."@en ;
    askg-onto:hasSentence askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-626-Sentence-6261 ;
    askg-onto:index "26"^^xsd:int .

askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-626-Sentence-6261 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "eat∞(pbcc tab,α) = eat∞((φb)c tab,α) eat∞(pbc, eat∞tabα) = eat∞(φb, eat∞(tab,α))."@en ;
    askg-onto:inSentence "eat∞(pbcc tab,α) = eat∞((φb)c tab,α) eat∞(pbc, eat∞tabα) = eat∞(φb, eat∞(tab,α))."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-%CE%B1,
        askg-data:Entity-%CF%86b,
        askg-data:Entity-algorithm,
        askg-data:Entity-concept,
        askg-data:Entity-pbc,
        askg-data:Entity-pbcc_tab,
        askg-data:Entity-tab .

askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-627 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 27"@en ;
    domo:Text "Case tab = Get ψ."@en ;
    askg-onto:hasSentence askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-627-Sentence-6271 ;
    askg-onto:index "27"^^xsd:int .

askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-627-Sentence-6271 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "Case tab = Get ψ."@en ;
    askg-onto:inSentence "Case tab = Get ψ."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-%CF%88,
        askg-data:Entity-case_tab .

askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-628 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 28"@en ;
    domo:Text "eat∞(pbcc tab,α) = eat∞(pbcc **ψ a,α**) eat∞(pbc, eat∞(tab,a \\# α)) = eat∞(pbc, eat∞(**ψ a,α**))."@en ;
    askg-onto:hasSentence askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-628-Sentence-6281 ;
    askg-onto:index "28"^^xsd:int .

askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-628-Sentence-6281 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "eat∞(pbcc tab,α) = eat∞(pbcc **ψ a,α**) eat∞(pbc, eat∞(tab,a \\# α)) = eat∞(pbc, eat∞(**ψ a,α**))."@en ;
    askg-onto:inSentence "eat∞(pbcc tab,α) = eat∞(pbcc **ψ a,α**) eat∞(pbc, eat∞(tab,a \\# α)) = eat∞(pbc, eat∞(**ψ a,α**))."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-%CE%B1,
        askg-data:Entity-%CF%88_a,
        askg-data:Entity-pbc,
        askg-data:Entity-pbcc_tab,
        askg-data:Entity-tab .

askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-629 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 29"@en ;
    domo:Text "The claim for c = ⊗ **now follows by nested structural recursion, the outer induction on** the postponent, the inner induction on the preponent; for ⊗′**the nesting is reversed.** Corollary 4.3. Both ⊗ and ⊗′represent composition, i.e. for all pbc **and all** tab ∈ PAB we have eat∞(pbcc tab) = eat∞tbc · eat∞pab."@en ;
    askg-onto:hasSentence askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-629-Sentence-6291,
        askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-629-Sentence-6292,
        askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-629-Sentence-6293 ;
    askg-onto:index "29"^^xsd:int .

askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-629-Sentence-6291 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "The claim for c = ⊗ **now follows by nested structural recursion, the outer induction on** the postponent, the inner induction on the preponent; for ⊗′**the nesting is reversed.** Corollary 4.3."@en ;
    askg-onto:inSentence "The claim for c = ⊗ **now follows by nested structural recursion, the outer induction on** the postponent, the inner induction on the preponent; for ⊗′**the nesting is reversed.** Corollary 4.3."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-,
        askg-data:Entity-c,
        askg-data:Entity-inner_induction,
        askg-data:Entity-nested_structural_recursion,
        askg-data:Entity-nesting,
        askg-data:Entity-outer_induction,
        askg-data:Entity-postponent,
        askg-data:Entity-preponent .

askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-629-Sentence-6292 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "Both ⊗ and ⊗′represent composition, i.e."@en ;
    askg-onto:inSentence "Both ⊗ and ⊗′represent composition, i.e."^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-,
        askg-data:Entity-composition .

askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-629-Sentence-6293 a askg-onto:Sentence ;
    rdfs:label "Sentence 3"@en ;
    domo:Text "for all pbc **and all** tab ∈ PAB we have eat∞(pbcc tab) = eat∞tbc · eat∞pab."@en ;
    askg-onto:inSentence "for all pbc **and all** tab ∈ PAB we have eat∞(pbcc tab) = eat∞tbc · eat∞pab."^^xsd:string ;
    askg-onto:index "3"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-eatpbcc_tab,
        askg-data:Entity-eattbc__eatpab,
        askg-data:Entity-pbc,
        askg-data:Entity-tab .

askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-63 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 3"@en ;
    domo:Text "First, we define a coalgebra χ for the functor TA ·(C×**). The carrier will be the product** S∆= TB(C × PBC) × TA(B × PAB**). First, we present the defining equations for** χ in pattern-matching format, as they might be written in a functional program. (This means that in the third equation, tbc must have the form Get φ**.) Then we show how to analyse** this code into nested structural recursions, and so demonstrate that χ **is not just a piece of** code, but actually a function defined by universal properties of the functors TB and TA."@en ;
    askg-onto:hasSentence askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-63-Sentence-631,
        askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-63-Sentence-632,
        askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-63-Sentence-633,
        askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-63-Sentence-634 ;
    askg-onto:index "3"^^xsd:int .

askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-63-Sentence-631 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "First, we define a coalgebra χ for the functor TA ·(C×**)."@en ;
    askg-onto:inSentence "First, we define a coalgebra χ for the functor TA ·(C×**)."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-coalgebra_%CF%87,
        askg-data:Entity-functor_ta_c .

askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-63-Sentence-632 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "The carrier will be the product** S∆= TB(C × PBC) × TA(B × PAB**)."@en ;
    askg-onto:inSentence "The carrier will be the product** S∆= TB(C × PBC) × TA(B × PAB**)."^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-s,
        askg-data:Entity-tbc__pbc__tab__pab .

askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-63-Sentence-633 a askg-onto:Sentence ;
    rdfs:label "Sentence 3"@en ;
    domo:Text "First, we present the defining equations for** χ in pattern-matching format, as they might be written in a functional program."@en ;
    askg-onto:inSentence "First, we present the defining equations for** χ in pattern-matching format, as they might be written in a functional program."^^xsd:string ;
    askg-onto:index "3"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-%CF%87,
        askg-data:Entity-equations,
        askg-data:Entity-functional_program,
        askg-data:Entity-pattern-matching_format,
        askg-data:Entity-programming_paradigm .

askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-63-Sentence-634 a askg-onto:Sentence ;
    rdfs:label "Sentence 4"@en ;
    domo:Text "(This means that in the third equation, tbc must have the form Get φ**.) Then we show how to analyse** this code into nested structural recursions, and so demonstrate that χ **is not just a piece of** code, but actually a function defined by universal properties of the functors TB and TA."@en ;
    askg-onto:inSentence "(This means that in the third equation, tbc must have the form Get φ**.) Then we show how to analyse** this code into nested structural recursions, and so demonstrate that χ **is not just a piece of** code, but actually a function defined by universal properties of the functors TB and TA."^^xsd:string ;
    askg-onto:index "4"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-%CF%87,
        askg-data:Entity-code,
        askg-data:Entity-functor,
        askg-data:Entity-functors_ta,
        askg-data:Entity-functors_tb,
        askg-data:Entity-get_%CF%86,
        askg-data:Entity-nested_structural_recursions,
        askg-data:Entity-tbc,
        askg-data:Entity-this_code,
        askg-data:Entity-universal_properties_of_the_functors_tb_and_ta .

askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-630 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 30"@en ;
    domo:Text "for **∈ {⊗** c , ⊗′}."@en ;
    askg-onto:hasSentence askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-630-Sentence-6301 ;
    askg-onto:index "30"^^xsd:int .

askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-630-Sentence-6301 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "for **∈ {⊗** c , ⊗′}."@en ;
    askg-onto:inSentence "for **∈ {⊗** c , ⊗′}."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-,
        askg-data:Entity-c .

askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-631 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 31"@en ;
    domo:Text "Proof. Immediate from the fact that R**, defined above, is a bisimulation and the fact that** all bisimulations on a final coalgebra are contained in the diagonal."@en ;
    askg-onto:hasSentence askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-631-Sentence-6311,
        askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-631-Sentence-6312 ;
    askg-onto:index "31"^^xsd:int .

askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-631-Sentence-6311 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "Proof."@en ;
    askg-onto:inSentence "Proof."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-concept,
        askg-data:Entity-proof .

askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-631-Sentence-6312 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "Immediate from the fact that R**, defined above, is a bisimulation and the fact that** all bisimulations on a final coalgebra are contained in the diagonal."@en ;
    askg-onto:inSentence "Immediate from the fact that R**, defined above, is a bisimulation and the fact that** all bisimulations on a final coalgebra are contained in the diagonal."^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-bisimulation,
        askg-data:Entity-bisimulations,
        askg-data:Entity-r,
        askg-data:Entity-the_diagonal .

askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-64 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 4"@en ;
    domo:Text "| | | postponent | | | | | preponent | | | | | | |--------|------|--------------|------|----|----|-------|-------------|----------|----|-------|---------|------------| | z | | }\\| | | { | | z | }\\| | { | | | | | | χ : | TB(C | × | PBC) | | × | TA(B | × | PAB)→ | | TA(C | × | S) | | χh Ret | | hc,pbci | | | | ,tabi | | | = | Ret | hc,hout | pbc,tabii | | χh Get | φ | | | | | , Ret | | hb,pabii | = | χhφb, | out | pabi | | χhtbc | | | | | | , Get | ψi | | = | Get | (λa) | χhtbc,ψ ai |"@en ;
    askg-onto:hasSentence askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-64-Sentence-641 ;
    askg-onto:index "4"^^xsd:int .

askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-64-Sentence-641 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "| | | postponent | | | | | preponent | | | | | | |--------|------|--------------|------|----|----|-------|-------------|----------|----|-------|---------|------------| | z | | }\\| | | { | | z | }\\| | { | | | | | | χ : | TB(C | × | PBC) | | × | TA(B | × | PAB)→ | | TA(C | × | S) | | χh Ret | | hc,pbci | | | | ,tabi | | | = | Ret | hc,hout | pbc,tabii | | χh Get | φ | | | | | , Ret | | hb,pabii | = | χhφb, | out | pabi | | χhtbc | | | | | | , Get | ψi | | = | Get | (λa) | χhtbc,ψ ai |"@en ;
    askg-onto:inSentence "| | | postponent | | | | | preponent | | | | | | |--------|------|--------------|------|----|----|-------|-------------|----------|----|-------|---------|------------| | z | | }\\| | | { | | z | }\\| | { | | | | | | χ : | TB(C | × | PBC) | | × | TA(B | × | PAB)→ | | TA(C | × | S) | | χh Ret | | hc,pbci | | | | ,tabi | | | = | Ret | hc,hout | pbc,tabii | | χh Get | φ | | | | | , Ret | | hb,pabii | = | χhφb, | out | pabi | | χhtbc | | | | | | , Get | ψi | | = | Get | (λa) | χhtbc,ψ ai |"^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-%CE%BBa,
        askg-data:Entity-get,
        askg-data:Entity-pabi,
        askg-data:Entity-ret .

askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-65 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 5"@en ;
    domo:Text "$$\\begin{array}{r l}{{\\overbrace{T_{A}(B\\times P_{A}B)}^{}\\to T_{A}(C\\times S)}}\\\\ {\\;,t_{a b}\\rangle\\qquad}&{{}=\\mathbf{R e t\\left\\langle c,\\left\\langle o u t\\,p_{b c},t_{a b}\\right\\rangle\\right\\rangle}}\\\\ {\\;,\\mathbf{R e t\\left\\langle b,p_{a b}\\right\\rangle\\right\\rangle}=\\chi\\langle\\phi\\,b,o u t\\,p_{a b}\\rangle}\\\\ {\\;,\\mathbf{G e t\\,\\psi\\rangle}\\qquad}&{{}=\\mathbf{G e t\\left(\\lambda\\,a\\right)\\chi\\langle t_{b c},\\psi\\,a\\rangle}}\\end{array}$$"@en ;
    askg-onto:hasSentence askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-65-Sentence-651 ;
    askg-onto:index "5"^^xsd:int .

askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-65-Sentence-651 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "$$\\begin{array}{r l}{{\\overbrace{T_{A}(B\\times P_{A}B)}^{}\\to T_{A}(C\\times S)}}\\\\ {\\;,t_{a b}\\rangle\\qquad}&{{}=\\mathbf{R e t\\left\\langle c,\\left\\langle o u t\\,p_{b c},t_{a b}\\right\\rangle\\right\\rangle}}\\\\ {\\;,\\mathbf{R e t\\left\\langle b,p_{a b}\\right\\rangle\\right\\rangle}=\\chi\\langle\\phi\\,b,o u t\\,p_{a b}\\rangle}\\\\ {\\;,\\mathbf{G e t\\,\\psi\\rangle}\\qquad}&{{}=\\mathbf{G e t\\left(\\lambda\\,a\\right)\\chi\\langle t_{b c},\\psi\\,a\\rangle}}\\end{array}$$"@en ;
    askg-onto:inSentence "$$\\begin{array}{r l}{{\\overbrace{T_{A}(B\\times P_{A}B)}^{}\\to T_{A}(C\\times S)}}\\\\ {\\;,t_{a b}\\rangle\\qquad}&{{}=\\mathbf{R e t\\left\\langle c,\\left\\langle o u t\\,p_{b c},t_{a b}\\right\\rangle\\right\\rangle}}\\\\ {\\;,\\mathbf{R e t\\left\\langle b,p_{a b}\\right\\rangle\\right\\rangle}=\\chi\\langle\\phi\\,b,o u t\\,p_{a b}\\rangle}\\\\ {\\;,\\mathbf{G e t\\,\\psi\\rangle}\\qquad}&{{}=\\mathbf{G e t\\left(\\lambda\\,a\\right)\\chi\\langle t_{b c},\\psi\\,a\\rangle}}\\end{array}$$"^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-%0A%09%09%09%09extget%09ext%CE%BBa,
        askg-data:Entity-%0A%09%09%09%09extout%09imes_p_b_c,
        askg-data:Entity-%0A%09%09%09%09extt_b_c,
        askg-data:Entity-b,
        askg-data:Entity-c,
        askg-data:Entity-g_e_t,
        askg-data:Entity-r_e_t,
        askg-data:Entity-t_abp_ab,
        askg-data:Entity-t_acs .

askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-66 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 6"@en ;
    domo:Text "Note that in the second equation, χ at Get φ is defined in terms of χ at φb**, and hence the** postponent 'goes down' one step in the outer structural recursion (though the preponent may 'go up', arbitrarily far)."@en ;
    askg-onto:hasSentence askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-66-Sentence-661 ;
    askg-onto:index "6"^^xsd:int .

askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-66-Sentence-661 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "Note that in the second equation, χ at Get φ is defined in terms of χ at φb**, and hence the** postponent 'goes down' one step in the outer structural recursion (though the preponent may 'go up', arbitrarily far)."@en ;
    askg-onto:inSentence "Note that in the second equation, χ at Get φ is defined in terms of χ at φb**, and hence the** postponent 'goes down' one step in the outer structural recursion (though the preponent may 'go up', arbitrarily far)."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-%CF%87_at_%CF%86b,
        askg-data:Entity-%CF%87_at_get_%CF%86,
        askg-data:Entity-arbitrarily_far,
        askg-data:Entity-one_step,
        askg-data:Entity-postponent,
        askg-data:Entity-preponent .

askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-67 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 7"@en ;
    domo:Text "It is routine to tease the recursion into the form of nested structural recursions. The outer recursion is on the structure of the postponent TB(C × PBC**), with an inner or** subordinate recursion on the structure of the preponent TA(B × PAB**). To write it down,** we use a polymorphic function"@en ;
    askg-onto:hasSentence askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-67-Sentence-671,
        askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-67-Sentence-672,
        askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-67-Sentence-673 ;
    askg-onto:index "7"^^xsd:int .

askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-67-Sentence-671 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "It is routine to tease the recursion into the form of nested structural recursions."@en ;
    askg-onto:inSentence "It is routine to tease the recursion into the form of nested structural recursions."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-nested_structural_recursions,
        askg-data:Entity-recursion .

askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-67-Sentence-672 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "The outer recursion is on the structure of the postponent TB(C × PBC**), with an inner or** subordinate recursion on the structure of the preponent TA(B × PAB**)."@en ;
    askg-onto:inSentence "The outer recursion is on the structure of the postponent TB(C × PBC**), with an inner or** subordinate recursion on the structure of the preponent TA(B × PAB**)."^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-postponent,
        askg-data:Entity-preponent,
        askg-data:Entity-tab__pab,
        askg-data:Entity-tbc__pbc .

askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-67-Sentence-673 a askg-onto:Sentence ;
    rdfs:label "Sentence 3"@en ;
    domo:Text "To write it down,** we use a polymorphic function"@en ;
    askg-onto:inSentence "To write it down,** we use a polymorphic function"^^xsd:string ;
    askg-onto:index "3"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-a_polymorphic_function,
        askg-data:Entity-we .

askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-68 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 8"@en ;
    domo:Text "$$\\begin{array}{r l}{f o l d:(B\\to C)\\to((A\\to C)\\to C)\\to T_{A}B\\to C}\\\\ {f o l d\\,p\\,g\\,(\\mathbf{R e t}\\,b)}&{{}=p\\,b}\\\\ {f o l d\\,p\\,g\\,(\\mathbf{G e t}\\,\\phi)}&{{}=g\\,((\\lambda\\,a:A)\\,f o l d\\,p\\,g\\,(\\phi a))}\\end{array}$$"@en ;
    askg-onto:hasSentence askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-68-Sentence-681 ;
    askg-onto:index "8"^^xsd:int .

askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-68-Sentence-681 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "$$\\begin{array}{r l}{f o l d:(B\\to C)\\to((A\\to C)\\to C)\\to T_{A}B\\to C}\\\\ {f o l d\\,p\\,g\\,(\\mathbf{R e t}\\,b)}&{{}=p\\,b}\\\\ {f o l d\\,p\\,g\\,(\\mathbf{G e t}\\,\\phi)}&{{}=g\\,((\\lambda\\,a:A)\\,f o l d\\,p\\,g\\,(\\phi a))}\\end{array}$$"@en ;
    askg-onto:inSentence "$$\\begin{array}{r l}{f o l d:(B\\to C)\\to((A\\to C)\\to C)\\to T_{A}B\\to C}\\\\ {f o l d\\,p\\,g\\,(\\mathbf{R e t}\\,b)}&{{}=p\\,b}\\\\ {f o l d\\,p\\,g\\,(\\mathbf{G e t}\\,\\phi)}&{{}=g\\,((\\lambda\\,a:A)\\,f o l d\\,p\\,g\\,(\\phi a))}\\end{array}$$"^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-a,
        askg-data:Entity-b,
        askg-data:Entity-fold,
        askg-data:Entity-function,
        askg-data:Entity-g,
        askg-data:Entity-get,
        askg-data:Entity-lambda,
        askg-data:Entity-p,
        askg-data:Entity-parameter,
        askg-data:Entity-phi,
        askg-data:Entity-ret,
        askg-data:Entity-variable .

askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-69 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 9"@en ;
    domo:Text "to express structural recursion over wellfounded trees, or **in categorical terms the initiality** of [Ret|Get] among algebras [p|g**] : (**B + C A) → C. The definition of χ **can then be given** in the form"@en ;
    askg-onto:hasSentence askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-69-Sentence-691,
        askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-69-Sentence-692 ;
    askg-onto:index "9"^^xsd:int .

askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-69-Sentence-691 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "to express structural recursion over wellfounded trees, or **in categorical terms the initiality** of [Ret|Get] among algebras [p|g**] : (**B + C A) → C."@en ;
    askg-onto:inSentence "to express structural recursion over wellfounded trees, or **in categorical terms the initiality** of [Ret|Get] among algebras [p|g**] : (**B + C A) → C."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-algebras,
        askg-data:Entity-b__c_a__c,
        askg-data:Entity-initiality,
        askg-data:Entity-retget,
        askg-data:Entity-structural_recursion,
        askg-data:Entity-wellfounded_trees .

askg-data:Paper-978f1c811f3bfb5d-Section-6-Paragraph-69-Sentence-692 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "The definition of χ **can then be given** in the form"@en ;
    askg-onto:inSentence "The definition of χ **can then be given** in the form"^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-%CF%87,
        askg-data:Entity-definition .

askg-data:Paper-978f1c811f3bfb5d-Section-7 a askg-onto:Section ;
    rdfs:label "Section 7"@en ;
    domo:Text "5. **Conclusion, Related Work**"@en ;
    askg-onto:hasParagraph askg-data:Paper-978f1c811f3bfb5d-Section-7-Paragraph-71,
        askg-data:Paper-978f1c811f3bfb5d-Section-7-Paragraph-710,
        askg-data:Paper-978f1c811f3bfb5d-Section-7-Paragraph-711,
        askg-data:Paper-978f1c811f3bfb5d-Section-7-Paragraph-72,
        askg-data:Paper-978f1c811f3bfb5d-Section-7-Paragraph-73,
        askg-data:Paper-978f1c811f3bfb5d-Section-7-Paragraph-74,
        askg-data:Paper-978f1c811f3bfb5d-Section-7-Paragraph-75,
        askg-data:Paper-978f1c811f3bfb5d-Section-7-Paragraph-76,
        askg-data:Paper-978f1c811f3bfb5d-Section-7-Paragraph-77,
        askg-data:Paper-978f1c811f3bfb5d-Section-7-Paragraph-78,
        askg-data:Paper-978f1c811f3bfb5d-Section-7-Paragraph-79 ;
    askg-onto:index "7"^^xsd:int ;
    askg-onto:level "2"^^xsd:int .

askg-data:Paper-978f1c811f3bfb5d-Section-7-Paragraph-71 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 1"@en ;
    domo:Text "We have defined computationally natural representations of **continuous functions on** streams, and proved completeness of these representations **for the classically understood** notion of continuity. This involved teasing apart the fixed points involved into those that are initial and those that are final. We also defined combinators on representations that represent the composition of the functions they represent."@en ;
    askg-onto:hasSentence askg-data:Paper-978f1c811f3bfb5d-Section-7-Paragraph-71-Sentence-711,
        askg-data:Paper-978f1c811f3bfb5d-Section-7-Paragraph-71-Sentence-712,
        askg-data:Paper-978f1c811f3bfb5d-Section-7-Paragraph-71-Sentence-713 ;
    askg-onto:index "1"^^xsd:int .

askg-data:Paper-978f1c811f3bfb5d-Section-7-Paragraph-71-Sentence-711 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "We have defined computationally natural representations of **continuous functions on** streams, and proved completeness of these representations **for the classically understood** notion of continuity."@en ;
    askg-onto:inSentence "We have defined computationally natural representations of **continuous functions on** streams, and proved completeness of these representations **for the classically understood** notion of continuity."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-continuity,
        askg-data:Entity-continuous_functions,
        askg-data:Entity-notion_of_continuity,
        askg-data:Entity-representations,
        askg-data:Entity-streams .

askg-data:Paper-978f1c811f3bfb5d-Section-7-Paragraph-71-Sentence-712 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "This involved teasing apart the fixed points involved into those that are initial and those that are final."@en ;
    askg-onto:inSentence "This involved teasing apart the fixed points involved into those that are initial and those that are final."^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-final,
        askg-data:Entity-fixed_points,
        askg-data:Entity-initial .

askg-data:Paper-978f1c811f3bfb5d-Section-7-Paragraph-71-Sentence-713 a askg-onto:Sentence ;
    rdfs:label "Sentence 3"@en ;
    domo:Text "We also defined combinators on representations that represent the composition of the functions they represent."@en ;
    askg-onto:inSentence "We also defined combinators on representations that represent the composition of the functions they represent."^^xsd:string ;
    askg-onto:index "3"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-combinators,
        askg-data:Entity-compositions,
        askg-data:Entity-functions .

askg-data:Paper-978f1c811f3bfb5d-Section-7-Paragraph-710 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 10"@en ;
    domo:Text "The notion of arrow, introduced to functional programming by Hughes [10] was developed to express compositional infrastructure in programming generalising that of Kleisli morphisms for a monad, and crucially interacting with a tensor combinator according to some reasonable laws. The reference [6] provides a useful perspective. Abstractly, an arrow is a monoid in a certain category of bifunctors. Our stream processors behave quite well with respect to composition (·**), but it is not clear to us how nicely they play with operators** such as +, × **and other multi-input combinators. It may be that one has to get to grips** with notions of fairness, such as fair merging, in connection with such combinators. Another direction for further development is to investigate combinations of stream processors in which, as in many applications of stream processing, there are forms of feedback, or looping."@en ;
    askg-onto:hasSentence askg-data:Paper-978f1c811f3bfb5d-Section-7-Paragraph-710-Sentence-7101,
        askg-data:Paper-978f1c811f3bfb5d-Section-7-Paragraph-710-Sentence-7102,
        askg-data:Paper-978f1c811f3bfb5d-Section-7-Paragraph-710-Sentence-7103,
        askg-data:Paper-978f1c811f3bfb5d-Section-7-Paragraph-710-Sentence-7104,
        askg-data:Paper-978f1c811f3bfb5d-Section-7-Paragraph-710-Sentence-7105,
        askg-data:Paper-978f1c811f3bfb5d-Section-7-Paragraph-710-Sentence-7106 ;
    askg-onto:index "10"^^xsd:int .

askg-data:Paper-978f1c811f3bfb5d-Section-7-Paragraph-710-Sentence-7101 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "The notion of arrow, introduced to functional programming by Hughes [10] was developed to express compositional infrastructure in programming generalising that of Kleisli morphisms for a monad, and crucially interacting with a tensor combinator according to some reasonable laws."@en ;
    askg-onto:inSentence "The notion of arrow, introduced to functional programming by Hughes [10] was developed to express compositional infrastructure in programming generalising that of Kleisli morphisms for a monad, and crucially interacting with a tensor combinator according to some reasonable laws."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-arrow,
        askg-data:Entity-compositional_infrastructure,
        askg-data:Entity-functional_programming,
        askg-data:Entity-hughes,
        askg-data:Entity-kleisli_morphisms,
        askg-data:Entity-monad,
        askg-data:Entity-reasonable_laws,
        askg-data:Entity-tensor_combinator .

askg-data:Paper-978f1c811f3bfb5d-Section-7-Paragraph-710-Sentence-7102 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "The reference [6] provides a useful perspective."@en ;
    askg-onto:inSentence "The reference [6] provides a useful perspective."^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-perspective,
        askg-data:Entity-reference_6 .

askg-data:Paper-978f1c811f3bfb5d-Section-7-Paragraph-710-Sentence-7103 a askg-onto:Sentence ;
    rdfs:label "Sentence 3"@en ;
    domo:Text "Abstractly, an arrow is a monoid in a certain category of bifunctors."@en ;
    askg-onto:inSentence "Abstractly, an arrow is a monoid in a certain category of bifunctors."^^xsd:string ;
    askg-onto:index "3"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-arrow,
        askg-data:Entity-bifunctors,
        askg-data:Entity-monoid .

askg-data:Paper-978f1c811f3bfb5d-Section-7-Paragraph-710-Sentence-7104 a askg-onto:Sentence ;
    rdfs:label "Sentence 4"@en ;
    domo:Text "Our stream processors behave quite well with respect to composition (·**), but it is not clear to us how nicely they play with operators** such as +, × **and other multi-input combinators."@en ;
    askg-onto:inSentence "Our stream processors behave quite well with respect to composition (·**), but it is not clear to us how nicely they play with operators** such as +, × **and other multi-input combinators."^^xsd:string ;
    askg-onto:index "4"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-,
        askg-data:Entity-composition,
        askg-data:Entity-operators,
        askg-data:Entity-other_multi-input_combinators,
        askg-data:Entity-stream_processors .

askg-data:Paper-978f1c811f3bfb5d-Section-7-Paragraph-710-Sentence-7105 a askg-onto:Sentence ;
    rdfs:label "Sentence 5"@en ;
    domo:Text "It may be that one has to get to grips** with notions of fairness, such as fair merging, in connection with such combinators."@en ;
    askg-onto:inSentence "It may be that one has to get to grips** with notions of fairness, such as fair merging, in connection with such combinators."^^xsd:string ;
    askg-onto:index "5"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-combinators,
        askg-data:Entity-fair_merging,
        askg-data:Entity-fairness .

askg-data:Paper-978f1c811f3bfb5d-Section-7-Paragraph-710-Sentence-7106 a askg-onto:Sentence ;
    rdfs:label "Sentence 6"@en ;
    domo:Text "Another direction for further development is to investigate combinations of stream processors in which, as in many applications of stream processing, there are forms of feedback, or looping."@en ;
    askg-onto:inSentence "Another direction for further development is to investigate combinations of stream processors in which, as in many applications of stream processing, there are forms of feedback, or looping."^^xsd:string ;
    askg-onto:index "6"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-feedback,
        askg-data:Entity-looping,
        askg-data:Entity-stream_processing,
        askg-data:Entity-stream_processors .

askg-data:Paper-978f1c811f3bfb5d-Section-7-Paragraph-711 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 11"@en ;
    domo:Text "Acknowledgments. Our colleagues Altenkirch and Swierstra have in unpublished work considered the broad topic of modelling impure (effectful) phenomena such as teletype IO [5], mutable heap variables and multithreading. We are grateful to them for interesting conversations on the topic of stream IO, and in particular for pointing out (and debugging) the 'greedy' form of composition mentioned in section 4. Their model of teletype IO in [17], while close to that expounded in this paper, does not address productivity and continuity. Finally we thank the referees for their close scrutiny of the paper, and many valuable suggestions."@en ;
    askg-onto:hasSentence askg-data:Paper-978f1c811f3bfb5d-Section-7-Paragraph-711-Sentence-7111,
        askg-data:Paper-978f1c811f3bfb5d-Section-7-Paragraph-711-Sentence-7112,
        askg-data:Paper-978f1c811f3bfb5d-Section-7-Paragraph-711-Sentence-7113,
        askg-data:Paper-978f1c811f3bfb5d-Section-7-Paragraph-711-Sentence-7114,
        askg-data:Paper-978f1c811f3bfb5d-Section-7-Paragraph-711-Sentence-7115 ;
    askg-onto:index "11"^^xsd:int .

askg-data:Paper-978f1c811f3bfb5d-Section-7-Paragraph-711-Sentence-7111 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "Acknowledgments."@en ;
    askg-onto:inSentence "Acknowledgments."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-acknowledgments,
        askg-data:Entity-acknowledgments_section .

askg-data:Paper-978f1c811f3bfb5d-Section-7-Paragraph-711-Sentence-7112 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "Our colleagues Altenkirch and Swierstra have in unpublished work considered the broad topic of modelling impure (effectful) phenomena such as teletype IO [5], mutable heap variables and multithreading."@en ;
    askg-onto:inSentence "Our colleagues Altenkirch and Swierstra have in unpublished work considered the broad topic of modelling impure (effectful) phenomena such as teletype IO [5], mutable heap variables and multithreading."^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-altenkirch,
        askg-data:Entity-modelling_impure_phenomena,
        askg-data:Entity-multithreading,
        askg-data:Entity-mutable_heap_variables,
        askg-data:Entity-swierstra,
        askg-data:Entity-teletype_io,
        askg-data:Entity-unpublished_work .

askg-data:Paper-978f1c811f3bfb5d-Section-7-Paragraph-711-Sentence-7113 a askg-onto:Sentence ;
    rdfs:label "Sentence 3"@en ;
    domo:Text "We are grateful to them for interesting conversations on the topic of stream IO, and in particular for pointing out (and debugging) the 'greedy' form of composition mentioned in section 4."@en ;
    askg-onto:inSentence "We are grateful to them for interesting conversations on the topic of stream IO, and in particular for pointing out (and debugging) the 'greedy' form of composition mentioned in section 4."^^xsd:string ;
    askg-onto:index "3"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-conversations,
        askg-data:Entity-greedy_form_of_composition,
        askg-data:Entity-section_4,
        askg-data:Entity-stream_io .

askg-data:Paper-978f1c811f3bfb5d-Section-7-Paragraph-711-Sentence-7114 a askg-onto:Sentence ;
    rdfs:label "Sentence 4"@en ;
    domo:Text "Their model of teletype IO in [17], while close to that expounded in this paper, does not address productivity and continuity."@en ;
    askg-onto:inSentence "Their model of teletype IO in [17], while close to that expounded in this paper, does not address productivity and continuity."^^xsd:string ;
    askg-onto:index "4"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-model_of_teletype_io,
        askg-data:Entity-that_expounded_in_this_paper .

askg-data:Paper-978f1c811f3bfb5d-Section-7-Paragraph-711-Sentence-7115 a askg-onto:Sentence ;
    rdfs:label "Sentence 5"@en ;
    domo:Text "Finally we thank the referees for their close scrutiny of the paper, and many valuable suggestions."@en ;
    askg-onto:inSentence "Finally we thank the referees for their close scrutiny of the paper, and many valuable suggestions."^^xsd:string ;
    askg-onto:index "5"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-paper,
        askg-data:Entity-referees .

askg-data:Paper-978f1c811f3bfb5d-Section-7-Paragraph-72 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 2"@en ;
    domo:Text "We consider the main point of this paper to be i) a representation of stream processors as trees - this ensures that our stream processors are total as opposed to the partial functions which exist in the Haskell function space Aω → Bω**; ii) a guarantee that all stream processors** can be represented by such trees; and iii) a demonstration that these trees are well suited to computation - this takes the form of an implementation of the composition of stream processing functions directly on the representatives themselves."@en ;
    askg-onto:hasSentence askg-data:Paper-978f1c811f3bfb5d-Section-7-Paragraph-72-Sentence-721 ;
    askg-onto:index "2"^^xsd:int .

askg-data:Paper-978f1c811f3bfb5d-Section-7-Paragraph-72-Sentence-721 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "We consider the main point of this paper to be i) a representation of stream processors as trees - this ensures that our stream processors are total as opposed to the partial functions which exist in the Haskell function space Aω → Bω**; ii) a guarantee that all stream processors** can be represented by such trees; and iii) a demonstration that these trees are well suited to computation - this takes the form of an implementation of the composition of stream processing functions directly on the representatives themselves."@en ;
    askg-onto:inSentence "We consider the main point of this paper to be i) a representation of stream processors as trees - this ensures that our stream processors are total as opposed to the partial functions which exist in the Haskell function space Aω → Bω**; ii) a guarantee that all stream processors** can be represented by such trees; and iii) a demonstration that these trees are well suited to computation - this takes the form of an implementation of the composition of stream processing functions directly on the representatives themselves."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-composition_of_stream_processing_functions,
        askg-data:Entity-computation,
        askg-data:Entity-representatives,
        askg-data:Entity-stream_processors,
        askg-data:Entity-trees .

askg-data:Paper-978f1c811f3bfb5d-Section-7-Paragraph-73 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 3"@en ;
    domo:Text "There may also be advantages of a more technical nature. Very **often when a function** is represented by a data structure, such as a wellfounded or infinite tree, the function is automatically 'memoised' - its values for particular arguments are recorded in the data, and need not be recomputed if they are needed again. For example, the representation of functions on finitary inductive types by coinductive trees (in general, final coalgebras for certain rank 2 functors) discovered by Hinze [7] and Altenkirch [1] have this property. The same phenomenon may occur with our representation of stream **functions. However their** work is concerned with functions on inductive types, as is natural with initial algebras, whereas ours is primarily concerned with functions on coinductive types, which is in the opposite direction from the universal maps associated with **final coalgebras.** Our representations are not unique, though different representations of the same function correspond to computationally different behaviour. Interesting further work might be to investigate the equivalence relation between representations corresponding to (extensional) equality between the represented functions. The relation is clearly not decidable, and may be hyperarithmetic or worse (when the data items consumed and produced are natural numbers)."@en ;
    askg-onto:hasSentence askg-data:Paper-978f1c811f3bfb5d-Section-7-Paragraph-73-Sentence-731,
        askg-data:Paper-978f1c811f3bfb5d-Section-7-Paragraph-73-Sentence-732,
        askg-data:Paper-978f1c811f3bfb5d-Section-7-Paragraph-73-Sentence-733,
        askg-data:Paper-978f1c811f3bfb5d-Section-7-Paragraph-73-Sentence-734,
        askg-data:Paper-978f1c811f3bfb5d-Section-7-Paragraph-73-Sentence-735,
        askg-data:Paper-978f1c811f3bfb5d-Section-7-Paragraph-73-Sentence-736,
        askg-data:Paper-978f1c811f3bfb5d-Section-7-Paragraph-73-Sentence-737 ;
    askg-onto:index "3"^^xsd:int .

askg-data:Paper-978f1c811f3bfb5d-Section-7-Paragraph-73-Sentence-731 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "There may also be advantages of a more technical nature."@en ;
    askg-onto:inSentence "There may also be advantages of a more technical nature."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-advantages,
        askg-data:Entity-nature .

askg-data:Paper-978f1c811f3bfb5d-Section-7-Paragraph-73-Sentence-732 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "Very **often when a function** is represented by a data structure, such as a wellfounded or infinite tree, the function is automatically 'memoised' - its values for particular arguments are recorded in the data, and need not be recomputed if they are needed again."@en ;
    askg-onto:inSentence "Very **often when a function** is represented by a data structure, such as a wellfounded or infinite tree, the function is automatically 'memoised' - its values for particular arguments are recorded in the data, and need not be recomputed if they are needed again."^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-data,
        askg-data:Entity-data_structure,
        askg-data:Entity-function,
        askg-data:Entity-needed_again,
        askg-data:Entity-tree,
        askg-data:Entity-values .

askg-data:Paper-978f1c811f3bfb5d-Section-7-Paragraph-73-Sentence-733 a askg-onto:Sentence ;
    rdfs:label "Sentence 3"@en ;
    domo:Text "For example, the representation of functions on finitary inductive types by coinductive trees (in general, final coalgebras for certain rank 2 functors) discovered by Hinze [7] and Altenkirch [1] have this property."@en ;
    askg-onto:inSentence "For example, the representation of functions on finitary inductive types by coinductive trees (in general, final coalgebras for certain rank 2 functors) discovered by Hinze [7] and Altenkirch [1] have this property."^^xsd:string ;
    askg-onto:index "3"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-altenkirch,
        askg-data:Entity-certain_rank_2_functors,
        askg-data:Entity-coinductive_trees,
        askg-data:Entity-final_coalgebras,
        askg-data:Entity-functions_on_finitary_inductive_types,
        askg-data:Entity-hinze .

askg-data:Paper-978f1c811f3bfb5d-Section-7-Paragraph-73-Sentence-734 a askg-onto:Sentence ;
    rdfs:label "Sentence 4"@en ;
    domo:Text "The same phenomenon may occur with our representation of stream **functions."@en ;
    askg-onto:inSentence "The same phenomenon may occur with our representation of stream **functions."^^xsd:string ;
    askg-onto:index "4"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-phenomenon,
        askg-data:Entity-stream_functions .

askg-data:Paper-978f1c811f3bfb5d-Section-7-Paragraph-73-Sentence-735 a askg-onto:Sentence ;
    rdfs:label "Sentence 5"@en ;
    domo:Text "However their** work is concerned with functions on inductive types, as is natural with initial algebras, whereas ours is primarily concerned with functions on coinductive types, which is in the opposite direction from the universal maps associated with **final coalgebras.** Our representations are not unique, though different representations of the same function correspond to computationally different behaviour."@en ;
    askg-onto:inSentence "However their** work is concerned with functions on inductive types, as is natural with initial algebras, whereas ours is primarily concerned with functions on coinductive types, which is in the opposite direction from the universal maps associated with **final coalgebras.** Our representations are not unique, though different representations of the same function correspond to computationally different behaviour."^^xsd:string ;
    askg-onto:index "5"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-computationally_different_behaviour,
        askg-data:Entity-different_representations,
        askg-data:Entity-final_coalgebras,
        askg-data:Entity-functions_on_coinductive_types,
        askg-data:Entity-functions_on_inductive_types,
        askg-data:Entity-initial_algebras,
        askg-data:Entity-universal_maps .

askg-data:Paper-978f1c811f3bfb5d-Section-7-Paragraph-73-Sentence-736 a askg-onto:Sentence ;
    rdfs:label "Sentence 6"@en ;
    domo:Text "Interesting further work might be to investigate the equivalence relation between representations corresponding to (extensional) equality between the represented functions."@en ;
    askg-onto:inSentence "Interesting further work might be to investigate the equivalence relation between representations corresponding to (extensional) equality between the represented functions."^^xsd:string ;
    askg-onto:index "6"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-extensional_equality,
        askg-data:Entity-functions,
        askg-data:Entity-representations .

askg-data:Paper-978f1c811f3bfb5d-Section-7-Paragraph-73-Sentence-737 a askg-onto:Sentence ;
    rdfs:label "Sentence 7"@en ;
    domo:Text "The relation is clearly not decidable, and may be hyperarithmetic or worse (when the data items consumed and produced are natural numbers)."@en ;
    askg-onto:inSentence "The relation is clearly not decidable, and may be hyperarithmetic or worse (when the data items consumed and produced are natural numbers)."^^xsd:string ;
    askg-onto:index "7"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-data_items,
        askg-data:Entity-hyperarithmetic,
        askg-data:Entity-natural_numbers,
        askg-data:Entity-not_decidable,
        askg-data:Entity-relation .

askg-data:Paper-978f1c811f3bfb5d-Section-7-Paragraph-74 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 4"@en ;
    domo:Text "Another question that may deserve further study is to understand and compare the relation between the lazy and greedy forms of composition introduced in section 4. More generally, it may be worth investigating whether there is a real connection between these forms of composition and superficially similar forms of composition in cut-elimination, and algorithmic game theory."@en ;
    askg-onto:hasSentence askg-data:Paper-978f1c811f3bfb5d-Section-7-Paragraph-74-Sentence-741,
        askg-data:Paper-978f1c811f3bfb5d-Section-7-Paragraph-74-Sentence-742 ;
    askg-onto:index "4"^^xsd:int .

askg-data:Paper-978f1c811f3bfb5d-Section-7-Paragraph-74-Sentence-741 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "Another question that may deserve further study is to understand and compare the relation between the lazy and greedy forms of composition introduced in section 4."@en ;
    askg-onto:inSentence "Another question that may deserve further study is to understand and compare the relation between the lazy and greedy forms of composition introduced in section 4."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-greedy_forms_of_composition,
        askg-data:Entity-lazy_forms_of_composition .

askg-data:Paper-978f1c811f3bfb5d-Section-7-Paragraph-74-Sentence-742 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "More generally, it may be worth investigating whether there is a real connection between these forms of composition and superficially similar forms of composition in cut-elimination, and algorithmic game theory."@en ;
    askg-onto:inSentence "More generally, it may be worth investigating whether there is a real connection between these forms of composition and superficially similar forms of composition in cut-elimination, and algorithmic game theory."^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-algorithmic_game_theory,
        askg-data:Entity-cut-elimination,
        askg-data:Entity-forms_of_composition .

askg-data:Paper-978f1c811f3bfb5d-Section-7-Paragraph-75 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 5"@en ;
    domo:Text "The set Aω of streams of values in a set A **is perhaps the simplest example of a final** coalgebra, namely for the functor (×A**), a close relative of the set of natural numbers that** is an initial algebra for the functor (+1). Final coalgebras **are sets of 'infinite' values,** that can model storage, communication and other evolving devices. In other work that we hope to publish in due course, we have generalised Brouwer's **representations so as to cover** continuous functions between structures of other coinductive types than streams, that is to final coalgebras for a useful class of functors beyond (A×**). Broadly the same results can** be obtained as for the stream case, though the generalisation involves more mathematical machinery. The mathematical techniques involve working with indexed families of sets, using an inductive-recursive definition (of such an indexed **family) in a crucial way.** It may be possible to extend these techniques yet further to explore representations of continuous functions on final coalgebras for finitary indexed containers, that are endofunctors on slice categories. Some preliminary investigations **suggest that this might be rather** laborious. On the other hand, it could well be worthwhile. Endofunctors of that kind would allow us to model non-wellfounded proofs**, and so connect our work with Mints' continuous** cut-elimination [13], analysed by Buchholz in [3]. Another **connection that might be made** is with Brotherston and Simpson's non-wellfounded proof systems in [2]. Yet another is with Niwi´nski and Walukiewicz's infinitary proof trees in [15]."@en ;
    askg-onto:hasSentence askg-data:Paper-978f1c811f3bfb5d-Section-7-Paragraph-75-Sentence-751,
        askg-data:Paper-978f1c811f3bfb5d-Section-7-Paragraph-75-Sentence-7510,
        askg-data:Paper-978f1c811f3bfb5d-Section-7-Paragraph-75-Sentence-752,
        askg-data:Paper-978f1c811f3bfb5d-Section-7-Paragraph-75-Sentence-753,
        askg-data:Paper-978f1c811f3bfb5d-Section-7-Paragraph-75-Sentence-754,
        askg-data:Paper-978f1c811f3bfb5d-Section-7-Paragraph-75-Sentence-755,
        askg-data:Paper-978f1c811f3bfb5d-Section-7-Paragraph-75-Sentence-756,
        askg-data:Paper-978f1c811f3bfb5d-Section-7-Paragraph-75-Sentence-757,
        askg-data:Paper-978f1c811f3bfb5d-Section-7-Paragraph-75-Sentence-758,
        askg-data:Paper-978f1c811f3bfb5d-Section-7-Paragraph-75-Sentence-759 ;
    askg-onto:index "5"^^xsd:int .

askg-data:Paper-978f1c811f3bfb5d-Section-7-Paragraph-75-Sentence-751 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "The set Aω of streams of values in a set A **is perhaps the simplest example of a final** coalgebra, namely for the functor (×A**), a close relative of the set of natural numbers that** is an initial algebra for the functor (+1)."@en ;
    askg-onto:inSentence "The set Aω of streams of values in a set A **is perhaps the simplest example of a final** coalgebra, namely for the functor (×A**), a close relative of the set of natural numbers that** is an initial algebra for the functor (+1)."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-final_coalgebra,
        askg-data:Entity-functor_1,
        askg-data:Entity-functor_a,
        askg-data:Entity-set_a%CF%89,
        askg-data:Entity-set_of_natural_numbers .

askg-data:Paper-978f1c811f3bfb5d-Section-7-Paragraph-75-Sentence-7510 a askg-onto:Sentence ;
    rdfs:label "Sentence 10"@en ;
    domo:Text "Yet another is with Niwi´nski and Walukiewicz's infinitary proof trees in [15]."@en ;
    askg-onto:inSentence "Yet another is with Niwi´nski and Walukiewicz's infinitary proof trees in [15]."^^xsd:string ;
    askg-onto:index "10"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-infinitary_proof_trees,
        askg-data:Entity-niwinski,
        askg-data:Entity-proof_system,
        askg-data:Entity-walukiewicz .

askg-data:Paper-978f1c811f3bfb5d-Section-7-Paragraph-75-Sentence-752 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "Final coalgebras **are sets of 'infinite' values,** that can model storage, communication and other evolving devices."@en ;
    askg-onto:inSentence "Final coalgebras **are sets of 'infinite' values,** that can model storage, communication and other evolving devices."^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-final_coalgebras,
        askg-data:Entity-sets_of_infinite_values,
        askg-data:Entity-storage_communication_and_other_evolving_devices .

askg-data:Paper-978f1c811f3bfb5d-Section-7-Paragraph-75-Sentence-753 a askg-onto:Sentence ;
    rdfs:label "Sentence 3"@en ;
    domo:Text "In other work that we hope to publish in due course, we have generalised Brouwer's **representations so as to cover** continuous functions between structures of other coinductive types than streams, that is to final coalgebras for a useful class of functors beyond (A×**)."@en ;
    askg-onto:inSentence "In other work that we hope to publish in due course, we have generalised Brouwer's **representations so as to cover** continuous functions between structures of other coinductive types than streams, that is to final coalgebras for a useful class of functors beyond (A×**)."^^xsd:string ;
    askg-onto:index "3"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-a_useful_class_of_functors,
        askg-data:Entity-brouwers_representations,
        askg-data:Entity-continuous_functions,
        askg-data:Entity-final_coalgebras,
        askg-data:Entity-structures_of_other_coinductive_types .

askg-data:Paper-978f1c811f3bfb5d-Section-7-Paragraph-75-Sentence-754 a askg-onto:Sentence ;
    rdfs:label "Sentence 4"@en ;
    domo:Text "Broadly the same results can** be obtained as for the stream case, though the generalisation involves more mathematical machinery."@en ;
    askg-onto:inSentence "Broadly the same results can** be obtained as for the stream case, though the generalisation involves more mathematical machinery."^^xsd:string ;
    askg-onto:index "4"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-generalisation,
        askg-data:Entity-mathematical_machinery,
        askg-data:Entity-results,
        askg-data:Entity-stream_case .

askg-data:Paper-978f1c811f3bfb5d-Section-7-Paragraph-75-Sentence-755 a askg-onto:Sentence ;
    rdfs:label "Sentence 5"@en ;
    domo:Text "The mathematical techniques involve working with indexed families of sets, using an inductive-recursive definition (of such an indexed **family) in a crucial way.** It may be possible to extend these techniques yet further to explore representations of continuous functions on final coalgebras for finitary indexed containers, that are endofunctors on slice categories."@en ;
    askg-onto:inSentence "The mathematical techniques involve working with indexed families of sets, using an inductive-recursive definition (of such an indexed **family) in a crucial way.** It may be possible to extend these techniques yet further to explore representations of continuous functions on final coalgebras for finitary indexed containers, that are endofunctors on slice categories."^^xsd:string ;
    askg-onto:index "5"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-continuous_functions,
        askg-data:Entity-endofunctors,
        askg-data:Entity-final_coalgebras,
        askg-data:Entity-finitary_indexed_containers,
        askg-data:Entity-indexed_families_of_sets,
        askg-data:Entity-mathematical_techniques,
        askg-data:Entity-slice_categories .

askg-data:Paper-978f1c811f3bfb5d-Section-7-Paragraph-75-Sentence-756 a askg-onto:Sentence ;
    rdfs:label "Sentence 6"@en ;
    domo:Text "Some preliminary investigations **suggest that this might be rather** laborious."@en ;
    askg-onto:inSentence "Some preliminary investigations **suggest that this might be rather** laborious."^^xsd:string ;
    askg-onto:index "6"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-laborious,
        askg-data:Entity-preliminary_investigations .

askg-data:Paper-978f1c811f3bfb5d-Section-7-Paragraph-75-Sentence-757 a askg-onto:Sentence ;
    rdfs:label "Sentence 7"@en ;
    domo:Text "On the other hand, it could well be worthwhile."@en ;
    askg-onto:inSentence "On the other hand, it could well be worthwhile."^^xsd:string ;
    askg-onto:index "7"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-it,
        askg-data:Entity-worthwhile .

askg-data:Paper-978f1c811f3bfb5d-Section-7-Paragraph-75-Sentence-758 a askg-onto:Sentence ;
    rdfs:label "Sentence 8"@en ;
    domo:Text "Endofunctors of that kind would allow us to model non-wellfounded proofs**, and so connect our work with Mints' continuous** cut-elimination [13], analysed by Buchholz in [3]."@en ;
    askg-onto:inSentence "Endofunctors of that kind would allow us to model non-wellfounded proofs**, and so connect our work with Mints' continuous** cut-elimination [13], analysed by Buchholz in [3]."^^xsd:string ;
    askg-onto:index "8"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-buchholz,
        askg-data:Entity-endofunctors,
        askg-data:Entity-mints_continuous_cut-elimination,
        askg-data:Entity-model_non-wellfounded_proofs,
        askg-data:Entity-our_work .

askg-data:Paper-978f1c811f3bfb5d-Section-7-Paragraph-75-Sentence-759 a askg-onto:Sentence ;
    rdfs:label "Sentence 9"@en ;
    domo:Text "Another **connection that might be made** is with Brotherston and Simpson's non-wellfounded proof systems in [2]."@en ;
    askg-onto:inSentence "Another **connection that might be made** is with Brotherston and Simpson's non-wellfounded proof systems in [2]."^^xsd:string ;
    askg-onto:index "9"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-brotherston_and_simpson,
        askg-data:Entity-non-wellfounded_proof_systems .

askg-data:Paper-978f1c811f3bfb5d-Section-7-Paragraph-76 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 6"@en ;
    domo:Text "Stream processing is a very venerable approach to systems design. Streams were used in a central way in the OS6 operating system of Stoy and Strachey [16], as well as in commercial operating systems. The Unix piping system, introduced by McIlroy, is stream based, with buffering handled by the system. In practical programming, a stream facility is often based on something more complicated than a mathematical stream (involving perhaps EOF, length, buffering, bounds, putback, ...). These more feature-full streams inhabit coinductive types for more elaborate functors than (A×**), but they are not substantially** different."@en ;
    askg-onto:hasSentence askg-data:Paper-978f1c811f3bfb5d-Section-7-Paragraph-76-Sentence-761,
        askg-data:Paper-978f1c811f3bfb5d-Section-7-Paragraph-76-Sentence-762,
        askg-data:Paper-978f1c811f3bfb5d-Section-7-Paragraph-76-Sentence-763,
        askg-data:Paper-978f1c811f3bfb5d-Section-7-Paragraph-76-Sentence-764,
        askg-data:Paper-978f1c811f3bfb5d-Section-7-Paragraph-76-Sentence-765 ;
    askg-onto:index "6"^^xsd:int .

askg-data:Paper-978f1c811f3bfb5d-Section-7-Paragraph-76-Sentence-761 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "Stream processing is a very venerable approach to systems design."@en ;
    askg-onto:inSentence "Stream processing is a very venerable approach to systems design."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-approach_to_systems_design,
        askg-data:Entity-stream_processing .

askg-data:Paper-978f1c811f3bfb5d-Section-7-Paragraph-76-Sentence-762 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "Streams were used in a central way in the OS6 operating system of Stoy and Strachey [16], as well as in commercial operating systems."@en ;
    askg-onto:inSentence "Streams were used in a central way in the OS6 operating system of Stoy and Strachey [16], as well as in commercial operating systems."^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-os6_operating_system,
        askg-data:Entity-stoy_and_strachey,
        askg-data:Entity-streams .

askg-data:Paper-978f1c811f3bfb5d-Section-7-Paragraph-76-Sentence-763 a askg-onto:Sentence ;
    rdfs:label "Sentence 3"@en ;
    domo:Text "The Unix piping system, introduced by McIlroy, is stream based, with buffering handled by the system."@en ;
    askg-onto:inSentence "The Unix piping system, introduced by McIlroy, is stream based, with buffering handled by the system."^^xsd:string ;
    askg-onto:index "3"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-mcilroy,
        askg-data:Entity-unix_piping_system .

askg-data:Paper-978f1c811f3bfb5d-Section-7-Paragraph-76-Sentence-764 a askg-onto:Sentence ;
    rdfs:label "Sentence 4"@en ;
    domo:Text "In practical programming, a stream facility is often based on something more complicated than a mathematical stream (involving perhaps EOF, length, buffering, bounds, putback, ...)."@en ;
    askg-onto:inSentence "In practical programming, a stream facility is often based on something more complicated than a mathematical stream (involving perhaps EOF, length, buffering, bounds, putback, ...)."^^xsd:string ;
    askg-onto:index "4"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-mathematical_stream,
        askg-data:Entity-stream_facility .

askg-data:Paper-978f1c811f3bfb5d-Section-7-Paragraph-76-Sentence-765 a askg-onto:Sentence ;
    rdfs:label "Sentence 5"@en ;
    domo:Text "These more feature-full streams inhabit coinductive types for more elaborate functors than (A×**), but they are not substantially** different."@en ;
    askg-onto:inSentence "These more feature-full streams inhabit coinductive types for more elaborate functors than (A×**), but they are not substantially** different."^^xsd:string ;
    askg-onto:index "5"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-coinductive_types,
        askg-data:Entity-functors .

askg-data:Paper-978f1c811f3bfb5d-Section-7-Paragraph-77 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 7"@en ;
    domo:Text "The earliest form of IO in functional programming languages **was stream based [12]:** a executable program was a (possibly asynchronous) stream processor. Experience quickly showed it is easy to make mistakes in programs using asynchronous interfaces. Mature implementations of IO interfaces are therefore based on synchronous processing, consuming response streams to produce request streams, in a productive or contractive fashion. Some early functional operating systems [11] also used streams (sometimes in a ring) for communication among system processes."@en ;
    askg-onto:hasSentence askg-data:Paper-978f1c811f3bfb5d-Section-7-Paragraph-77-Sentence-771,
        askg-data:Paper-978f1c811f3bfb5d-Section-7-Paragraph-77-Sentence-772,
        askg-data:Paper-978f1c811f3bfb5d-Section-7-Paragraph-77-Sentence-773,
        askg-data:Paper-978f1c811f3bfb5d-Section-7-Paragraph-77-Sentence-774 ;
    askg-onto:index "7"^^xsd:int .

askg-data:Paper-978f1c811f3bfb5d-Section-7-Paragraph-77-Sentence-771 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "The earliest form of IO in functional programming languages **was stream based [12]:** a executable program was a (possibly asynchronous) stream processor."@en ;
    askg-onto:inSentence "The earliest form of IO in functional programming languages **was stream based [12]:** a executable program was a (possibly asynchronous) stream processor."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-executable_program,
        askg-data:Entity-io,
        askg-data:Entity-stream_based,
        askg-data:Entity-stream_processor .

askg-data:Paper-978f1c811f3bfb5d-Section-7-Paragraph-77-Sentence-772 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "Experience quickly showed it is easy to make mistakes in programs using asynchronous interfaces."@en ;
    askg-onto:inSentence "Experience quickly showed it is easy to make mistakes in programs using asynchronous interfaces."^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-asynchronous_interfaces,
        askg-data:Entity-programs .

askg-data:Paper-978f1c811f3bfb5d-Section-7-Paragraph-77-Sentence-773 a askg-onto:Sentence ;
    rdfs:label "Sentence 3"@en ;
    domo:Text "Mature implementations of IO interfaces are therefore based on synchronous processing, consuming response streams to produce request streams, in a productive or contractive fashion."@en ;
    askg-onto:inSentence "Mature implementations of IO interfaces are therefore based on synchronous processing, consuming response streams to produce request streams, in a productive or contractive fashion."^^xsd:string ;
    askg-onto:index "3"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-io_interfaces,
        askg-data:Entity-request_streams,
        askg-data:Entity-response_streams,
        askg-data:Entity-synchronous_processing .

askg-data:Paper-978f1c811f3bfb5d-Section-7-Paragraph-77-Sentence-774 a askg-onto:Sentence ;
    rdfs:label "Sentence 4"@en ;
    domo:Text "Some early functional operating systems [11] also used streams (sometimes in a ring) for communication among system processes."@en ;
    askg-onto:inSentence "Some early functional operating systems [11] also used streams (sometimes in a ring) for communication among system processes."^^xsd:string ;
    askg-onto:index "4"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-communication,
        askg-data:Entity-functional_operating_systems,
        askg-data:Entity-streams,
        askg-data:Entity-system_processes .

askg-data:Paper-978f1c811f3bfb5d-Section-7-Paragraph-78 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 8"@en ;
    domo:Text "The programming system Fudgets [14] is based on a representation of stream processors similar to the one in this paper, but without our separation of final from initial fixed points. Fudgets are a language for asynchronous stream processing. Various combinators are available for building up stream processors. Implementations of Fudgets with Haskell have been used to build powerful user interaction (mouse, keyboard, display) interfaces. The programming system Yampa [9], which has been used to produce **code for robots (among** other things) uses a synchronous dataflow metaphor, that is well aligned with classical control theory, with its signal processors and feedback loops."@en ;
    askg-onto:hasSentence askg-data:Paper-978f1c811f3bfb5d-Section-7-Paragraph-78-Sentence-781,
        askg-data:Paper-978f1c811f3bfb5d-Section-7-Paragraph-78-Sentence-782,
        askg-data:Paper-978f1c811f3bfb5d-Section-7-Paragraph-78-Sentence-783,
        askg-data:Paper-978f1c811f3bfb5d-Section-7-Paragraph-78-Sentence-784,
        askg-data:Paper-978f1c811f3bfb5d-Section-7-Paragraph-78-Sentence-785 ;
    askg-onto:index "8"^^xsd:int .

askg-data:Paper-978f1c811f3bfb5d-Section-7-Paragraph-78-Sentence-781 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "The programming system Fudgets [14] is based on a representation of stream processors similar to the one in this paper, but without our separation of final from initial fixed points."@en ;
    askg-onto:inSentence "The programming system Fudgets [14] is based on a representation of stream processors similar to the one in this paper, but without our separation of final from initial fixed points."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-fudgets,
        askg-data:Entity-representation_of_stream_processors .

askg-data:Paper-978f1c811f3bfb5d-Section-7-Paragraph-78-Sentence-782 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "Fudgets are a language for asynchronous stream processing."@en ;
    askg-onto:inSentence "Fudgets are a language for asynchronous stream processing."^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-a_language_for_asynchronous_stream_processing,
        askg-data:Entity-fudgets .

askg-data:Paper-978f1c811f3bfb5d-Section-7-Paragraph-78-Sentence-783 a askg-onto:Sentence ;
    rdfs:label "Sentence 3"@en ;
    domo:Text "Various combinators are available for building up stream processors."@en ;
    askg-onto:inSentence "Various combinators are available for building up stream processors."^^xsd:string ;
    askg-onto:index "3"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-combinators,
        askg-data:Entity-stream_processors .

askg-data:Paper-978f1c811f3bfb5d-Section-7-Paragraph-78-Sentence-784 a askg-onto:Sentence ;
    rdfs:label "Sentence 4"@en ;
    domo:Text "Implementations of Fudgets with Haskell have been used to build powerful user interaction (mouse, keyboard, display) interfaces."@en ;
    askg-onto:inSentence "Implementations of Fudgets with Haskell have been used to build powerful user interaction (mouse, keyboard, display) interfaces."^^xsd:string ;
    askg-onto:index "4"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-fudgets,
        askg-data:Entity-haskell,
        askg-data:Entity-user_interaction_interfaces .

askg-data:Paper-978f1c811f3bfb5d-Section-7-Paragraph-78-Sentence-785 a askg-onto:Sentence ;
    rdfs:label "Sentence 5"@en ;
    domo:Text "The programming system Yampa [9], which has been used to produce **code for robots (among** other things) uses a synchronous dataflow metaphor, that is well aligned with classical control theory, with its signal processors and feedback loops."@en ;
    askg-onto:inSentence "The programming system Yampa [9], which has been used to produce **code for robots (among** other things) uses a synchronous dataflow metaphor, that is well aligned with classical control theory, with its signal processors and feedback loops."^^xsd:string ;
    askg-onto:index "5"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-classical_control_theory,
        askg-data:Entity-code_for_robots,
        askg-data:Entity-feedback_loops,
        askg-data:Entity-signal_processors,
        askg-data:Entity-synchronous_dataflow_metaphor,
        askg-data:Entity-yampa .

askg-data:Paper-978f1c811f3bfb5d-Section-7-Paragraph-79 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 9"@en ;
    domo:Text "It seems obvious that the semantics of feedback loops involves fixpoints, so it may be natural to focus on contractive **functions, because of Banach's fixed point theorem (see the** references in the paper [3]). This states that contractive functions have unique fixed points. In their paper \"Ensuring streams flow\" [19] Turner and Telford have analysed a productivity requirement for ensuring unique solutions of recursion equations. Productivity seems to be closely related to contractive functions. From another perspective, Buchholz has designed a calculus for writing (recursive) stream processing functions, (and even functions processing certain not-well-founded trees) which ensures that functions are contractive where required [3]. We have not specifically examined the representation of **contractive functions, though** they are prominent in the form of the functions (α0 \\#**) in our constructions. Nor have we** yet considered representations of uniformly continuous functions."@en ;
    askg-onto:hasSentence askg-data:Paper-978f1c811f3bfb5d-Section-7-Paragraph-79-Sentence-791,
        askg-data:Paper-978f1c811f3bfb5d-Section-7-Paragraph-79-Sentence-792,
        askg-data:Paper-978f1c811f3bfb5d-Section-7-Paragraph-79-Sentence-793,
        askg-data:Paper-978f1c811f3bfb5d-Section-7-Paragraph-79-Sentence-794,
        askg-data:Paper-978f1c811f3bfb5d-Section-7-Paragraph-79-Sentence-795,
        askg-data:Paper-978f1c811f3bfb5d-Section-7-Paragraph-79-Sentence-796,
        askg-data:Paper-978f1c811f3bfb5d-Section-7-Paragraph-79-Sentence-797 ;
    askg-onto:index "9"^^xsd:int .

askg-data:Paper-978f1c811f3bfb5d-Section-7-Paragraph-79-Sentence-791 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "It seems obvious that the semantics of feedback loops involves fixpoints, so it may be natural to focus on contractive **functions, because of Banach's fixed point theorem (see the** references in the paper [3])."@en ;
    askg-onto:inSentence "It seems obvious that the semantics of feedback loops involves fixpoints, so it may be natural to focus on contractive **functions, because of Banach's fixed point theorem (see the** references in the paper [3])."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-banachs_fixed_point_theorem,
        askg-data:Entity-feedback_loops,
        askg-data:Entity-fixpoints,
        askg-data:Entity-functions .

askg-data:Paper-978f1c811f3bfb5d-Section-7-Paragraph-79-Sentence-792 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "This states that contractive functions have unique fixed points."@en ;
    askg-onto:inSentence "This states that contractive functions have unique fixed points."^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-contractive_functions,
        askg-data:Entity-unique_fixed_points .

askg-data:Paper-978f1c811f3bfb5d-Section-7-Paragraph-79-Sentence-793 a askg-onto:Sentence ;
    rdfs:label "Sentence 3"@en ;
    domo:Text "In their paper \"Ensuring streams flow\" [19] Turner and Telford have analysed a productivity requirement for ensuring unique solutions of recursion equations."@en ;
    askg-onto:inSentence "In their paper \"Ensuring streams flow\" [19] Turner and Telford have analysed a productivity requirement for ensuring unique solutions of recursion equations."^^xsd:string ;
    askg-onto:index "3"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-ensuring_streams_flow,
        askg-data:Entity-productivity_requirement,
        askg-data:Entity-telford,
        askg-data:Entity-turner,
        askg-data:Entity-unique_solutions_of_recursion_equations .

askg-data:Paper-978f1c811f3bfb5d-Section-7-Paragraph-79-Sentence-794 a askg-onto:Sentence ;
    rdfs:label "Sentence 4"@en ;
    domo:Text "Productivity seems to be closely related to contractive functions."@en ;
    askg-onto:inSentence "Productivity seems to be closely related to contractive functions."^^xsd:string ;
    askg-onto:index "4"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-contractive_functions,
        askg-data:Entity-productivity .

askg-data:Paper-978f1c811f3bfb5d-Section-7-Paragraph-79-Sentence-795 a askg-onto:Sentence ;
    rdfs:label "Sentence 5"@en ;
    domo:Text "From another perspective, Buchholz has designed a calculus for writing (recursive) stream processing functions, (and even functions processing certain not-well-founded trees) which ensures that functions are contractive where required [3]."@en ;
    askg-onto:inSentence "From another perspective, Buchholz has designed a calculus for writing (recursive) stream processing functions, (and even functions processing certain not-well-founded trees) which ensures that functions are contractive where required [3]."^^xsd:string ;
    askg-onto:index "5"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-a_calculus_for_writing_recursive_stream_processing_functions,
        askg-data:Entity-buchholz,
        askg-data:Entity-functions_are_contractive_where_required .

askg-data:Paper-978f1c811f3bfb5d-Section-7-Paragraph-79-Sentence-796 a askg-onto:Sentence ;
    rdfs:label "Sentence 6"@en ;
    domo:Text "We have not specifically examined the representation of **contractive functions, though** they are prominent in the form of the functions (α0 \\#**) in our constructions."@en ;
    askg-onto:inSentence "We have not specifically examined the representation of **contractive functions, though** they are prominent in the form of the functions (α0 \\#**) in our constructions."^^xsd:string ;
    askg-onto:index "6"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-contractive_functions,
        askg-data:Entity-the_functions_%CE%B10__ .

askg-data:Paper-978f1c811f3bfb5d-Section-7-Paragraph-79-Sentence-797 a askg-onto:Sentence ;
    rdfs:label "Sentence 7"@en ;
    domo:Text "Nor have we** yet considered representations of uniformly continuous functions."@en ;
    askg-onto:inSentence "Nor have we** yet considered representations of uniformly continuous functions."^^xsd:string ;
    askg-onto:index "7"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-representations_of_uniformly_continuous_functions,
        askg-data:Entity-uniformly_continuous_functions .

askg-data:Paper-978f1c811f3bfb5d-Section-8 a askg-onto:Section ;
    rdfs:label "Section 8"@en ;
    domo:Text "References"@en ;
    askg-onto:hasParagraph askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-81,
        askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-810,
        askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-82,
        askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-83,
        askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-84,
        askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-85,
        askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-86,
        askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-87,
        askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-88,
        askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-89 ;
    askg-onto:index "8"^^xsd:int ;
    askg-onto:level "2"^^xsd:int .

askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-81 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 1"@en ;
    domo:Text "[1] T. Altenkirch. Representations of first order function types as terminal coalgebras. In **Typed Lambda** Calculi and Applications, TLCA 2001**, number 2044 in Lecture Notes in Computer Science, pages 8 –** 21, 2001."@en ;
    askg-onto:hasSentence askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-81-Sentence-811,
        askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-81-Sentence-812,
        askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-81-Sentence-813,
        askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-81-Sentence-814 ;
    askg-onto:index "1"^^xsd:int .

askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-81-Sentence-811 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "[1] T."@en ;
    askg-onto:inSentence "[1] T."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-t,
        askg-data:Entity-unknown .

askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-81-Sentence-812 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "Altenkirch."@en ;
    askg-onto:inSentence "Altenkirch."^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-altenkirch,
        askg-data:Entity-person .

askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-81-Sentence-813 a askg-onto:Sentence ;
    rdfs:label "Sentence 3"@en ;
    domo:Text "Representations of first order function types as terminal coalgebras."@en ;
    askg-onto:inSentence "Representations of first order function types as terminal coalgebras."^^xsd:string ;
    askg-onto:index "3"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-representations_of_first_order_function_types,
        askg-data:Entity-terminal_coalgebras .

askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-81-Sentence-814 a askg-onto:Sentence ;
    rdfs:label "Sentence 4"@en ;
    domo:Text "In **Typed Lambda** Calculi and Applications, TLCA 2001**, number 2044 in Lecture Notes in Computer Science, pages 8 –** 21, 2001."@en ;
    askg-onto:inSentence "In **Typed Lambda** Calculi and Applications, TLCA 2001**, number 2044 in Lecture Notes in Computer Science, pages 8 –** 21, 2001."^^xsd:string ;
    askg-onto:index "4"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-concept,
        askg-data:Entity-corpus,
        askg-data:Entity-lecture_notes_in_computer_science,
        askg-data:Entity-publication,
        askg-data:Entity-tlca_2001,
        askg-data:Entity-typed_lambda_calculi .

askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-810 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 10"@en ;
    domo:Text "[20] A. Troelstra and D. van Dalen. Constructivism in Mathematics**. North-Holland, 1988. 2 volumes.** [21] D. Turner. Total functional programming. Journal of Universal Computer Science**, 10(7):751–768, 2004.**"@en ;
    askg-onto:hasSentence askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-810-Sentence-8101,
        askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-810-Sentence-8102,
        askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-810-Sentence-8103,
        askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-810-Sentence-8104,
        askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-810-Sentence-8105,
        askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-810-Sentence-8106,
        askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-810-Sentence-8107,
        askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-810-Sentence-8108,
        askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-810-Sentence-8109 ;
    askg-onto:index "10"^^xsd:int .

askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-810-Sentence-8101 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "[20] A."@en ;
    askg-onto:inSentence "[20] A."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-a,
        askg-data:Entity-research_concept .

askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-810-Sentence-8102 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "Troelstra and D."@en ;
    askg-onto:inSentence "Troelstra and D."^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-author,
        askg-data:Entity-d,
        askg-data:Entity-troelstra .

askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-810-Sentence-8103 a askg-onto:Sentence ;
    rdfs:label "Sentence 3"@en ;
    domo:Text "van Dalen."@en ;
    askg-onto:inSentence "van Dalen."^^xsd:string ;
    askg-onto:index "3"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-a_researcher,
        askg-data:Entity-van_dalen .

askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-810-Sentence-8104 a askg-onto:Sentence ;
    rdfs:label "Sentence 4"@en ;
    domo:Text "Constructivism in Mathematics**."@en ;
    askg-onto:inSentence "Constructivism in Mathematics**."^^xsd:string ;
    askg-onto:index "4"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-constructivism,
        askg-data:Entity-mathematics .

askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-810-Sentence-8105 a askg-onto:Sentence ;
    rdfs:label "Sentence 5"@en ;
    domo:Text "North-Holland, 1988."@en ;
    askg-onto:inSentence "North-Holland, 1988."^^xsd:string ;
    askg-onto:index "5"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-1988,
        askg-data:Entity-north-holland .

askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-810-Sentence-8106 a askg-onto:Sentence ;
    rdfs:label "Sentence 6"@en ;
    domo:Text "2 volumes.** [21] D."@en ;
    askg-onto:inSentence "2 volumes.** [21] D."^^xsd:string ;
    askg-onto:index "6"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-2_volumes,
        askg-data:Entity-d .

askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-810-Sentence-8107 a askg-onto:Sentence ;
    rdfs:label "Sentence 7"@en ;
    domo:Text "Turner."@en ;
    askg-onto:inSentence "Turner."^^xsd:string ;
    askg-onto:index "7"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-person,
        askg-data:Entity-turner .

askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-810-Sentence-8108 a askg-onto:Sentence ;
    rdfs:label "Sentence 8"@en ;
    domo:Text "Total functional programming."@en ;
    askg-onto:inSentence "Total functional programming."^^xsd:string ;
    askg-onto:index "8"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-paradigm,
        askg-data:Entity-total_functional_programming .

askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-810-Sentence-8109 a askg-onto:Sentence ;
    rdfs:label "Sentence 9"@en ;
    domo:Text "Journal of Universal Computer Science**, 10(7):751–768, 2004.**"@en ;
    askg-onto:inSentence "Journal of Universal Computer Science**, 10(7):751–768, 2004.**"^^xsd:string ;
    askg-onto:index "9"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-107751768,
        askg-data:Entity-2004,
        askg-data:Entity-journal_of_universal_computer_science,
        askg-data:Entity-publication .

askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-82 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 2"@en ;
    domo:Text "[2] J. Brotherston and A. Simpson. Complete sequent calculi for induction and infinite descent. In Proceedings of LICS-22**, pages 51–60. IEEE Computer Society, July 2007.** [3] W. Buchholz. A term calculus for (co-)recursive definitions on streamlike data structures. **Ann. Pure** Appl. Logic**, 136(1-2):75–90, 2005.** [4] M. Dummett. Elements of intuitionism**. Clarendon Press, Oxford, 2000. 2nd edition.** [5] A. D. Gordon. Functional programming and input/output**. Cambridge University Press, New York, NY,** USA, 1994."@en ;
    askg-onto:hasSentence askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-82-Sentence-821,
        askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-82-Sentence-8210,
        askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-82-Sentence-8211,
        askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-82-Sentence-8212,
        askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-82-Sentence-8213,
        askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-82-Sentence-8214,
        askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-82-Sentence-8215,
        askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-82-Sentence-8216,
        askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-82-Sentence-8217,
        askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-82-Sentence-8218,
        askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-82-Sentence-8219,
        askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-82-Sentence-822,
        askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-82-Sentence-823,
        askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-82-Sentence-824,
        askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-82-Sentence-825,
        askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-82-Sentence-826,
        askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-82-Sentence-827,
        askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-82-Sentence-828,
        askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-82-Sentence-829 ;
    askg-onto:index "2"^^xsd:int .

askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-82-Sentence-821 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "[2] J."@en ;
    askg-onto:inSentence "[2] J."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-j,
        askg-data:Entity-paper .

askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-82-Sentence-8210 a askg-onto:Sentence ;
    rdfs:label "Sentence 10"@en ;
    domo:Text "Pure** Appl."@en ;
    askg-onto:inSentence "Pure** Appl."^^xsd:string ;
    askg-onto:index "10"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-appl,
        askg-data:Entity-pure .

askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-82-Sentence-8211 a askg-onto:Sentence ;
    rdfs:label "Sentence 11"@en ;
    domo:Text "Logic**, 136(1-2):75–90, 2005.** [4] M."@en ;
    askg-onto:inSentence "Logic**, 136(1-2):75–90, 2005.** [4] M."^^xsd:string ;
    askg-onto:index "11"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-1361-27590_2005,
        askg-data:Entity-logic .

askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-82-Sentence-8212 a askg-onto:Sentence ;
    rdfs:label "Sentence 12"@en ;
    domo:Text "Dummett."@en ;
    askg-onto:inSentence "Dummett."^^xsd:string ;
    askg-onto:index "12"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-a_notable_figure_in_philosophy,
        askg-data:Entity-dummett .

askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-82-Sentence-8213 a askg-onto:Sentence ;
    rdfs:label "Sentence 13"@en ;
    domo:Text "Elements of intuitionism**."@en ;
    askg-onto:inSentence "Elements of intuitionism**."^^xsd:string ;
    askg-onto:index "13"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-elements_of_intuitionism,
        askg-data:Entity-paradigm .

askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-82-Sentence-8214 a askg-onto:Sentence ;
    rdfs:label "Sentence 14"@en ;
    domo:Text "Clarendon Press, Oxford, 2000."@en ;
    askg-onto:inSentence "Clarendon Press, Oxford, 2000."^^xsd:string ;
    askg-onto:index "14"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-2000,
        askg-data:Entity-clarendon_press,
        askg-data:Entity-oxford .

askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-82-Sentence-8215 a askg-onto:Sentence ;
    rdfs:label "Sentence 15"@en ;
    domo:Text "2nd edition.** [5] A."@en ;
    askg-onto:inSentence "2nd edition.** [5] A."^^xsd:string ;
    askg-onto:index "15"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-2nd_edition,
        askg-data:Entity-publication .

askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-82-Sentence-8216 a askg-onto:Sentence ;
    rdfs:label "Sentence 16"@en ;
    domo:Text "D."@en ;
    askg-onto:inSentence "D."^^xsd:string ;
    askg-onto:index "16"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-d,
        askg-data:Entity-person .

askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-82-Sentence-8217 a askg-onto:Sentence ;
    rdfs:label "Sentence 17"@en ;
    domo:Text "Gordon."@en ;
    askg-onto:inSentence "Gordon."^^xsd:string ;
    askg-onto:index "17"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-a_notable_figure,
        askg-data:Entity-gordon .

askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-82-Sentence-8218 a askg-onto:Sentence ;
    rdfs:label "Sentence 18"@en ;
    domo:Text "Functional programming and input/output**."@en ;
    askg-onto:inSentence "Functional programming and input/output**."^^xsd:string ;
    askg-onto:index "18"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-functional_programming,
        askg-data:Entity-inputoutput .

askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-82-Sentence-8219 a askg-onto:Sentence ;
    rdfs:label "Sentence 19"@en ;
    domo:Text "Cambridge University Press, New York, NY,** USA, 1994."@en ;
    askg-onto:inSentence "Cambridge University Press, New York, NY,** USA, 1994."^^xsd:string ;
    askg-onto:index "19"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-1994,
        askg-data:Entity-cambridge_university_press .

askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-82-Sentence-822 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "Brotherston and A."@en ;
    askg-onto:inSentence "Brotherston and A."^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-a,
        askg-data:Entity-author,
        askg-data:Entity-brotherston .

askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-82-Sentence-823 a askg-onto:Sentence ;
    rdfs:label "Sentence 3"@en ;
    domo:Text "Simpson."@en ;
    askg-onto:inSentence "Simpson."^^xsd:string ;
    askg-onto:index "3"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-person,
        askg-data:Entity-simpson .

askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-82-Sentence-824 a askg-onto:Sentence ;
    rdfs:label "Sentence 4"@en ;
    domo:Text "Complete sequent calculi for induction and infinite descent."@en ;
    askg-onto:inSentence "Complete sequent calculi for induction and infinite descent."^^xsd:string ;
    askg-onto:index "4"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-complete_sequent_calculi,
        askg-data:Entity-concept,
        askg-data:Entity-induction,
        askg-data:Entity-infinite_descent .

askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-82-Sentence-825 a askg-onto:Sentence ;
    rdfs:label "Sentence 5"@en ;
    domo:Text "In Proceedings of LICS-22**, pages 51–60."@en ;
    askg-onto:inSentence "In Proceedings of LICS-22**, pages 51–60."^^xsd:string ;
    askg-onto:index "5"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-lics-22,
        askg-data:Entity-proceedings .

askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-82-Sentence-826 a askg-onto:Sentence ;
    rdfs:label "Sentence 6"@en ;
    domo:Text "IEEE Computer Society, July 2007.** [3] W."@en ;
    askg-onto:inSentence "IEEE Computer Society, July 2007.** [3] W."^^xsd:string ;
    askg-onto:index "6"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-ieee_computer_society,
        askg-data:Entity-july_2007,
        askg-data:Entity-w .

askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-82-Sentence-827 a askg-onto:Sentence ;
    rdfs:label "Sentence 7"@en ;
    domo:Text "Buchholz."@en ;
    askg-onto:inSentence "Buchholz."^^xsd:string ;
    askg-onto:index "7"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-buchholz,
        askg-data:Entity-person .

askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-82-Sentence-828 a askg-onto:Sentence ;
    rdfs:label "Sentence 8"@en ;
    domo:Text "A term calculus for (co-)recursive definitions on streamlike data structures."@en ;
    askg-onto:inSentence "A term calculus for (co-)recursive definitions on streamlike data structures."^^xsd:string ;
    askg-onto:index "8"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-calculus,
        askg-data:Entity-co-recursive_definitions,
        askg-data:Entity-streamlike_data_structures .

askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-82-Sentence-829 a askg-onto:Sentence ;
    rdfs:label "Sentence 9"@en ;
    domo:Text "**Ann."@en ;
    askg-onto:inSentence "**Ann."^^xsd:string ;
    askg-onto:index "9"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-ann,
        askg-data:Entity-person .

askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-83 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 3"@en ;
    domo:Text "[6] C. Heunen and B. Jacobs. Arrows, like monads, are monoids. **Electronic Notes in Theoretical Computer** Science**, 158:219–236, May 2006.** [7] R. Hinze. Memo functions, polytypically! In J. Jeuring, editor, **Proceedings of the 2nd Workshop on** Generic Programming, Ponte de Lima, Portugal**, pages 17–32, jul 2000. The proceedings appeared as a** technical report of Universiteit Utrecht, UU-CS-2000-19."@en ;
    askg-onto:hasSentence askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-83-Sentence-831,
        askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-83-Sentence-8310,
        askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-83-Sentence-832,
        askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-83-Sentence-833,
        askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-83-Sentence-834,
        askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-83-Sentence-835,
        askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-83-Sentence-836,
        askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-83-Sentence-837,
        askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-83-Sentence-838,
        askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-83-Sentence-839 ;
    askg-onto:index "3"^^xsd:int .

askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-83-Sentence-831 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "[6] C."@en ;
    askg-onto:inSentence "[6] C."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-c,
        askg-data:Entity-unknown_entity .

askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-83-Sentence-8310 a askg-onto:Sentence ;
    rdfs:label "Sentence 10"@en ;
    domo:Text "The proceedings appeared as a** technical report of Universiteit Utrecht, UU-CS-2000-19."@en ;
    askg-onto:inSentence "The proceedings appeared as a** technical report of Universiteit Utrecht, UU-CS-2000-19."^^xsd:string ;
    askg-onto:index "10"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-universiteit_utrecht,
        askg-data:Entity-uu-cs-2000-19 .

askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-83-Sentence-832 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "Heunen and B."@en ;
    askg-onto:inSentence "Heunen and B."^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-b,
        askg-data:Entity-heunen .

askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-83-Sentence-833 a askg-onto:Sentence ;
    rdfs:label "Sentence 3"@en ;
    domo:Text "Jacobs."@en ;
    askg-onto:inSentence "Jacobs."^^xsd:string ;
    askg-onto:index "3"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-jacobs,
        askg-data:Entity-person .

askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-83-Sentence-834 a askg-onto:Sentence ;
    rdfs:label "Sentence 4"@en ;
    domo:Text "Arrows, like monads, are monoids."@en ;
    askg-onto:inSentence "Arrows, like monads, are monoids."^^xsd:string ;
    askg-onto:index "4"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-arrows,
        askg-data:Entity-monads,
        askg-data:Entity-monoids .

askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-83-Sentence-835 a askg-onto:Sentence ;
    rdfs:label "Sentence 5"@en ;
    domo:Text "**Electronic Notes in Theoretical Computer** Science**, 158:219–236, May 2006.** [7] R."@en ;
    askg-onto:inSentence "**Electronic Notes in Theoretical Computer** Science**, 158:219–236, May 2006.** [7] R."^^xsd:string ;
    askg-onto:index "5"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-158219236,
        askg-data:Entity-author,
        askg-data:Entity-electronic_notes_in_theoretical_computer_science,
        askg-data:Entity-publication,
        askg-data:Entity-r .

askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-83-Sentence-836 a askg-onto:Sentence ;
    rdfs:label "Sentence 6"@en ;
    domo:Text "Hinze."@en ;
    askg-onto:inSentence "Hinze."^^xsd:string ;
    askg-onto:index "6"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-author,
        askg-data:Entity-hinze .

askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-83-Sentence-837 a askg-onto:Sentence ;
    rdfs:label "Sentence 7"@en ;
    domo:Text "Memo functions, polytypically!"@en ;
    askg-onto:inSentence "Memo functions, polytypically!"^^xsd:string ;
    askg-onto:index "7"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-memo_functions,
        askg-data:Entity-polytypically .

askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-83-Sentence-838 a askg-onto:Sentence ;
    rdfs:label "Sentence 8"@en ;
    domo:Text "In J."@en ;
    askg-onto:inSentence "In J."^^xsd:string ;
    askg-onto:index "8"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-j,
        askg-data:Entity-publication .

askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-83-Sentence-839 a askg-onto:Sentence ;
    rdfs:label "Sentence 9"@en ;
    domo:Text "Jeuring, editor, **Proceedings of the 2nd Workshop on** Generic Programming, Ponte de Lima, Portugal**, pages 17–32, jul 2000."@en ;
    askg-onto:inSentence "Jeuring, editor, **Proceedings of the 2nd Workshop on** Generic Programming, Ponte de Lima, Portugal**, pages 17–32, jul 2000."^^xsd:string ;
    askg-onto:index "9"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-jeuring,
        askg-data:Entity-pages_1732,
        askg-data:Entity-proceedings_of_the_2nd_workshop_on_generic_programming .

askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-84 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 4"@en ;
    domo:Text "[8] W. A. Howard and G. Kreisel. Transfinite induction and bar **induction of types zero and one, and the** role of continuity in intuitionistic analysis. J. Symb. Log.**, 31(3):325–358, 1966.** [9] P. Hudak, A. Courtney, H. Nilsson, and J. Peterson. Arrows, robots, and functional reactive programming. In Summer School on Advanced Functional Programming 2002, Oxford University**, volume 2638** of Lecture Notes in Computer Science**, pages 159–187. Springer-Verlag, 2003.** [10] J. Hughes. Generalising monads to arrows. Science of Computer Programming**, 37(1-3):67–111, May** 2000."@en ;
    askg-onto:hasSentence askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-84-Sentence-841,
        askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-84-Sentence-8410,
        askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-84-Sentence-8411,
        askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-84-Sentence-8412,
        askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-84-Sentence-8413,
        askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-84-Sentence-8414,
        askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-84-Sentence-8415,
        askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-84-Sentence-8416,
        askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-84-Sentence-8417,
        askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-84-Sentence-8418,
        askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-84-Sentence-842,
        askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-84-Sentence-843,
        askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-84-Sentence-844,
        askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-84-Sentence-845,
        askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-84-Sentence-846,
        askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-84-Sentence-847,
        askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-84-Sentence-848,
        askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-84-Sentence-849 ;
    askg-onto:index "4"^^xsd:int .

askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-84-Sentence-841 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "[8] W."@en ;
    askg-onto:inSentence "[8] W."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-w .

askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-84-Sentence-8410 a askg-onto:Sentence ;
    rdfs:label "Sentence 10"@en ;
    domo:Text "Courtney, H."@en ;
    askg-onto:inSentence "Courtney, H."^^xsd:string ;
    askg-onto:index "10"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-author,
        askg-data:Entity-courtney_h .

askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-84-Sentence-8411 a askg-onto:Sentence ;
    rdfs:label "Sentence 11"@en ;
    domo:Text "Nilsson, and J."@en ;
    askg-onto:inSentence "Nilsson, and J."^^xsd:string ;
    askg-onto:index "11"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-a_researcher,
        askg-data:Entity-j,
        askg-data:Entity-nilsson .

askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-84-Sentence-8412 a askg-onto:Sentence ;
    rdfs:label "Sentence 12"@en ;
    domo:Text "Peterson."@en ;
    askg-onto:inSentence "Peterson."^^xsd:string ;
    askg-onto:index "12"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-peterson .

askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-84-Sentence-8413 a askg-onto:Sentence ;
    rdfs:label "Sentence 13"@en ;
    domo:Text "Arrows, robots, and functional reactive programming."@en ;
    askg-onto:inSentence "Arrows, robots, and functional reactive programming."^^xsd:string ;
    askg-onto:index "13"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-arrows,
        askg-data:Entity-device,
        askg-data:Entity-functional_reactive_programming,
        askg-data:Entity-paradigm,
        askg-data:Entity-robots .

askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-84-Sentence-8414 a askg-onto:Sentence ;
    rdfs:label "Sentence 14"@en ;
    domo:Text "In Summer School on Advanced Functional Programming 2002, Oxford University**, volume 2638** of Lecture Notes in Computer Science**, pages 159–187."@en ;
    askg-onto:inSentence "In Summer School on Advanced Functional Programming 2002, Oxford University**, volume 2638** of Lecture Notes in Computer Science**, pages 159–187."^^xsd:string ;
    askg-onto:index "14"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-2638,
        askg-data:Entity-lecture_notes_in_computer_science,
        askg-data:Entity-oxford_university,
        askg-data:Entity-pages_159187 .

askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-84-Sentence-8415 a askg-onto:Sentence ;
    rdfs:label "Sentence 15"@en ;
    domo:Text "Springer-Verlag, 2003.** [10] J."@en ;
    askg-onto:inSentence "Springer-Verlag, 2003.** [10] J."^^xsd:string ;
    askg-onto:index "15"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-2003,
        askg-data:Entity-j,
        askg-data:Entity-springer-verlag,
        askg-data:Entity-springer-verlag_2003 .

askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-84-Sentence-8416 a askg-onto:Sentence ;
    rdfs:label "Sentence 16"@en ;
    domo:Text "Hughes."@en ;
    askg-onto:inSentence "Hughes."^^xsd:string ;
    askg-onto:index "16"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-author,
        askg-data:Entity-hughes .

askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-84-Sentence-8417 a askg-onto:Sentence ;
    rdfs:label "Sentence 17"@en ;
    domo:Text "Generalising monads to arrows."@en ;
    askg-onto:inSentence "Generalising monads to arrows."^^xsd:string ;
    askg-onto:index "17"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-arrows,
        askg-data:Entity-monads .

askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-84-Sentence-8418 a askg-onto:Sentence ;
    rdfs:label "Sentence 18"@en ;
    domo:Text "Science of Computer Programming**, 37(1-3):67–111, May** 2000."@en ;
    askg-onto:inSentence "Science of Computer Programming**, 37(1-3):67–111, May** 2000."^^xsd:string ;
    askg-onto:index "18"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-1-3,
        askg-data:Entity-37,
        askg-data:Entity-may_2000,
        askg-data:Entity-publication,
        askg-data:Entity-science_of_computer_programming .

askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-84-Sentence-842 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "A."@en ;
    askg-onto:inSentence "A."^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-triple_a,
        askg-data:Entity-triple_b .

askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-84-Sentence-843 a askg-onto:Sentence ;
    rdfs:label "Sentence 3"@en ;
    domo:Text "Howard and G."@en ;
    askg-onto:inSentence "Howard and G."^^xsd:string ;
    askg-onto:index "3"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-g,
        askg-data:Entity-howard .

askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-84-Sentence-844 a askg-onto:Sentence ;
    rdfs:label "Sentence 4"@en ;
    domo:Text "Kreisel."@en ;
    askg-onto:inSentence "Kreisel."^^xsd:string ;
    askg-onto:index "4"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-a_researcher,
        askg-data:Entity-kreisel .

askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-84-Sentence-845 a askg-onto:Sentence ;
    rdfs:label "Sentence 5"@en ;
    domo:Text "Transfinite induction and bar **induction of types zero and one, and the** role of continuity in intuitionistic analysis."@en ;
    askg-onto:inSentence "Transfinite induction and bar **induction of types zero and one, and the** role of continuity in intuitionistic analysis."^^xsd:string ;
    askg-onto:index "5"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-bar_induction_of_types_zero_and_one,
        askg-data:Entity-continuity,
        askg-data:Entity-intuitionistic_analysis,
        askg-data:Entity-transfinite_induction .

askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-84-Sentence-846 a askg-onto:Sentence ;
    rdfs:label "Sentence 6"@en ;
    domo:Text "J."@en ;
    askg-onto:inSentence "J."^^xsd:string ;
    askg-onto:index "6"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-author,
        askg-data:Entity-j .

askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-84-Sentence-847 a askg-onto:Sentence ;
    rdfs:label "Sentence 7"@en ;
    domo:Text "Symb."@en ;
    askg-onto:inSentence "Symb."^^xsd:string ;
    askg-onto:index "7"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-concept,
        askg-data:Entity-symb .

askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-84-Sentence-848 a askg-onto:Sentence ;
    rdfs:label "Sentence 8"@en ;
    domo:Text "Log.**, 31(3):325–358, 1966.** [9] P."@en ;
    askg-onto:inSentence "Log.**, 31(3):325–358, 1966.** [9] P."^^xsd:string ;
    askg-onto:index "8"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-313325358_1966,
        askg-data:Entity-log .

askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-84-Sentence-849 a askg-onto:Sentence ;
    rdfs:label "Sentence 9"@en ;
    domo:Text "Hudak, A."@en ;
    askg-onto:inSentence "Hudak, A."^^xsd:string ;
    askg-onto:index "9"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-author,
        askg-data:Entity-hudak_a .

askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-85 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 5"@en ;
    domo:Text "[11] S. B. Jones and A. F. Sinclair. Functional programming and operating systems. Comput. J.**, 32(2):162–** 174, 1989."@en ;
    askg-onto:hasSentence askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-85-Sentence-851,
        askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-85-Sentence-852,
        askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-85-Sentence-853,
        askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-85-Sentence-854,
        askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-85-Sentence-855,
        askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-85-Sentence-856,
        askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-85-Sentence-857,
        askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-85-Sentence-858 ;
    askg-onto:index "5"^^xsd:int .

askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-85-Sentence-851 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "[11] S."@en ;
    askg-onto:inSentence "[11] S."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-author,
        askg-data:Entity-s .

askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-85-Sentence-852 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "B."@en ;
    askg-onto:inSentence "B."^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-b,
        askg-data:Entity-text .

askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-85-Sentence-853 a askg-onto:Sentence ;
    rdfs:label "Sentence 3"@en ;
    domo:Text "Jones and A."@en ;
    askg-onto:inSentence "Jones and A."^^xsd:string ;
    askg-onto:index "3"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-a,
        askg-data:Entity-author,
        askg-data:Entity-jones .

askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-85-Sentence-854 a askg-onto:Sentence ;
    rdfs:label "Sentence 4"@en ;
    domo:Text "F."@en ;
    askg-onto:inSentence "F."^^xsd:string ;
    askg-onto:index "4"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-f,
        askg-data:Entity-unknown .

askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-85-Sentence-855 a askg-onto:Sentence ;
    rdfs:label "Sentence 5"@en ;
    domo:Text "Sinclair."@en ;
    askg-onto:inSentence "Sinclair."^^xsd:string ;
    askg-onto:index "5"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-person,
        askg-data:Entity-sinclair .

askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-85-Sentence-856 a askg-onto:Sentence ;
    rdfs:label "Sentence 6"@en ;
    domo:Text "Functional programming and operating systems."@en ;
    askg-onto:inSentence "Functional programming and operating systems."^^xsd:string ;
    askg-onto:index "6"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-functional_programming,
        askg-data:Entity-operating_systems .

askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-85-Sentence-857 a askg-onto:Sentence ;
    rdfs:label "Sentence 7"@en ;
    domo:Text "Comput."@en ;
    askg-onto:inSentence "Comput."^^xsd:string ;
    askg-onto:index "7"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-comput,
        askg-data:Entity-concept .

askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-85-Sentence-858 a askg-onto:Sentence ;
    rdfs:label "Sentence 8"@en ;
    domo:Text "J.**, 32(2):162–** 174, 1989."@en ;
    askg-onto:inSentence "J.**, 32(2):162–** 174, 1989."^^xsd:string ;
    askg-onto:index "8"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-322162_174_1989,
        askg-data:Entity-j .

askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-86 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 6"@en ;
    domo:Text "[12] P. J. Landin. Correspondence between algol 60 and church's lambda-notation: part i. **Commun. ACM**, 8(2):89–101, 1965."@en ;
    askg-onto:hasSentence askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-86-Sentence-861,
        askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-86-Sentence-862,
        askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-86-Sentence-863,
        askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-86-Sentence-864,
        askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-86-Sentence-865,
        askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-86-Sentence-866 ;
    askg-onto:index "6"^^xsd:int .

askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-86-Sentence-861 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "[12] P."@en ;
    askg-onto:inSentence "[12] P."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-p,
        askg-data:Entity-publication .

askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-86-Sentence-862 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "J."@en ;
    askg-onto:inSentence "J."^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-j,
        askg-data:Entity-person .

askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-86-Sentence-863 a askg-onto:Sentence ;
    rdfs:label "Sentence 3"@en ;
    domo:Text "Landin."@en ;
    askg-onto:inSentence "Landin."^^xsd:string ;
    askg-onto:index "3"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-author,
        askg-data:Entity-landin .

askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-86-Sentence-864 a askg-onto:Sentence ;
    rdfs:label "Sentence 4"@en ;
    domo:Text "Correspondence between algol 60 and church's lambda-notation: part i."@en ;
    askg-onto:inSentence "Correspondence between algol 60 and church's lambda-notation: part i."^^xsd:string ;
    askg-onto:index "4"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-algol_60,
        askg-data:Entity-churchs_lambda-notation .

askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-86-Sentence-865 a askg-onto:Sentence ;
    rdfs:label "Sentence 5"@en ;
    domo:Text "**Commun."@en ;
    askg-onto:inSentence "**Commun."^^xsd:string ;
    askg-onto:index "5"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-commun,
        askg-data:Entity-concept .

askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-86-Sentence-866 a askg-onto:Sentence ;
    rdfs:label "Sentence 6"@en ;
    domo:Text "ACM**, 8(2):89–101, 1965."@en ;
    askg-onto:inSentence "ACM**, 8(2):89–101, 1965."^^xsd:string ;
    askg-onto:index "6"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-8289101_1965,
        askg-data:Entity-acm .

askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-87 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 7"@en ;
    domo:Text "[13] G. Mints. Finite investigations of transfinite derivations. J. Sov. Math.**, 10, 1978.** [14] A. K. Moran, D. Sands, and M. Carlsson. Erratic Fudgets: A semantic theory for an embedded coordination language. In Coordination '99, volume 1594 of Lecture Notes in Computer Science**. Springer-Verlags,** Apr. 1999."@en ;
    askg-onto:hasSentence askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-87-Sentence-871,
        askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-87-Sentence-8710,
        askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-87-Sentence-8711,
        askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-87-Sentence-8712,
        askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-87-Sentence-8713,
        askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-87-Sentence-8714,
        askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-87-Sentence-872,
        askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-87-Sentence-873,
        askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-87-Sentence-874,
        askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-87-Sentence-875,
        askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-87-Sentence-876,
        askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-87-Sentence-877,
        askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-87-Sentence-878,
        askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-87-Sentence-879 ;
    askg-onto:index "7"^^xsd:int .

askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-87-Sentence-871 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "[13] G."@en ;
    askg-onto:inSentence "[13] G."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-g .

askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-87-Sentence-8710 a askg-onto:Sentence ;
    rdfs:label "Sentence 10"@en ;
    domo:Text "Carlsson."@en ;
    askg-onto:inSentence "Carlsson."^^xsd:string ;
    askg-onto:index "10"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-carlsson,
        askg-data:Entity-scientist .

askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-87-Sentence-8711 a askg-onto:Sentence ;
    rdfs:label "Sentence 11"@en ;
    domo:Text "Erratic Fudgets: A semantic theory for an embedded coordination language."@en ;
    askg-onto:inSentence "Erratic Fudgets: A semantic theory for an embedded coordination language."^^xsd:string ;
    askg-onto:index "11"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-embedded_coordination_language,
        askg-data:Entity-erratic_fudgets,
        askg-data:Entity-theory .

askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-87-Sentence-8712 a askg-onto:Sentence ;
    rdfs:label "Sentence 12"@en ;
    domo:Text "In Coordination '99, volume 1594 of Lecture Notes in Computer Science**."@en ;
    askg-onto:inSentence "In Coordination '99, volume 1594 of Lecture Notes in Computer Science**."^^xsd:string ;
    askg-onto:index "12"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-1594,
        askg-data:Entity-coordination_99,
        askg-data:Entity-lecture_notes_in_computer_science .

askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-87-Sentence-8713 a askg-onto:Sentence ;
    rdfs:label "Sentence 13"@en ;
    domo:Text "Springer-Verlags,** Apr."@en ;
    askg-onto:inSentence "Springer-Verlags,** Apr."^^xsd:string ;
    askg-onto:index "13"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-apr,
        askg-data:Entity-springer-verlags .

askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-87-Sentence-8714 a askg-onto:Sentence ;
    rdfs:label "Sentence 14"@en ;
    domo:Text "1999."@en ;
    askg-onto:inSentence "1999."^^xsd:string ;
    askg-onto:index "14"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-1999,
        askg-data:Entity-year .

askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-87-Sentence-872 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "Mints."@en ;
    askg-onto:inSentence "Mints."^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-concept,
        askg-data:Entity-mints .

askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-87-Sentence-873 a askg-onto:Sentence ;
    rdfs:label "Sentence 3"@en ;
    domo:Text "Finite investigations of transfinite derivations."@en ;
    askg-onto:inSentence "Finite investigations of transfinite derivations."^^xsd:string ;
    askg-onto:index "3"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-finite_investigations,
        askg-data:Entity-transfinite_derivations .

askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-87-Sentence-874 a askg-onto:Sentence ;
    rdfs:label "Sentence 4"@en ;
    domo:Text "J."@en ;
    askg-onto:inSentence "J."^^xsd:string ;
    askg-onto:index "4"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-j,
        askg-data:Entity-research_papers .

askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-87-Sentence-875 a askg-onto:Sentence ;
    rdfs:label "Sentence 5"@en ;
    domo:Text "Sov."@en ;
    askg-onto:inSentence "Sov."^^xsd:string ;
    askg-onto:index "5"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-concept,
        askg-data:Entity-sov .

askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-87-Sentence-876 a askg-onto:Sentence ;
    rdfs:label "Sentence 6"@en ;
    domo:Text "Math.**, 10, 1978.** [14] A."@en ;
    askg-onto:inSentence "Math.**, 10, 1978.** [14] A."^^xsd:string ;
    askg-onto:index "6"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-10_1978,
        askg-data:Entity-math .

askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-87-Sentence-877 a askg-onto:Sentence ;
    rdfs:label "Sentence 7"@en ;
    domo:Text "K."@en ;
    askg-onto:inSentence "K."^^xsd:string ;
    askg-onto:index "7"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-k,
        askg-data:Entity-unknown .

askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-87-Sentence-878 a askg-onto:Sentence ;
    rdfs:label "Sentence 8"@en ;
    domo:Text "Moran, D."@en ;
    askg-onto:inSentence "Moran, D."^^xsd:string ;
    askg-onto:index "8"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-author,
        askg-data:Entity-moran_d .

askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-87-Sentence-879 a askg-onto:Sentence ;
    rdfs:label "Sentence 9"@en ;
    domo:Text "Sands, and M."@en ;
    askg-onto:inSentence "Sands, and M."^^xsd:string ;
    askg-onto:index "9"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-author,
        askg-data:Entity-m,
        askg-data:Entity-sands .

askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-88 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 8"@en ;
    domo:Text "[15] D. Niwi´nski and I. Walukiewicz. Games for the µ-calculus. Theor. Comput. Sci.**, 163(1-2):99–116, 1996.** [16] J. E. Stoy and C. Strachey. Os6 - an experimental operating system for a small computer. part 1: general principles and structure. Comput. J.**, 15(2):117–124, 1972.** [17] W. Swierstra and T. Altenkirch. Beauty in the beast: A functional semantics of the awkward squad. In Haskell '07: Proceedings of the ACM SIGPLAN Workshop on Haskell**, pages 25–36, 2007.** [18] W. W. Tait. Constructive reasoning. In B. V. Rootselaar and J. Staal, editors, **Logic, Methodology** and Philosophy of Science III, Studies in Logic and the Foundations of Mathematics, pages **185–200,** Amsterdam, 1968. North-Holland."@en ;
    askg-onto:hasSentence askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-88-Sentence-881,
        askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-88-Sentence-8810,
        askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-88-Sentence-8811,
        askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-88-Sentence-8812,
        askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-88-Sentence-8813,
        askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-88-Sentence-8814,
        askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-88-Sentence-8815,
        askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-88-Sentence-8816,
        askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-88-Sentence-8817,
        askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-88-Sentence-8818,
        askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-88-Sentence-8819,
        askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-88-Sentence-882,
        askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-88-Sentence-8820,
        askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-88-Sentence-8821,
        askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-88-Sentence-8822,
        askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-88-Sentence-8823,
        askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-88-Sentence-8824,
        askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-88-Sentence-8825,
        askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-88-Sentence-8826,
        askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-88-Sentence-883,
        askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-88-Sentence-884,
        askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-88-Sentence-885,
        askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-88-Sentence-886,
        askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-88-Sentence-887,
        askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-88-Sentence-888,
        askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-88-Sentence-889 ;
    askg-onto:index "8"^^xsd:int .

askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-88-Sentence-881 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "[15] D."@en ;
    askg-onto:inSentence "[15] D."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-d,
        askg-data:Entity-person .

askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-88-Sentence-8810 a askg-onto:Sentence ;
    rdfs:label "Sentence 10"@en ;
    domo:Text "Strachey."@en ;
    askg-onto:inSentence "Strachey."^^xsd:string ;
    askg-onto:index "10"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-person,
        askg-data:Entity-strachey .

askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-88-Sentence-8811 a askg-onto:Sentence ;
    rdfs:label "Sentence 11"@en ;
    domo:Text "Os6 - an experimental operating system for a small computer."@en ;
    askg-onto:inSentence "Os6 - an experimental operating system for a small computer."^^xsd:string ;
    askg-onto:index "11"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-an_experimental_operating_system_for_a_small_computer,
        askg-data:Entity-os6 .

askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-88-Sentence-8812 a askg-onto:Sentence ;
    rdfs:label "Sentence 12"@en ;
    domo:Text "part 1: general principles and structure."@en ;
    askg-onto:inSentence "part 1: general principles and structure."^^xsd:string ;
    askg-onto:index "12"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-general_principles,
        askg-data:Entity-structure .

askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-88-Sentence-8813 a askg-onto:Sentence ;
    rdfs:label "Sentence 13"@en ;
    domo:Text "Comput."@en ;
    askg-onto:inSentence "Comput."^^xsd:string ;
    askg-onto:index "13"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-comput,
        askg-data:Entity-concept .

askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-88-Sentence-8814 a askg-onto:Sentence ;
    rdfs:label "Sentence 14"@en ;
    domo:Text "J.**, 15(2):117–124, 1972.** [17] W."@en ;
    askg-onto:inSentence "J.**, 15(2):117–124, 1972.** [17] W."^^xsd:string ;
    askg-onto:index "14"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-j_152117124_1972,
        askg-data:Entity-w .

askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-88-Sentence-8815 a askg-onto:Sentence ;
    rdfs:label "Sentence 15"@en ;
    domo:Text "Swierstra and T."@en ;
    askg-onto:inSentence "Swierstra and T."^^xsd:string ;
    askg-onto:index "15"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-author,
        askg-data:Entity-swierstra,
        askg-data:Entity-t .

askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-88-Sentence-8816 a askg-onto:Sentence ;
    rdfs:label "Sentence 16"@en ;
    domo:Text "Altenkirch."@en ;
    askg-onto:inSentence "Altenkirch."^^xsd:string ;
    askg-onto:index "16"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-altenkirch,
        askg-data:Entity-person .

askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-88-Sentence-8817 a askg-onto:Sentence ;
    rdfs:label "Sentence 17"@en ;
    domo:Text "Beauty in the beast: A functional semantics of the awkward squad."@en ;
    askg-onto:inSentence "Beauty in the beast: A functional semantics of the awkward squad."^^xsd:string ;
    askg-onto:index "17"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-article,
        askg-data:Entity-awkward_squad,
        askg-data:Entity-beauty_in_the_beast,
        askg-data:Entity-concept,
        askg-data:Entity-functional_semantics .

askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-88-Sentence-8818 a askg-onto:Sentence ;
    rdfs:label "Sentence 18"@en ;
    domo:Text "In Haskell '07: Proceedings of the ACM SIGPLAN Workshop on Haskell**, pages 25–36, 2007.** [18] W."@en ;
    askg-onto:inSentence "In Haskell '07: Proceedings of the ACM SIGPLAN Workshop on Haskell**, pages 25–36, 2007.** [18] W."^^xsd:string ;
    askg-onto:index "18"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-2007,
        askg-data:Entity-2536,
        askg-data:Entity-acm,
        askg-data:Entity-acm_sigplan_workshop_on_haskell,
        askg-data:Entity-haskell_07,
        askg-data:Entity-publication .

askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-88-Sentence-8819 a askg-onto:Sentence ;
    rdfs:label "Sentence 19"@en ;
    domo:Text "W."@en ;
    askg-onto:inSentence "W."^^xsd:string ;
    askg-onto:index "19"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-person,
        askg-data:Entity-w .

askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-88-Sentence-882 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "Niwi´nski and I."@en ;
    askg-onto:inSentence "Niwi´nski and I."^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-i,
        askg-data:Entity-niwinski,
        askg-data:Entity-person .

askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-88-Sentence-8820 a askg-onto:Sentence ;
    rdfs:label "Sentence 20"@en ;
    domo:Text "Tait."@en ;
    askg-onto:inSentence "Tait."^^xsd:string ;
    askg-onto:index "20"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-person,
        askg-data:Entity-tait .

askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-88-Sentence-8821 a askg-onto:Sentence ;
    rdfs:label "Sentence 21"@en ;
    domo:Text "Constructive reasoning."@en ;
    askg-onto:inSentence "Constructive reasoning."^^xsd:string ;
    askg-onto:index "21"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-constructive_reasoning,
        askg-data:Entity-reasoning .

askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-88-Sentence-8822 a askg-onto:Sentence ;
    rdfs:label "Sentence 22"@en ;
    domo:Text "In B."@en ;
    askg-onto:inSentence "In B."^^xsd:string ;
    askg-onto:index "22"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-b .

askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-88-Sentence-8823 a askg-onto:Sentence ;
    rdfs:label "Sentence 23"@en ;
    domo:Text "V."@en ;
    askg-onto:inSentence "V."^^xsd:string ;
    askg-onto:index "23"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-text_analysis,
        askg-data:Entity-v .

askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-88-Sentence-8824 a askg-onto:Sentence ;
    rdfs:label "Sentence 24"@en ;
    domo:Text "Rootselaar and J."@en ;
    askg-onto:inSentence "Rootselaar and J."^^xsd:string ;
    askg-onto:index "24"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-j,
        askg-data:Entity-rootselaar .

askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-88-Sentence-8825 a askg-onto:Sentence ;
    rdfs:label "Sentence 25"@en ;
    domo:Text "Staal, editors, **Logic, Methodology** and Philosophy of Science III, Studies in Logic and the Foundations of Mathematics, pages **185–200,** Amsterdam, 1968."@en ;
    askg-onto:inSentence "Staal, editors, **Logic, Methodology** and Philosophy of Science III, Studies in Logic and the Foundations of Mathematics, pages **185–200,** Amsterdam, 1968."^^xsd:string ;
    askg-onto:index "25"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-logic_methodology_and_philosophy_of_science_iii,
        askg-data:Entity-staal,
        askg-data:Entity-studies_in_logic_and_the_foundations_of_mathematics .

askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-88-Sentence-8826 a askg-onto:Sentence ;
    rdfs:label "Sentence 26"@en ;
    domo:Text "North-Holland."@en ;
    askg-onto:inSentence "North-Holland."^^xsd:string ;
    askg-onto:index "26"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-north-holland,
        askg-data:Entity-organization .

askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-88-Sentence-883 a askg-onto:Sentence ;
    rdfs:label "Sentence 3"@en ;
    domo:Text "Walukiewicz."@en ;
    askg-onto:inSentence "Walukiewicz."^^xsd:string ;
    askg-onto:index "3"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-person,
        askg-data:Entity-walukiewicz .

askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-88-Sentence-884 a askg-onto:Sentence ;
    rdfs:label "Sentence 4"@en ;
    domo:Text "Games for the µ-calculus."@en ;
    askg-onto:inSentence "Games for the µ-calculus."^^xsd:string ;
    askg-onto:index "4"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-%C2%B5-calculus,
        askg-data:Entity-games .

askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-88-Sentence-885 a askg-onto:Sentence ;
    rdfs:label "Sentence 5"@en ;
    domo:Text "Theor."@en ;
    askg-onto:inSentence "Theor."^^xsd:string ;
    askg-onto:index "5"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-theor,
        askg-data:Entity-theory .

askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-88-Sentence-886 a askg-onto:Sentence ;
    rdfs:label "Sentence 6"@en ;
    domo:Text "Comput."@en ;
    askg-onto:inSentence "Comput."^^xsd:string ;
    askg-onto:index "6"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-comput,
        askg-data:Entity-concept .

askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-88-Sentence-887 a askg-onto:Sentence ;
    rdfs:label "Sentence 7"@en ;
    domo:Text "Sci.**, 163(1-2):99–116, 1996.** [16] J."@en ;
    askg-onto:inSentence "Sci.**, 163(1-2):99–116, 1996.** [16] J."^^xsd:string ;
    askg-onto:index "7"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-j,
        askg-data:Entity-sci_1631-299116_1996 .

askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-88-Sentence-888 a askg-onto:Sentence ;
    rdfs:label "Sentence 8"@en ;
    domo:Text "E."@en ;
    askg-onto:inSentence "E."^^xsd:string ;
    askg-onto:index "8"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-concept,
        askg-data:Entity-e .

askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-88-Sentence-889 a askg-onto:Sentence ;
    rdfs:label "Sentence 9"@en ;
    domo:Text "Stoy and C."@en ;
    askg-onto:inSentence "Stoy and C."^^xsd:string ;
    askg-onto:index "9"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-c,
        askg-data:Entity-stoy .

askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-89 a askg-onto:Paragraph ;
    rdfs:label "Paragraph 9"@en ;
    domo:Text "[19] A. Telford and D. Turner. Ensuring streams flow. In **Algebraic Methodology and Software Technology**, pages 509–523, 1997."@en ;
    askg-onto:hasSentence askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-89-Sentence-891,
        askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-89-Sentence-892,
        askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-89-Sentence-893,
        askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-89-Sentence-894,
        askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-89-Sentence-895 ;
    askg-onto:index "9"^^xsd:int .

askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-89-Sentence-891 a askg-onto:Sentence ;
    rdfs:label "Sentence 1"@en ;
    domo:Text "[19] A."@en ;
    askg-onto:inSentence "[19] A."^^xsd:string ;
    askg-onto:index "1"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-a,
        askg-data:Entity-person .

askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-89-Sentence-892 a askg-onto:Sentence ;
    rdfs:label "Sentence 2"@en ;
    domo:Text "Telford and D."@en ;
    askg-onto:inSentence "Telford and D."^^xsd:string ;
    askg-onto:index "2"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-author,
        askg-data:Entity-d,
        askg-data:Entity-telford .

askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-89-Sentence-893 a askg-onto:Sentence ;
    rdfs:label "Sentence 3"@en ;
    domo:Text "Turner."@en ;
    askg-onto:inSentence "Turner."^^xsd:string ;
    askg-onto:index "3"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-person,
        askg-data:Entity-turner .

askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-89-Sentence-894 a askg-onto:Sentence ;
    rdfs:label "Sentence 4"@en ;
    domo:Text "Ensuring streams flow."@en ;
    askg-onto:inSentence "Ensuring streams flow."^^xsd:string ;
    askg-onto:index "4"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-ensuring,
        askg-data:Entity-streams .

askg-data:Paper-978f1c811f3bfb5d-Section-8-Paragraph-89-Sentence-895 a askg-onto:Sentence ;
    rdfs:label "Sentence 5"@en ;
    domo:Text "In **Algebraic Methodology and Software Technology**, pages 509–523, 1997."@en ;
    askg-onto:inSentence "In **Algebraic Methodology and Software Technology**, pages 509–523, 1997."^^xsd:string ;
    askg-onto:index "5"^^xsd:int ;
    askg-onto:mentions askg-data:Entity-algebraic_methodology_and_software_technology,
        askg-data:Entity-publication .

askg-data:Entity-%CE%B10 rdfs:label "α(0)"@en,
        "α0"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-%CE%BDf rdfs:label "νF"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-%CF%86 rdfs:label "φ"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-%CF%88 rdfs:label "ψ"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-a%CF%89_to_b%CF%89 rdfs:label "Aω to Bω"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-acm rdfs:label "ACM"@en ;
    askg-onto:entityType "Organization"@en .

askg-data:Entity-all_arguments rdfs:label "all arguments"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-arbitrarily_far rdfs:label "arbitrarily far"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-argument_stream rdfs:label "argument stream"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-arrow rdfs:label "arrow"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-article rdfs:label "Article"@en ;
    askg-onto:entityType "Article"@en .

askg-data:Entity-bar_induction rdfs:label "bar induction"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-barred-ness rdfs:label "barred-ness"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-calculation rdfs:label "calculation"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-coalgebra rdfs:label "coalgebra"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-complete rdfs:label "complete"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-completeness rdfs:label "Completeness"@en,
        "completeness"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-composite rdfs:label "composite"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-composition_combinator_ rdfs:label "composition combinator ⊗"@en,
        "composition combinator ⊗′"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-concepts rdfs:label "concepts"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-constructive_reasoning rdfs:label "Constructive reasoning"@en,
        "constructive reasoning"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-continuous rdfs:label "continuous"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-cut-elimination rdfs:label "cut-elimination"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-deep_learning rdfs:label "Deep Learning"@en,
        "deep learning"@en ;
    askg-onto:entityType "Concept"@en,
        "Research Area"@en .

askg-data:Entity-discrete-valued_functions rdfs:label "discrete-valued functions"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-e rdfs:label "E"@en,
        "e"@en ;
    askg-onto:entityType "Concept"@en,
        "Person"@en .

askg-data:Entity-eat__%CF%801__assoc__eat rdfs:label "(eat∞ · π1 · assoc · eat)"@en,
        "eat∞ · π1 · assoc · eat"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-element_of_b rdfs:label "element of B"@en,
        "element of B**"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-endofunctors rdfs:label "Endofunctors"@en,
        "endofunctors"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-equations rdfs:label "equations"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-feedback_loops rdfs:label "feedback loops"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-finite_sequences rdfs:label "finite sequences"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-follows rdfs:label "follows"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-functor rdfs:label "functor"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-functors rdfs:label "functors"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-greedy_composition rdfs:label "greedy composition"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-hdeatrep_f%CE%B1 rdfs:label "hd(eat∞(rep∞ f,α))"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-hinze rdfs:label "Hinze"@en ;
    askg-onto:entityType "Author"@en,
        "Person"@en .

askg-data:Entity-hughes rdfs:label "Hughes"@en ;
    askg-onto:entityType "Author"@en,
        "Person"@en .

askg-data:Entity-induction rdfs:label "induction"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-inductive_structure rdfs:label "inductive structure"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-inner_recursion rdfs:label "inner recursion"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-input_stream rdfs:label "input stream"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-isomorphism rdfs:label "isomorphism"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-k rdfs:label "K"@en,
        "K."@en ;
    askg-onto:entityType "Concept"@en,
        "Person"@en .

askg-data:Entity-kreisel rdfs:label "Kreisel"@en ;
    askg-onto:entityType "Person"@en .

askg-data:Entity-lazy_form rdfs:label "lazy form"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-leaf rdfs:label "leaf"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-lemma_41 rdfs:label "Lemma 4.1"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-m rdfs:label "M."@en,
        "m"@en ;
    askg-onto:entityType "Concept"@en,
        "Person"@en .

askg-data:Entity-m_ab rdfs:label "M_{A}B"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-mathematics rdfs:label "Mathematics"@en,
        "mathematics"@en ;
    askg-onto:entityType "Concept"@en,
        "Domain"@en .

askg-data:Entity-monad rdfs:label "monad"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-monads rdfs:label "monads"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-natural_numbers rdfs:label "natural numbers"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-nested_structural_recursions rdfs:label "nested structural recursions"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-neural_networks rdfs:label "Neural Networks"@en,
        "neural networks"@en ;
    askg-onto:entityType "Concept"@en,
        "Research Area"@en .

askg-data:Entity-new rdfs:label "new"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-niwinski rdfs:label "Niwi´nski"@en ;
    askg-onto:entityType "Author"@en,
        "Person"@en .

askg-data:Entity-non-wellfounded_tree rdfs:label "non-wellfounded tree"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-none rdfs:label "none"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-north-holland rdfs:label "North-Holland"@en ;
    askg-onto:entityType "Organization"@en .

askg-data:Entity-operation rdfs:label "operation"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-output_stream rdfs:label "output stream"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-p_ab rdfs:label "P_{A}B"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-pab__a%CF%89__b%CF%89 rdfs:label "PAB × Aω → Bω"@en,
        "PAB → Aω ⇒ Bω"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-pac rdfs:label "PAC"@en,
        "PAC**"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-path rdfs:label "path"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-pbcc rdfs:label "pbcc"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-principle rdfs:label "principle"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-programming rdfs:label "programming"@en ;
    askg-onto:entityType "Domain"@en,
        "Method"@en .

askg-data:Entity-proofs rdfs:label "proofs"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-research_area rdfs:label "Research Area"@en ;
    askg-onto:entityType "Research Area"@en .

askg-data:Entity-research_group rdfs:label "Research Group"@en ;
    askg-onto:entityType "Research Group"@en .

askg-data:Entity-researcher rdfs:label "Researcher"@en,
        "researcher"@en ;
    askg-onto:entityType "Research Group"@en,
        "Researcher"@en .

askg-data:Entity-retbpab rdfs:label "Ret(b,pab)"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-s rdfs:label "S"@en,
        "S∆"@en ;
    askg-onto:entityType "Concept"@en,
        "Person"@en .

askg-data:Entity-set rdfs:label "Set"@en,
        "set"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-state_monad rdfs:label "state monad"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-stream_processing rdfs:label "Stream processing"@en,
        "stream processing"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-structural_recursion rdfs:label "structural recursion"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-t_abp_ab rdfs:label "T_A(B×P_AB)"@en,
        "T_{A}(B×P_{A}B)"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-t_acs rdfs:label "T_A(C×S)"@en,
        "T_{A}(C×S)"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-ta__brep__%CF%81 rdfs:label "(TA · (B×))rep∞ · ρ"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-tab__pab rdfs:label "TA(B × PAB**)"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-telford rdfs:label "Telford"@en ;
    askg-onto:entityType "Person"@en .

askg-data:Entity-text rdfs:label "Text"@en,
        "text"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-theory rdfs:label "Theory"@en,
        "theory"@en ;
    askg-onto:entityType "Theory"@en .

askg-data:Entity-tleatrep_f%CE%B1 rdfs:label "tl(eat∞(rep∞ f,α)"@en,
        "tl(eat∞(rep∞ f,α))"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-trees rdfs:label "trees"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-triple rdfs:label "triple"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-troelstra rdfs:label "Troelstra"@en ;
    askg-onto:entityType "Person"@en .

askg-data:Entity-value rdfs:label "value"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-walukiewicz rdfs:label "Walukiewicz"@en ;
    askg-onto:entityType "Author"@en .

askg-data:Entity-well-founded_trees rdfs:label "well-founded trees"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-wellfounded_trees rdfs:label "wellfounded trees"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-x rdfs:label "X"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-%C2%B5_x_b__xa rdfs:label "(µ X) B + XA"@en,
        "(µ X) B + XA**"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-a%CF%89__b%CF%89 rdfs:label "Aω ⇒ Bω"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-a_researcher rdfs:label "a researcher"@en ;
    askg-onto:entityType "Researcher"@en .

askg-data:Entity-algorithm rdfs:label "Algorithm"@en ;
    askg-onto:entityType "Algorithm"@en .

askg-data:Entity-arrows rdfs:label "Arrows"@en,
        "arrows"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-baire_space rdfs:label "Baire space"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-bar-induction rdfs:label "bar-induction"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-bisimulation rdfs:label "bisimulation"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-brouwer rdfs:label "Brouwer"@en ;
    askg-onto:entityType "Author"@en,
        "Person"@en .

askg-data:Entity-buchholz rdfs:label "Buchholz"@en ;
    askg-onto:entityType "Author"@en,
        "Person"@en .

askg-data:Entity-combinators rdfs:label "combinators"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-comput rdfs:label "Comput."@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-continuous_function rdfs:label "continuous function"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-contractive_functions rdfs:label "contractive functions"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-data rdfs:label "data"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-dataset rdfs:label "Dataset"@en,
        "dataset"@en ;
    askg-onto:entityType "Concept"@en,
        "Dataset"@en .

askg-data:Entity-device rdfs:label "Device"@en ;
    askg-onto:entityType "Device"@en .

askg-data:Entity-eat__%CF%801__assoc__eatta__brep__%CF%81tf%CE%B1 rdfs:label "(eat∞ · π1 · assoc · eat)((TA · (B×))rep∞ · ρ)(t,f'),α)"@en,
        "(eat∞ · π1 · assoc · eat)((TA · (B×))rep∞ · ρ)(t,f′),α)"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-elements rdfs:label "elements"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-experiment rdfs:label "Experiment"@en ;
    askg-onto:entityType "Experiment"@en .

askg-data:Entity-f_%CE%B1 rdfs:label "f α"@en,
        "f ′(α**)."@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-fudgets rdfs:label "Fudgets"@en ;
    askg-onto:entityType "Concept"@en,
        "System"@en .

askg-data:Entity-lecture_notes_in_computer_science rdfs:label "Lecture Notes in Computer Science"@en ;
    askg-onto:entityType "Corpus"@en,
        "Publication"@en .

askg-data:Entity-machine_learning rdfs:label "Machine Learning"@en,
        "machine learning"@en ;
    askg-onto:entityType "Concept"@en,
        "Research Area"@en .

askg-data:Entity-outer_recursion rdfs:label "outer recursion"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-paper rdfs:label "Paper"@en,
        "paper"@en ;
    askg-onto:entityType "Article"@en,
        "Publication"@en .

askg-data:Entity-paradigm rdfs:label "Paradigm"@en ;
    askg-onto:entityType "Paradigm"@en .

askg-data:Entity-pbcc_tab rdfs:label "pbcc tab"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-stream-valued_functions rdfs:label "stream-valued functions"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-stream_processing_components rdfs:label "stream processing components"@en ;
    askg-onto:entityType "Concept"@en,
        "Technology"@en .

askg-data:Entity-structure_map rdfs:label "Structure Map"@en,
        "Structure map"@en,
        "structure map"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-swierstra rdfs:label "Swierstra"@en ;
    askg-onto:entityType "Author"@en,
        "Person"@en .

askg-data:Entity-t_ab rdfs:label "$T_{A}B$"@en,
        "T_{A}B"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-ta rdfs:label "TA"@en,
        "TA**"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-tait rdfs:label "Tait"@en ;
    askg-onto:entityType "Author"@en,
        "Person"@en .

askg-data:Entity-we rdfs:label "We"@en,
        "we"@en ;
    askg-onto:entityType "Person"@en .

askg-data:Entity-argument rdfs:label "argument"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-continuity rdfs:label "Continuity"@en,
        "continuity"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-continuous_function_space rdfs:label "continuous function space"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-definition rdfs:label "Definition"@en,
        "definition"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-definitions rdfs:label "definitions"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-dummett rdfs:label "Dummett"@en ;
    askg-onto:entityType "Author"@en,
        "Person"@en .

askg-data:Entity-final_coalgebra rdfs:label "final coalgebra"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-fold rdfs:label "fold"@en ;
    askg-onto:entityType "Concept"@en,
        "Method"@en .

askg-data:Entity-function_f rdfs:label "function f"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-functional_programming rdfs:label "Functional programming"@en,
        "functional programming"@en ;
    askg-onto:entityType "Concept"@en,
        "Paradigm"@en .

askg-data:Entity-g rdfs:label "G."@en,
        "g"@en ;
    askg-onto:entityType "Author"@en,
        "Concept"@en,
        "Person"@en .

askg-data:Entity-get rdfs:label "Get"@en ;
    askg-onto:entityType "Concept"@en,
        "Tool"@en .

askg-data:Entity-get_%CF%86 rdfs:label "Get φ"@en,
        "Get φ**"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-haskell rdfs:label "Haskell"@en ;
    askg-onto:entityType "Concept"@en,
        "Technology"@en .

askg-data:Entity-hd rdfs:label "hd"@en ;
    askg-onto:entityType "Concept"@en,
        "Tool"@en .

askg-data:Entity-initial_algebras rdfs:label "Initial algebras"@en,
        "initial algebras"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-organization rdfs:label "Organization"@en ;
    askg-onto:entityType "Concept"@en,
        "Organization"@en .

askg-data:Entity-q rdfs:label "q"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-representations rdfs:label "representations"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-research rdfs:label "Research"@en,
        "research"@en ;
    askg-onto:entityType "Concept"@en,
        "Research Area"@en .

askg-data:Entity-ret rdfs:label "Ret"@en ;
    askg-onto:entityType "Concept"@en,
        "Tool"@en .

askg-data:Entity-technology rdfs:label "Technology"@en,
        "technology"@en ;
    askg-onto:entityType "Technology"@en .

askg-data:Entity-tl rdfs:label "tl"@en ;
    askg-onto:entityType "Concept"@en,
        "Tool"@en .

askg-data:Entity-tree rdfs:label "tree"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-turner rdfs:label "Turner"@en ;
    askg-onto:entityType "Person"@en .

askg-data:Entity-unknown rdfs:label "Unknown"@en,
        "unknown"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-w rdfs:label "W."@en ;
    askg-onto:entityType "Author"@en,
        "Person"@en .

askg-data:Entity-%CF%87 rdfs:label "χ"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-altenkirch rdfs:label "Altenkirch"@en ;
    askg-onto:entityType "Author"@en,
        "Person"@en .

askg-data:Entity-method rdfs:label "Method"@en,
        "method"@en ;
    askg-onto:entityType "Method"@en .

askg-data:Entity-stream_processors rdfs:label "stream processors"@en ;
    askg-onto:entityType "Concept"@en,
        "System"@en,
        "Technology"@en .

askg-data:Entity-t rdfs:label "T."@en,
        "t"@en ;
    askg-onto:entityType "Author"@en,
        "Concept"@en,
        "Person"@en .

askg-data:Entity-a%CF%89__b rdfs:label "Aω → B**"@en,
        "Aω ⇒ B"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-b%CF%89 rdfs:label "Bω"@en,
        "Bω**"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-proof rdfs:label "Proof"@en,
        "proof"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-rep rdfs:label "rep"@en,
        "rep∞"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-representation rdfs:label "representation"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-composition rdfs:label "Composition"@en,
        "composition"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-d rdfs:label "D"@en,
        "D."@en ;
    askg-onto:entityType "Concept"@en,
        "Person"@en,
        "Publication"@en .

askg-data:Entity-preponent rdfs:label "preponent"@en ;
    askg-onto:entityType "Concept"@en,
        "Person"@en .

askg-data:Entity-c rdfs:label "C."@en,
        "c"@en,
        "c'"@en ;
    askg-onto:entityType "Author"@en,
        "Concept"@en,
        "Person"@en .

askg-data:Entity-continuous_functions rdfs:label "continuous functions"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-pab rdfs:label "PAB"@en ;
    askg-onto:entityType "Concept"@en,
        "Method"@en .

askg-data:Entity-postponent rdfs:label "postponent"@en ;
    askg-onto:entityType "Concept"@en,
        "Person"@en .

askg-data:Entity-eat rdfs:label "eat"@en,
        "eat∞"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-final_coalgebras rdfs:label "Final coalgebras"@en,
        "final coalgebras"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-p rdfs:label "P"@en,
        "P."@en,
        "p"@en ;
    askg-onto:entityType "Author"@en,
        "Concept"@en .

askg-data:Entity-pbc rdfs:label "PBC"@en,
        "pbc"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-streams rdfs:label "Streams"@en,
        "streams"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-r rdfs:label "R"@en,
        "R**"@en,
        "R."@en,
        "r"@en ;
    askg-onto:entityType "Concept"@en,
        "Person"@en .

askg-data:Entity- rdfs:label "+"@en,
        "."@en,
        "[⋄|(#)]"@en,
        "×"@en,
        "⇒"@en,
        "∗"@en,
        "⊗"@en,
        "⊗'"@en,
        "⊗′"@en,
        "⋄"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-function rdfs:label "Function"@en,
        "function"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-j rdfs:label "J"@en,
        "J."@en,
        "J.**"@en ;
    askg-onto:entityType "Author"@en,
        "Concept"@en,
        "Person"@en .

askg-data:Entity-b rdfs:label "(B×**)"@en,
        "B"@en,
        "B**"@en,
        "B."@en,
        "b"@en ;
    askg-onto:entityType "Concept"@en,
        "Person"@en .

askg-data:Entity-functions rdfs:label "Functions"@en,
        "functions"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-publication rdfs:label "Publication"@en ;
    askg-onto:entityType "Concept"@en,
        "Publication"@en .

askg-data:Entity-tab rdfs:label "TAB"@en,
        "TAB∆"@en,
        "tab"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-%CE%B1 rdfs:label "α"@en,
        "α′"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-a rdfs:label "A"@en,
        "A*"@en,
        "A∗**"@en,
        "a"@en ;
    askg-onto:entityType "Concept"@en,
        "Person"@en .

askg-data:Entity-f rdfs:label "F."@en,
        "f"@en,
        "f'"@en ;
    askg-onto:entityType "Concept"@en,
        "Person"@en .

askg-data:Entity-author rdfs:label "Author"@en ;
    askg-onto:entityType "Author"@en,
        "Concept"@en .

askg-data:Entity-a%CF%89 rdfs:label "Aω"@en,
        "Aω**"@en ;
    askg-onto:entityType "Concept"@en .

askg-data:Entity-person rdfs:label "Person"@en,
        "person"@en ;
    askg-onto:entityType "Concept"@en,
        "Person"@en .

askg-data:Entity-concept rdfs:label "Concept"@en,
        "concept"@en ;
    askg-onto:entityType "Concept"@en,
        "Dataset"@en .

